# Note that we can't set "o" or "pipefail" or "eval '$(sentry-cli bash-hook)'" since xinitrc is run as a non-compatible shell script.
set -Eeu

xinitrc_pid=$$
echo "xinitrc PID: $xinitrc_pid"

# This script starts the AwesomeWM window manager inside the mandelbox
# and starts the mandelbox's application (i.e. Google Chrome)

RUN_AS_WHIST=/usr/share/whist/run-as-whist-user.sh

# Install keymappings
xmodmap /root/.Xmodmap

# Things running outside runuser are run as root

# Start playerctl daemon to respond to media keys and get the PID of the backgrounded process
echo "Starting 'playerctl daemon' in the background..."
$RUN_AS_WHIST "playerctl daemon" &
playerctld_pid=$!
echo "playerctld daemon started as PID: $playerctld_pid"

# Set the DPI to a default value of 96 and initialize the relevant files
# Note: This is safe to run before starting awesome and xsettingsd AND after X11 is initialized,
# but not in-between as this can lead to a race condition between AwesomeWM and DPI setting
/usr/share/whist/update-whist-dpi.sh

# Start the AwesomeWM window manager and get the PID of the backgrounded process
echo "Starting AwesomeWM in the background..."
$RUN_AS_WHIST "awesome" &
awesome_pid=$!
echo "AwesomeWM started as PID: $awesome_pid"

# Start the XSettings daemon to make DPI changes responsive and get the PID of the backgrounded process
echo "Starting 'xsettingsd' in the background..."
$RUN_AS_WHIST "xsettingsd" &
xsettingsd_pid=$!
echo "xsettingsd started as PID: $xsettingsd_pid"

# Let everyone know that xinit is initialized
echo "Writing xinitrc PID to /usr/share/whist/xinit-pid to complete whist-display.service initialization..."
echo "$xinitrc_pid" > /usr/share/whist/xinit-pid
echo "Successfully wrote to /usr/share/whist/xinit-pid"

# Wait for AwesomeWM process
# Note: this never finishes, but leaves the X server open indefinitely
echo "Waiting for AwesomeWM to exit, to keep the X server open indefinitely..."
wait $awesome_pid
