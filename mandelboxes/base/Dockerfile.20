############### STAGE 0: build-assets ###############
# EXPOSES the appropriate build-assets package to
# handle copying files from outside the repo
#####################################################

# This argument controls whether to copy the protocol
# in this image or in a child image. In dev mode, we
# want to copy the protocol as late as possible to
# make it easier to iterate, but in prod mode we want
# to copy the protocol as early as possible to share
# layers between images.
ARG BuildAssetPackage "protocol"
FROM whist/build-assets:$BuildAssetPackage as build-assets

################ STAGE 1: libinput-build ################
# - Install build dependencies as per the documentation
#   at https://wayland.freedesktop.org/libinput/doc/latest/building.html#build-dependencies-per-distribution
# - Download libinput 1.19
# - Configure and build libinput
# EXPOSES .deb build of libinput for later stages
#########################################################
FROM ubuntu:20.04 as libinput-build

# Force failure on non-zero exit code for commands with a pipe in them
SHELL ["/bin/bash", "-Eeuo", "pipefail", "-c"]

ENV container docker
ENV LC_ALL C
ENV DEBIAN_FRONTEND noninteractive

# Update apt source list
RUN sed -i 's/# deb/deb/g' /etc/apt/sources.list \
    && apt-get update \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# Install build dependencies for libinput
RUN apt-get update && apt-get install --no-install-recommends -y \
    git \
    gcc \
    g++ \
    pkg-config \
    meson \
    check \
    libudev-dev \
    libevdev-dev \
    doxygen \
    graphviz \
    python3-sphinx \
    python3-recommonmark \
    python3-sphinx-rtd-theme \
    python3-pytest-xdist \
    libwacom-dev \
    libcairo2-dev \
    libgtk-3-dev \
    libglib2.0-dev \
    libmtdev-dev \
    wget \
    xz-utils \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# Download libinput source
RUN wget -qO - https://freedesktop.org/software/libinput/libinput-1.19.2.tar.xz | tar xJ

# Configure and build libinput
RUN meson libinput-1.19.2 build \
    --prefix=/usr \
    --libdir=/usr/lib \
    -D udev-dir=/usr/lib/udev \
    -D tests=false \
    -D documentation=false \
    && ninja -C build

# Install libinput to package folder
RUN mkdir /libinput-whist \
    && DESTDIR=/libinput-whist ninja -C build install

# Setup debian package information
COPY input/libinput/debian/control /libinput-whist/DEBIAN/control

# Build debian package
RUN dpkg-deb --build libinput-whist

################ STAGE 2: xf86-input-libinput-build ################
# - Install build dependencies as per the documentation
#   at https://gitlab.freedesktop.org/xorg/driver/xf86-input-libinput
# - For libinput dependency, copy and install libinput from the
#   libinput-build stage
# - Download xf86-input-libinput source
# - Configure and build xf86-input-libinput
# EXPOSES build of xf86-input-libinput
####################################################################
FROM ubuntu:20.04 as xf86-input-libinput-build

# Force failure on non-zero exit code for commands with a pipe in them
SHELL ["/bin/bash", "-Eeuo", "pipefail", "-c"]

ENV container docker
ENV LC_ALL C
ENV DEBIAN_FRONTEND noninteractive

# Update apt source list
RUN sed -i 's/# deb/deb/g' /etc/apt/sources.list \
    && apt-get update \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# Copy libinput package
COPY --from=libinput-build libinput-whist.deb /

# Install build dependencies
# This includes our build of libinput
RUN apt-get update && apt-get install --no-install-recommends -y \
    xorg-dev \
    xutils-dev \
    libudev-dev \
    wget \
    ca-certificates \
    make \
    automake \
    autoconf \
    libtool \
    bzip2 \
    ./libinput-whist.deb \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# Download xorgproto source (xf86-input-libinput dependency)
RUN wget -qO - https://www.x.org/archive/individual/proto/xorgproto-2021.5.tar.bz2 | tar xj

# Configure and build xorgproto
RUN cd xorgproto-2021.5 \
    && autoreconf -vif \
    && ./configure \
    && make -j \
    && make -j install

# Download xf86-input-libinput source
RUN wget -qO - https://xorg.freedesktop.org/releases/individual/driver/xf86-input-libinput-1.2.0.tar.bz2 | tar xj

# Configure and build xf86-input-libinput
RUN cd xf86-input-libinput-1.2.0 \
    && autoreconf -vif \
    && ./configure \
    --disable-static \
    --prefix=/usr \
    && make -j

# Install xf86-input-libinput to package folder
RUN mkdir /xf86-input-libinput-whist \
    && cd xf86-input-libinput-1.2.0 \
    && make DESTDIR=/xf86-input-libinput-whist install

# Setup debian package information
COPY input/xf86-input-libinput/debian/control /xf86-input-libinput-whist/DEBIAN/control

# Build debian package
RUN dpkg-deb --build xf86-input-libinput-whist

################ STAGE 3: nvidia-grid-driver ################
# - Copy and unpack the nvidia grid driver installer
# - Install its contents into an output directory
# EXPOSES the grid driver
#############################################################
FROM ubuntu:20.04 as nvidia-grid-driver

# Force failure on non-zero exit code for commands with a pipe in them
SHELL ["/bin/bash", "-Eeuo", "pipefail", "-c"]

ENV container docker
ENV LC_ALL C
ENV DEBIAN_FRONTEND noninteractive

# Update apt source list
RUN sed -i 's/# deb/deb/g' /etc/apt/sources.list \
    && apt-get update \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# Install installer dependencies
RUN apt-get update && apt-get install --no-install-recommends -y \
    kmod \
    libglvnd0 \
    libglvnd-dev \
    xorg-dev \
    xorg-server-source \
    pkg-config \
    libgtk-3-dev \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# Retrieve nvidia driver installer
COPY --from=build-assets --chmod=550 nvidia-driver/nvidia-driver-installer.run /nvidia-driver-installer.run

# Unpack the installer & create necessary symbolic link(s)
RUN sh nvidia-driver-installer.run -x \
    && ln -sf /dist/usr/lib/libGL.so.1 /usr/lib/libGL.so.1

# Install the driver to a folder
# Note: We don't install `--install-compat32-libs` because it's not needed/supported
# on our Dockerfiles, which run 64-bit kernels.
RUN mkdir /dist /ignore && \
    cd NVIDIA* && \
    ./nvidia-installer --silent \
    --x-prefix=/dist/usr \
    --x-module-path=/dist/usr/lib/xorg/modules \
    --opengl-prefix=/dist/usr \
    --utility-prefix=/dist/usr \
    --utility-libdir=lib \
    --documentation-prefix=/ignore \
    --no-nvidia-modprobe \
    --no-rpms \
    --no-backup \
    --no-kernel-module \
    --no-nouveau-check \
    --no-libglx-indirect \
    --no-distro-scripts \
    --no-drm \
    --no-check-for-alternate-installs \
    --no-install-libglvnd \
    --skip-depmod

# Copy configuration files needed for Vulkan to work
RUN mkdir /dist/etc && \
    cp -r /etc/{vulkan,nvidia,OpenCL} /dist/etc

################ STAGE 4: whist-teleport-drag-drop ################
# - Copy and build the FUSE service to handle teleport drag-drop
#   events
# EXPOSES the teleport fuse service
###################################################################
FROM ubuntu:20.04 as whist-teleport-drag-drop

# Force failure on non-zero exit code for commands with a pipe in them
SHELL ["/bin/bash", "-Eeuo", "pipefail", "-c"]

ENV container docker
ENV LC_ALL C
ENV DEBIAN_FRONTEND noninteractive

# Update apt source list
RUN sed -i 's/# deb/deb/g' /etc/apt/sources.list \
    && apt-get update \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# Install FUSE build dependencies
RUN apt-get update && apt-get install --allow-downgrades --no-install-recommends -y \
    gcc \
    fuse3 \
    libfuse3-dev \
    pkg-config \
    build-essential \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

RUN mkdir -p /whist-teleport-drag-drop/{src,build}

COPY teleport/drag-drop /whist-teleport-drag-drop/src

# hadolint ignore=SC2046
RUN cd /whist-teleport-drag-drop/src \
    && gcc -Wall -Werror -D _GNU_SOURCE unshare.c -o unshare.o -c \
    && gcc -Wall -Werror unshare.o drag-drop.c $(pkg-config fuse3 --cflags --libs) -o ../build/whist-teleport-drag-drop

################ STAGE 5: hydraulic-press #####################
# - Copy, set permissions for, and install all base mandelbox
#   scripts, services, and config files to the hydraulic-squash
#   directory so that they can be neatly organized here while
#   only taking up one Docker layer in whist-base
# EXPOSES the hydraulic-squash directory
###############################################################
FROM ubuntu:20.04 as hydraulic-press

# Force failure on non-zero exit code for commands with a pipe in them
SHELL ["/bin/bash", "-Eeuo", "pipefail", "-c"]

ENV container docker
ENV LC_ALL C
ENV DEBIAN_FRONTEND noninteractive
ENV HYDRAULIC_ROOT /hydraulic-squash

RUN mkdir -p $HYDRAULIC_ROOT/{etc/dbus-1,usr/share/whist/private,root,run/user,/home/whist}

#########################
# Permissions
#########################

# Mount cgroup from host (Is this needed?)
VOLUME [ "/sys/fs/cgroup" ]

RUN \
    # Create whist user with dynamic, random password and do NOT add to sudo group
    useradd --create-home whist \
    && password=$(tr -dc 'A-Za-z0-9!"#$%&\()*+,-./;<=>?@[\]^_`{|}~' </dev/urandom | head -c 32  ; echo) \
    && echo whist:"${password}" | chpasswd \
    # Workaround for sudo bug in Docker: https://github.com/sudo-project/sudo/issues/42
    && echo "Set disable_coredump false" >> $HYDRAULIC_ROOT/etc/sudo.conf \
    # Set appropriate user permissions and create /whist/ Directory and Subdirectories in /usr/share
    && chown -vR whist:whist $HYDRAULIC_ROOT/home/whist \
    && chown root:root $HYDRAULIC_ROOT/run/user \
    # Set /usr/share/whist to root-only
    && chgrp root -R $HYDRAULIC_ROOT/usr/share/whist \
    && chown root:root $HYDRAULIC_ROOT/usr/share/whist \
    && chmod 600 -R $HYDRAULIC_ROOT/usr/share/whist \
    # Set /root to root-only
    && chgrp root -R $HYDRAULIC_ROOT/root \
    && chown root:root $HYDRAULIC_ROOT/root \
    && chmod 600 -R $HYDRAULIC_ROOT/root

    # Set up script to run a program as user `whist` (make sure to do
    # this after setting /usr/share/whist to 600)
    COPY --chmod=550 utils/run-as-whist-user.sh $HYDRAULIC_ROOT/usr/share/whist/run-as-whist-user.sh

#########################
# Input
#########################

COPY input/Xmodmap $HYDRAULIC_ROOT/root/.Xmodmap

#########################
# Display
#########################

# Copy configuration for X11 display
COPY display/whist-display.conf $HYDRAULIC_ROOT/usr/share/X11/xorg.conf.d/01-whist-display.conf

# Set up Whist service that starts before X to fix the Nvidia GPU bus ID and device paths
COPY --chown=root:root --chmod=600 display/whist-update-xorg-conf.service $HYDRAULIC_ROOT/etc/systemd/system/
COPY --chmod=550 display/update-xorg-conf.sh $HYDRAULIC_ROOT/usr/share/whist/

# Set up Whist service to launch X11 display
COPY display/whist-display-config.env $HYDRAULIC_ROOT/usr/share/whist
COPY display/xinitrc $HYDRAULIC_ROOT/root/.xinitrc
COPY --chown=root:root --chmod=600 display/whist-display.service $HYDRAULIC_ROOT/etc/systemd/system
COPY --chmod=550 display/whist-display.sh $HYDRAULIC_ROOT/usr/share/whist/whist-display.sh

# Create a systemd "drop-in" directory to override configurations without editing
# the unit files directly. This will be used to include the session id on the service
# output path. Its necessary to do this manually since the host service doesn't add
# the session id as part of its volume path, so we have to change it inside the mandelbox.
# We do this for all services that launch after startup (display, audio, main).
RUN mkdir -p $HYDRAULIC_ROOT/etc/systemd/system/whist-display.service.d/

# I-Bus launcher script
COPY --chmod=555 display/run_ibus.sh $HYDRAULIC_ROOT/home/whist/run_ibus.sh

# Set up script to update display DPI on-the-fly
COPY --chmod=550 display/update-whist-dpi.sh $HYDRAULIC_ROOT/usr/share/whist/update-whist-dpi.sh

#########################
# Theme
#########################

# Set up fontconfig to us the fonts we configure
COPY --chown=whist display/theme/fonts.conf $HYDRAULIC_ROOT/home/whist/.config/fontconfig/fonts.conf

# Set up window manager running on X server, with GTK/QT theming
COPY display/theme/gtk-3-settings.ini $HYDRAULIC_ROOT/etc/gtk-3.0/settings.ini
COPY display/theme/gtkrc-2.0 /root/.gtkrc-2.0
COPY --chown=whist display/theme/gtkrc-2.0 $HYDRAULIC_ROOT/home/whist/.gtkrc-2.0
COPY display/theme/qt4-settings.conf $HYDRAULIC_ROOT/root/.config/Trolltech.conf
COPY --chown=whist display/theme/qt4-settings.conf $HYDRAULIC_ROOT/home/whist/.config/Trolltech.conf
COPY display/theme/awesome-rc.lua $HYDRAULIC_ROOT/home/whist/.config/awesome/rc.lua

#########################
# Audio
#########################

# Set up service to start pulseaudio
COPY --chmod=550 audio/run-pulseaudio.sh $HYDRAULIC_ROOT/usr/share/whist
COPY audio/pulse-client.conf $HYDRAULIC_ROOT/etc/pulse/client.conf
COPY audio/pulse-default.pa $HYDRAULIC_ROOT/etc/pulse/default.pa
COPY audio/pulse-daemon.conf $HYDRAULIC_ROOT/etc/pulse/daemon.conf
COPY --chown=root:root --chmod=600 audio/whist-audio.service $HYDRAULIC_ROOT/etc/systemd/system

RUN mkdir -p $HYDRAULIC_ROOT/etc/systemd/system/whist-audio.service.d/

#########################
# Startup
#########################

# Set up user config map for mandelbox startup
COPY startup/app-config-map.json $HYDRAULIC_ROOT/usr/share/whist/app-config-map.json

# Set up custom config scripts
COPY utils/browser-data/import_user_browser_data.py $HYDRAULIC_ROOT/usr/share/whist/import_user_browser_data.py

# Add inotify file watching blockers
COPY --chmod=555 utils/block-until-file-exists.sh $HYDRAULIC_ROOT/usr/local/bin/block-until-file-exists.sh
COPY --chmod=555 utils/block-while-file-exists.sh $HYDRAULIC_ROOT/usr/local/bin/block-while-file-exists.sh

# Copy startup systemd service
COPY --chmod=550 startup/whist-startup.sh $HYDRAULIC_ROOT/usr/share/whist
COPY --chown=root:root --chmod=600 startup/whist-startup.service $HYDRAULIC_ROOT/etc/systemd/system

# Dockerfile entrypoint (starts systemd)
COPY --chmod=550 startup/entrypoint.sh $HYDRAULIC_ROOT/usr/share/whist/entrypoint.sh

#########################
# Main
#########################

# Copy D-Bus configuration to allow `root` to access `whist` D-Bus
COPY main/dbus-session-local.conf $HYDRAULIC_ROOT/etc/dbus-1/session-local.conf

# Script to launch `whist-application` as the `whist` user
COPY --chmod=555 main/run-whist-application.sh $HYDRAULIC_ROOT/usr/bin/run-whist-application.sh

# Consolidate and copy teleport executable and launcher script
COPY --chmod=555 --from=whist-teleport-drag-drop /whist-teleport-drag-drop/build/whist-teleport-drag-drop $HYDRAULIC_ROOT/opt/teleport/drag-drop
COPY --chmod=555 teleport/drag-drop/run-whist-teleport-drag-drop.sh $HYDRAULIC_ROOT/usr/bin/run-whist-teleport-drag-drop.sh

# Install whist-teleport-uri-handler.desktop to capture URI protocols like zoommtg://*
# See whist-teleport-uri-handler.desktop for a list of currently-supported protocols.
COPY --chmod=555 teleport/uri-handler/whist-teleport-uri-handler.sh $HYDRAULIC_ROOT/opt/teleport/uri-handler

# Service which launches the server protocol and application
COPY --chmod=550 main/run-whist-server.sh $HYDRAULIC_ROOT/usr/share/whist/run-whist-server.sh
COPY --chown=root:root --chmod=600 main/whist-main.service $HYDRAULIC_ROOT/etc/systemd/system

RUN mkdir -p $HYDRAULIC_ROOT/etc/systemd/system/whist-main.service.d/

################ STAGE 6: whist-base ######################
# - Copy and install libinput from libinput-build
# - Copy and install xf86-input-libinput from
#   xf86-input-libinput-build
# - Copy grid driver installation from
#   nvidia-grid-driver
# - Copy and install teleport FUSE service from
#   whist-teleport-fuse
# - Copy all base mandelbox files and scripts from
#   hydraulic-press
# - Install and configure any necessary packages for
#   our base mandelbox image
# EXPOSES all of whist-base as the final image
#############################################################
FROM ubuntu:20.04 as whist-base

# Force failure on non-zero exit code for commands with a pipe in them
SHELL ["/bin/bash", "-Eeuo", "pipefail", "-c"]

ENV container docker
ENV LC_ALL C

# These two resolve pedantic warnings with dkpg and invoke-rc
ENV DEBIAN_FRONTEND noninteractive
ENV RUN_LEVEL=1

# Update apt source list
RUN sed -i 's/# deb/deb/g' /etc/apt/sources.list \
    && apt-get update \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

#########################
# Sentry
#########################

# Install wget, cURL & ca-certificates to fetch sentry-cli (cURL is needed by the script itself)
RUN apt-get update && apt-get install --allow-downgrades --no-install-recommends -y \
    wget \
    ca-certificates \
    libcurl4 \
    curl \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# We install the Sentry CLI and set the DSN so that we can report Bash errors to Sentry
RUN curl -SL "https://downloads.sentry-cdn.com/sentry-cli/1.74.3/sentry-cli-Linux-x86_64" \
    > /usr/local/bin/sentry-cli \
    && chmod 0755 /usr/local/bin/sentry-cli

ENV SENTRY_DSN https://6765c9aeb9c449a599ca6242829799b8@o400459.ingest.sentry.io/6073955

#########################
# Systemd
#########################

# Install systemd
# Locales is needed to solve `pam_env(sudo:session): Unable to open env file: /etc/default/locale: No such file or directory`
RUN apt-get update && apt-get install --no-install-recommends -y \
    systemd \
    systemd-sysv \
    locales \
    locales-all \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# hadolint ignore=SC2010
RUN ls -d /lib/systemd/system/sysinit.target.wants/* | grep -v systemd-tmpfiles-setup | xargs rm -f

# Remove some more systemd services to minimize what's running on our images
RUN rm -f /lib/systemd/system/multi-user.target.wants/* \
    /etc/systemd/system/*.wants/* \
    /lib/systemd/system/local-fs.target.wants/* \
    /lib/systemd/system/sockets.target.wants/*udev* \
    /lib/systemd/system/sockets.target.wants/*initctl* \
    /lib/systemd/system/basic.target.wants/* \
    /lib/systemd/system/anaconda.target.wants/* \
    /lib/systemd/system/plymouth* \
    /lib/systemd/system/systemd-update-utmp*

# Disable some extra systemd services
# Note: sshd does not exist by default, so we don't need to explicirlt disable it
# hadolint ignore=DL3059
RUN systemctl mask plymouth \
                   systemd-hostnamed \
                   acpid \
                   NetworkManager-wait-online

# Remove ProtectHostname=yes lines from logind and timedate systemd services
# hadolint ignore=DL3059
RUN sed -i "/^ProtectHostname=yes$/d" /usr/lib/systemd/system/systemd-{login,time{sync,date}}d.service

# Enable proper usage of resolvconf in containers. Based on:
# https://github.com/moby/moby/issues/1297
RUN echo "resolvconf resolvconf/linkify-resolvconf boolean false" | debconf-set-selections

ENV init /sbin/init

#########################
# Input
#########################

# Install libinput driver for XServer input
# This must happen very early to preempt conflicts with
# upstream packages such as libinput10 and libinput-bin

# Copy libinput and xf86-input-libinput
COPY --from=libinput-build /libinput-whist.deb /deb/libinput-whist.deb
COPY --from=xf86-input-libinput-build /xf86-input-libinput-whist.deb /deb/xf86-input-libinput-whist.deb

# Install libinput and xf86-input-libinput
RUN apt-get update && apt-get install --no-install-recommends -y \
    ./deb/libinput-whist.deb \
    ./deb/xf86-input-libinput-whist.deb \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/* /deb

# Install dependencies/utils
RUN apt-get update && apt-get install --no-install-recommends -y \
    keyboard-configuration \
    libxtst-dev \
    xinput \
    evtest \
    xdotool \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

#########################
# General Utilities
#########################

# Install dbus + event requirements
RUN apt-get update && apt-get install --allow-downgrades --no-install-recommends -y \
    dbus-x11 \
    libdbus-1-dev \
    libevent-dev \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install gnome keyring + chrome authentication utilities
RUN apt-get update && apt-get install -y --no-install-recommends \
    gir1.2-secret-1 \
    gnome-keyring \
    libsecret-1-0 \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install general utility packages
RUN apt-get update \
    # Avoid interactive installation for tzdata (defaults to UTC)
    && LOCAL="yes" \
    apt-get install --allow-downgrades --no-install-recommends -y \
    xvfb \
    wmctrl \
    gnupg2 \
    libfido2-1 \
    # for `killall` in display/update-whist-dpi.sh
    psmisc \
    # to silence "The name org.freedesktop.UPower was not provided by any .service file" in browsers
    upower \
    libgbm1 \
    lsb-release \
    ufw \
    libxcb-dri3-0 \
    git \
    sudo \
    jq \
    inotify-tools \
    # general utility tool needed by other packages (gets installed by
    # update-alternatives if not explicitly specified)
    liblzma5 \
    # utilities for debugging/testing
    less \
    vim \
    nano \
    tzdata \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

#########################
# Permissions
#########################

# Mount cgroup from host (Is this needed?)
VOLUME [ "/sys/fs/cgroup" ]

RUN \
    # Create whist user with dynamic, random password and do NOT add to sudo group
    useradd --create-home whist \
    && password=$(tr -dc 'A-Za-z0-9!"#$%&\()*+,-./;<=>?@[\]^_`{|}~' </dev/urandom | head -c 32  ; echo) \
    && echo whist:"${password}" | chpasswd \
    # Workaround for sudo bug in Docker: https://github.com/sudo-project/sudo/issues/42
    && echo "Set disable_coredump false" >> /etc/sudo.conf \
    # Set appropriate user permissions and create /whist/ Directory and Subdirectories in /usr/share
    && chown -vR whist:whist /home/whist \
    && chown root:root /run/user \
    && mkdir -p /usr/share/whist/private \
    # Set /usr/share/whist to root-only
    && chgrp root -R /usr/share/whist \
    && chown root:root /usr/share/whist \
    && chmod 600 -R /usr/share/whist

#########################
# Hardware Acceleration
#########################

# Install the Nvidia GRID Driver and libraries for (limited) hardware acceleration
RUN apt-get update && apt-get install --no-install-recommends -y \
    libglvnd0 \
    vainfo \
    vdpauinfo \
    mesa-vdpau-drivers \
    libvdpau-va-gl1 \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*
COPY --from=nvidia-grid-driver /dist /

#########################
# Display
#########################

# Install dependencies
RUN apt-get update && apt-get install --no-install-recommends -y \
    libxdamage-dev \
    xclip \
    x11-xserver-utils \
    xserver-xorg-video-dummy \
    awesome \
    xsettingsd \
    linux-generic-hwe-20.04 \
    libgstreamer-plugins-base1.0-0 \
    libgstreamer1.0-0 \
    screen-resolution-extra \
    xinit \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# Install playerctl for media keys support. We install playerctl straight from
# Github releases because as usual the Ubuntu package is horribly out of date
# (and in particular don't support daemon mode).
RUN wget -q https://github.com/altdesktop/playerctl/releases/download/v2.3.1/playerctl-2.3.1_amd64.deb \
    && dpkg -i ./playerctl-2.3.1_amd64.deb \
    && rm ./playerctl-2.3.1_amd64.deb

# I-Bus support (for handling input)
RUN apt-get update && apt-get install --no-install-recommends -y \
    ibus ibus-pinyin ibus-anthy ibus-hangul ibus-unikey \
    ibus-gtk ibus-gtk3 \
    at-spi2-core \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# Set display environment variable
ENV DISPLAY :10

#########################
# Theme
#########################

# Install dependencies
RUN apt-get update && apt-get install --no-install-recommends -y \
    unzip \
    awesome \
    awesome-extra \
    lxappearance \
    gtk-chtheme \
    gtk2-engines-murrine \
    gtk2-engines-pixbuf \
    libglib2.0-dev-bin \
    libglib2.0-dev \
    libxml2-utils \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*
# Note: qt4-qtconfig has not been ported to Ubuntu 20, so we can't install it.

# Install fonts
RUN wget -qO font-sans.zip https://fonts.google.com/download?family=Inter \
    && wget -qO font-serif.zip https://fonts.google.com/download?family=Merriweather \
    && wget -qO font-mono.zip https://github.com/be5invis/Iosevka/releases/download/v10.1.1/super-ttc-iosevka-10.1.1.zip \
    && unzip -nd /usr/local/share/fonts font-sans.zip \
    && unzip -nd /usr/local/share/fonts font-serif.zip \
    && unzip -nd /usr/local/share/fonts font-mono.zip \
    && rm font-*.zip

# Install fonts for full Unicode support (or as close as we can get)
RUN apt-get update && apt-get install --no-install-recommends -y \
    fonts-noto \
    fonts-noto-core \
    fonts-noto-cjk \
    fonts-noto-cjk-extra \
    fonts-noto-extra \
    fonts-noto-mono \
    fonts-noto-ui-core \
    fonts-noto-ui-extra \
    fonts-noto-unhinted \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# Install the fonts used in Whist, including the Apple Color Emoji
COPY --from=build-assets fonts/* /usr/local/share/fonts/

# Install WhiteSur GTK theme, for macOS-like theming
RUN mkdir -p /home/whist/.themes \
    && wget -q https://github.com/vinceliuice/WhiteSur-gtk-theme/archive/refs/tags/2022-02-21.tar.gz \
    && tar -xzf 2022-02-21.tar.gz \
    && cd WhiteSur-gtk-theme-2022-02-21/release \
    && tar -xzf WhiteSur-light-40-0.tar.xz -C /home/whist/.themes \
    && cd ../.. && rm -rf WhiteSur-gtk-theme-2022-02-21 2022-02-21.tar.gz

# Install WhiteSur cursor and icons, for macOS-like theming
RUN git clone https://github.com/vinceliuice/WhiteSur-icon-theme.git && cd WhiteSur-icon-theme && /bin/bash install.sh --bold && rm -rf /WhiteSur-icon-theme
RUN git clone https://github.com/vinceliuice/WhiteSur-cursors.git && cd WhiteSur-cursors && /bin/bash install.sh && rm -rf /WhiteSur-cursors

#########################
# Audio
#########################

# Install PulseAudio and its dependencies
RUN apt-get update && apt-get install --no-install-recommends -y \
    # PulseAudio dependencies
    libunwind8 \
    liborc-0.4-0 \
    libpulse0 \
    libsnapd-glib1 \
    libsndfile1 \
    libsoxr0 \
    libasound2-data \
    libasound2 \
    libasound2-dev \
    libspeexdsp1 \
    libwebrtc-audio-processing1 \
    libasound2-plugins \
    pulseaudio-utils \
    libltdl7 \
    libtdb1 \
    # PulseAudio
    pulseaudio \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

#########################
# Startup
#########################

# Install Dependencies for Cookie Import
COPY utils/browser-data/requirements.txt /requirements.txt
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3-pip \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && pip install --no-cache-dir -r /requirements.txt \
    && rm /requirements.txt \
    && rm -rf /tmp/* /var/tmp/*

# Set up the entrypoint for the mandelbox (which starts systemd)
CMD ["/usr/share/whist/entrypoint.sh"]

#########################
# Main
#########################

RUN apt-get update && apt-get install --allow-downgrades --no-install-recommends -y \
    # Set up the default (harmless/useless) Whist application (xeyes) and dependencies
    libc6 \
    libfontconfig1 \
    libfreetype6 \
    libice6 \
    libtinfo6 \
    libutempter0 \
    libx11-6 \
    libxaw7 \
    libxext6 \
    libxft2 \
    libxinerama1 \
    libxmu6 \
    libxpm4 \
    libxt6 \
    xbitmaps \
    x11-utils \
    x11-apps \
    # FUSE dependency for drag-drop
    fuse3 \
    # XDG dependency for URI handler
    xdg-utils \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# Symlink relevant applications
# Set default whist-application to xeyes
RUN ln -sf "$(which xeyes)" /usr/bin/whist-application \
    # Overwrite xdg-open with our URI handler
    && ln -sf /opt/teleport/uri-handler /usr/bin/xdg-open

# Install protocol dependencies
COPY --from=build-assets setup-linux-build-environment.sh /usr/share/whist/setup-linux-build-environment.sh
RUN /usr/share/whist/setup-linux-build-environment.sh \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/* \
    && rm /usr/share/whist/setup-linux-build-environment.sh

#########################
# Hydaulic Press Layer
#########################

# Copy over the big squashed layer from hydraulic-press stage direclty
# into our filesystem
COPY --from=hydraulic-press /hydraulic-squash /

# Enable the systemd services we just copied over
RUN systemctl enable whist-{startup,update-xorg-conf,display,audio,main}

#########################
# Cleanup
#########################

# Install Whist Protocol binaries and helper files
# We do this last to make it easier to modify the
# protocol and rebuild the base Dockerfile without
# needing to redo many steps
COPY --from=build-assets protocol/* /usr/share/whist/
