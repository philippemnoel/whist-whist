############### STAGE 0: build-assets ###############
# EXPOSES the appropriate build-assets package to
# handle copying files from outside the repo
#####################################################

# This argument controls whether to copy the protocol
# in this image or in a child image. In dev mode, we
# want to copy the protocol as late as possible to
# make it easier to iterate, but in prod mode we want
# to copy the protocol as early as possible to share
# layers between images.
ARG BuildAssetPackage "protocol"
FROM fractal/build-assets:$BuildAssetPackage as build-assets

################ STAGE 1: libinput-build ################
# - Install build dependencies as per the documentation
#   at https://wayland.freedesktop.org/libinput/doc/latest/building.html#build-dependencies-per-distribution
# - Download libinput source and hi-res scrolling patch
#   as per https://aur.archlinux.org/packages/libinput-hires-scroll
# - Configure and build patched libinput
# EXPOSES patched .deb build of libinput for later stages
#########################################################
FROM ubuntu:20.04 as libinput-build

# Force failure on non-zero exit code for commands with a pipe in them
SHELL ["/bin/bash", "-Eeuo", "pipefail", "-c"]

ENV container docker
ENV LC_ALL C
ENV DEBIAN_FRONTEND noninteractive

RUN sed -i 's/# deb/deb/g' /etc/apt/sources.list

RUN apt-get update \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# Install build dependencies for libinput
RUN apt-get update && apt-get install --no-install-recommends -y \
    git \
    gcc \
    g++ \
    pkg-config \
    meson \
    check \
    libudev-dev \
    libevdev-dev \
    doxygen \
    graphviz \
    python3-sphinx \
    python3-recommonmark \
    python3-sphinx-rtd-theme \
    python3-pytest-xdist \
    libwacom-dev \
    libcairo2-dev \
    libgtk-3-dev \
    libglib2.0-dev \
    libmtdev-dev \
    wget \
    xz-utils \
    patch \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# Retrieve patches for libinput source
COPY input/libinput/patch/hi-res-scroll.patch hi-res-scroll.patch

# Download and patch libinput source
RUN wget -qO - https://freedesktop.org/software/libinput/libinput-1.15.5.tar.xz \
    | tar xJ \
    && cd libinput-1.15.5 \
    && patch -i /hi-res-scroll.patch -Np1 \
    && rm /hi-res-scroll.patch

# Configure and build libinput
RUN meson libinput-1.15.5 build \
    --prefix=/usr \
    --libdir=/usr/lib \
    -D udev-dir=/usr/lib/udev \
    -D tests=false \
    -D documentation=false \
    && ninja -C build

# Install libinput to package folder
RUN mkdir /libinput-fractal \
    && DESTDIR=/libinput-fractal ninja -C build install

# Setup debian package information
COPY input/libinput/debian/control /libinput-fractal/DEBIAN/control

# Build debian package
RUN dpkg-deb --build libinput-fractal

################ STAGE 2: xf86-input-libinput-build ################
# - Install build dependencies as per the documentation
#   at https://gitlab.freedesktop.org/xorg/driver/xf86-input-libinput
# - For libinput dependency, copy and install libinput from the
#   libinput-build stage
# - Download xf86-input-libinput source and hi-res scrolling
#   patch as per https://aur.archlinux.org/packages/xf86-input-libinput-hires-scroll
# - Configure and build patched xf86-input-libinput
# EXPOSES patched build of xf86-input-libinput
####################################################################
FROM ubuntu:20.04 as xf86-input-libinput-build

# Force failure on non-zero exit code for commands with a pipe in them
SHELL ["/bin/bash", "-Eeuo", "pipefail", "-c"]

ENV container docker
ENV LC_ALL C
ENV DEBIAN_FRONTEND noninteractive

RUN sed -i 's/# deb/deb/g' /etc/apt/sources.list

RUN apt-get update \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# Copy patched libinput package
COPY --from=libinput-build libinput-fractal.deb /

# Install build dependencies
# This includes patched libinput
RUN apt-get update && apt-get install --no-install-recommends -y \
    xorg-dev \
    xutils-dev \
    libudev-dev \
    wget \
    patch \
    ca-certificates \
    make \
    automake \
    autoconf \
    libtool \
    bzip2 \
    ./libinput-fractal.deb \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# Retrieve patches for xf86-input-libiput source
COPY input/xf86-input-libinput/patch/hi-res-scroll.patch hi-res-scroll.patch

# Download and patch xf86-input-libinput source
RUN wget -qO - https://xorg.freedesktop.org/releases/individual/driver/xf86-input-libinput-0.29.0.tar.bz2 \
    | tar xj \
    && cd xf86-input-libinput-0.29.0 \
    && patch -i /hi-res-scroll.patch -Np1 \
    && rm /hi-res-scroll.patch

# Configure and build patched xf86-input-libinput
RUN cd xf86-input-libinput-0.29.0 \
    && autoreconf -vif \
    && ./configure \
    --disable-static \
    --prefix=/usr \
    && make -j

# Install xf86-input-libinput to package folder
RUN mkdir /xf86-input-libinput-fractal \
    && cd xf86-input-libinput-0.29.0 \
    && make DESTDIR=/xf86-input-libinput-fractal install

# Setup debian package information
COPY input/xf86-input-libinput/debian/control /xf86-input-libinput-fractal/DEBIAN/control

# Build debian package
RUN dpkg-deb --build xf86-input-libinput-fractal

################ STAGE 3: nvidia-grid-driver ################
# - Copy and unpack the nvidia grid driver installer
# - Install its contents into an output directory
# EXPOSES the grid driver
#############################################################
FROM ubuntu:20.04 as nvidia-grid-driver

# Force failure on non-zero exit code for commands with a pipe in them
SHELL ["/bin/bash", "-Eeuo", "pipefail", "-c"]

ENV container docker
ENV LC_ALL C
ENV DEBIAN_FRONTEND noninteractive


RUN sed -i 's/# deb/deb/g' /etc/apt/sources.list

RUN apt-get update \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# Install installer dependencies
RUN apt-get update && apt-get install --no-install-recommends -y \
    kmod \
    libglvnd0 \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# Retrieve nvidia driver installer
COPY --from=build-assets nvidia-driver/nvidia-driver-installer.run nvidia-driver-installer.run

# Unpack the installer
RUN chmod +x nvidia-driver-installer.run && \
    sh nvidia-driver-installer.run -x

# Install the driver to a folder
RUN mkdir /dist /ignore && \
    cd NVIDIA* && \
    ./nvidia-installer --silent \
    --x-prefix=/dist/usr \
    --opengl-prefix=/dist/usr \
    --compat32-prefix=/dist/usr \
    --install-compat32-libs \
    --utility-prefix=/dist/usr \
    --documentation-prefix=/ignore \
    --no-nvidia-modprobe \
    --no-rpms \
    --no-backup \
    --no-kernel-module \
    --no-nouveau-check \
    --no-libglx-indirect \
    --no-distro-scripts \
    --no-drm \
    --no-check-for-alternate-installs \
    --no-install-libglvnd \
    --skip-depmod

# Copy configuration files needed for Vulkan to work
RUN mkdir /dist/etc && \
    cp -r /etc/{vulkan,nvidia,OpenCL} /dist/etc

################ STAGE 4: fractal-teleport-fuse  ################
# - Copy and build the FUSE service to handle teleport drag-drop
#   events
# EXPOSES the teleport fuse service
#################################################################
FROM ubuntu:20.04 as fractal-teleport-fuse

# Force failure on non-zero exit code for commands with a pipe in them
SHELL ["/bin/bash", "-Eeuo", "pipefail", "-c"]

ENV container docker
ENV LC_ALL C
ENV DEBIAN_FRONTEND noninteractive

RUN sed -i 's/# deb/deb/g' /etc/apt/sources.list

RUN apt-get update \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# Install FUSE build dependencies
RUN apt-get update && apt-get install --allow-downgrades --no-install-recommends -y \
    gcc \
    fuse3 \
    libfuse3-dev \
    pkg-config \
    build-essential \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

RUN mkdir -p /fractal-teleport-fuse/{src,build}

COPY teleport/teleport-fuse /fractal-teleport-fuse/src

# hadolint ignore=SC2046
RUN cd /fractal-teleport-fuse/src \
    && gcc -Wall -D _GNU_SOURCE unshare.c -o unshare.o -c \
    && gcc -Wall unshare.o teleport-fuse.c $(pkg-config fuse3 --cflags --libs) -o ../build/fractal-teleport-fuse

################ STAGE 5: fractal-base ######################
# - Copy and install libinput from libinput-build
# - Copy and install xf86-input-libinput from
#   xf86-input-libinput-build
# - Copy grid driver installation from
#   nvidia-grid-driver
# - Copy and install teleport FUSE service from
#   fractal-teleport-fuse
# - Install and configure all necessary components for
#   our base mandelbox image
# EXPOSES all of fractal-base as the final image
#############################################################
FROM ubuntu:20.04 as fractal-base

# Force failure on non-zero exit code for commands with a pipe in them
SHELL ["/bin/bash", "-Eeuo", "pipefail", "-c"]

ENV container docker
ENV LC_ALL C
ENV DEBIAN_FRONTEND noninteractive

RUN sed -i 's/# deb/deb/g' /etc/apt/sources.list

RUN apt-get update \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*


#########################
# Systemd
#########################

# Install systemd
RUN apt-get update && apt-get install --no-install-recommends -y \
    systemd \
    systemd-sysv \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# Remove all sysinit.target systemd services except tmpfile cleaners (and
# switch back workdir)
WORKDIR /lib/systemd/system/sysinit.target.wants/
# hadolint ignore=SC2010
RUN ls | grep -v systemd-tmpfiles-setup | xargs rm -f
WORKDIR /

# Remove some more systemd services to minimize what's running on our images
RUN rm -f /lib/systemd/system/multi-user.target.wants/* \
    /etc/systemd/system/*.wants/* \
    /lib/systemd/system/local-fs.target.wants/* \
    /lib/systemd/system/sockets.target.wants/*udev* \
    /lib/systemd/system/sockets.target.wants/*initctl* \
    /lib/systemd/system/basic.target.wants/* \
    /lib/systemd/system/anaconda.target.wants/* \
    /lib/systemd/system/plymouth* \
    /lib/systemd/system/systemd-update-utmp*

# Disable some extra systemd services
RUN systemctl mask plymouth
RUN systemctl mask systemd-hostnamed
RUN systemctl mask acpid
RUN systemctl mask NetworkManager-wait-online
RUN systemctl disable sshd

# Remove ProtectHostname=yes lines from logind and timedate systemd services
RUN sed -i "/^ProtectHostname=yes$/d" /usr/lib/systemd/system/systemd-logind.service
RUN sed -i "/^ProtectHostname=yes$/d" /usr/lib/systemd/system/systemd-timesyncd.service
RUN sed -i "/^ProtectHostname=yes$/d" /usr/lib/systemd/system/systemd-timedated.service

ENV init /sbin/init

#########################
# Input
#########################

# Install libinput driver for XServer input
# This must happen very early to preempt conflicts with
# upstream packages such as libinput10 and libinput-bin

# Copy patched libinput and xf86-input-libinput
COPY --from=libinput-build /libinput-fractal.deb /deb/libinput-fractal.deb
COPY --from=xf86-input-libinput-build /xf86-input-libinput-fractal.deb deb/xf86-input-libinput-fractal.deb

# Install patched libinput and xf86-input-libinput
RUN apt-get update && apt-get install --no-install-recommends -y \
    ./deb/libinput-fractal.deb \
    ./deb/xf86-input-libinput-fractal.deb \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/* /deb

# Install dependencies/utils
RUN apt-get update && apt-get install --no-install-recommends -y \
    keyboard-configuration \
    libxtst-dev \
    xinput \
    evtest \
    xdotool \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*


COPY input/Xmodmap /root/.Xmodmap

#########################
# General Utilities
#########################

# Install general utility packages
RUN apt-get update && apt-get install --allow-downgrades --no-install-recommends -y \
    xvfb \
    wmctrl \
    ca-certificates \
    wget \
    gnupg2 \
    libfido2-1 \
    # for `killall` in display/update-fractal-dpi.sh
    psmisc \
    libgbm1 \
    lsb-release \
    ufw \
    libxcb-dri3-0 \
    libcurl4 \
    git \
    sudo \
    curl \
    jq \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# Install time while avoiding interactive installation for tzdata - uses UTC
ENV LOCAL="yes"
RUN apt-get update && apt-get install --no-install-recommends -y \
    tzdata \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# Install utilities for debugging/testing
RUN apt-get update && apt-get install --no-install-recommends -y \
    less \
    vim \
    nano \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

#########################
# Permissions
#########################

# Create fractal user with dynamic, random password and do NOT add to sudo group
RUN useradd --create-home fractal \
    && password=$(tr -dc 'A-Za-z0-9!"#$%&\()*+,-./;<=>?@[\]^_`{|}~' </dev/urandom | head -c 32  ; echo) \
    && echo fractal:"${password}" | chpasswd

# Workaround for sudo bug in Docker: https://github.com/sudo-project/sudo/issues/42
RUN echo "Set disable_coredump false" >> /etc/sudo.conf

# Mount cgroup from host (Is this needed?)
VOLUME [ "/sys/fs/cgroup" ]

# Set appropriate user permissions
RUN chown -vR fractal:fractal /home/fractal
RUN chown root:root /run/user

# Create fractal Directory and Subdirectories in /usr/share
RUN mkdir -p /usr/share/fractal/private

# Set /usr/share/fractal to root-only
RUN chgrp root -R /usr/share/fractal
RUN chown root:root /usr/share/fractal
RUN chmod 600 -R /usr/share/fractal

# Set up script to run a program as user `fractal` (make sure to do
# this after setting /usr/share/fractal to 600)
COPY utils/run-as-fractal-user.sh /usr/share/fractal/run-as-fractal-user.sh
RUN chmod +x /usr/share/fractal/run-as-fractal-user.sh


#########################
# Hardware Acceleration
#########################

# Install the Nvidia GRID Driver
RUN apt-get update && apt-get install --no-install-recommends -y \
    libglvnd0 \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*
COPY --from=nvidia-grid-driver /dist /

# Install libraries for (limited) hardware acceleration
RUN apt-get update && apt-get install --no-install-recommends -y \
    vainfo \
    vdpauinfo \
    mesa-vdpau-drivers \
    libvdpau-va-gl1 \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

#########################
# Display
#########################

# Install dependencies
RUN apt-get update && apt-get install --no-install-recommends -y \
    libxdamage-dev \
    xclip \
    x11-xserver-utils \
    xserver-xorg-video-dummy \
    awesome \
    xsettingsd \
    xserver-xorg-core-hwe-18.04 \
    libgstreamer-plugins-base1.0-0 \
    libgstreamer1.0-0 \
    screen-resolution-extra \
    xinit \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# Copy configuration for X11 display
COPY display/fractal-display.conf /usr/share/X11/xorg.conf.d/01-fractal-display.conf

# Set up Whist service that starts before X to fix the Nvidia GPU bus ID and device paths
COPY display/fractal-update-xorg-conf.service /etc/systemd/system/
COPY display/update-xorg-conf.sh /usr/share/fractal/
RUN chmod +x /usr/share/fractal/update-xorg-conf.sh
RUN systemctl enable fractal-update-xorg-conf

# Install playerctl for media keys support. We install playerctl straight from
# Github releases because as usual the Ubuntu package is horribly out of date
# (and in particular don't support daemon mode).
RUN wget -q https://github.com/altdesktop/playerctl/releases/download/v2.3.1/playerctl-2.3.1_amd64.deb \
    && dpkg -i ./playerctl-2.3.1_amd64.deb \
    && rm ./playerctl-2.3.1_amd64.deb

# Set up Whist service to launch X11 display
COPY display/fractal-display-config.env /usr/share/fractal
COPY display/xinitrc /root/.xinitrc
COPY display/fractal-display.service /etc/systemd/system
COPY display/fractal-display.sh /usr/share/fractal/fractal-display.sh
RUN chmod +x /usr/share/fractal/fractal-display.sh
RUN systemctl enable fractal-display

# Set up script to update display DPI on-the-fly
COPY display/update-fractal-dpi.sh /usr/share/fractal/update-fractal-dpi.sh
RUN chmod +x /usr/share/fractal/update-fractal-dpi.sh

# Set display environment variable
ENV DISPLAY :10

#########################
# Theme
#########################

# Install dependencies
RUN apt-get update && apt-get install --no-install-recommends -y \
    awesome \
    awesome-extra \
    lxappearance \
    materia-gtk-theme \
    yaru-theme-gtk \
    gtk-chtheme \
    gtk2-engines-murrine \
    unzip \
    gtk2-engines-pixbuf \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*
# Note: qt4-qtconfig has not been ported to Ubuntu 20, so we can't install it.

# Install fonts
RUN wget -qO font-sans.zip https://fonts.google.com/download?family=Inter \
    && wget -qO font-serif.zip https://fonts.google.com/download?family=Merriweather \
    && wget -qO font-mono.zip https://github.com/be5invis/Iosevka/releases/download/v10.1.1/super-ttc-iosevka-10.1.1.zip \
    && unzip -nd /usr/local/share/fonts font-sans.zip \
    && unzip -nd /usr/local/share/fonts font-serif.zip \
    && unzip -nd /usr/local/share/fonts font-mono.zip \
    && rm font-*.zip

# Install fonts for full Unicode support (or as close as we can get)
RUN apt-get update && apt-get install --no-install-recommends -y \
    fonts-noto \
    fonts-noto-core \
    fonts-noto-cjk \
    fonts-noto-cjk-extra \
    fonts-noto-extra \
    fonts-noto-mono \
    fonts-noto-ui-core \
    fonts-noto-ui-extra \
    fonts-noto-unhinted \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# Use twemoji font
RUN wget -qO /usr/local/share/fonts/TwemojiMozilla.ttf https://github.com/mozilla/twemoji-colr/releases/download/v0.5.1/TwemojiMozilla.ttf

# Set up fontconfig to use our nice fots
COPY --chown=fractal display/theme/fonts.conf /home/fractal/.config/fontconfig/fonts.conf

# Set up window manager running on X server, with GTK/QT theming
RUN git clone https://github.com/vinceliuice/WhiteSur-cursors.git && cd WhiteSur-cursors && /bin/bash install.sh && rm -rf /WhiteSur-cursors
RUN git clone https://github.com/vinceliuice/WhiteSur-icon-theme.git && cd WhiteSur-icon-theme && /bin/bash install.sh && rm -rf /WhiteSur-icon-theme
COPY display/theme/gtk-3-settings.ini /etc/gtk-3.0/settings.ini
COPY display/theme/gtkrc-2.0 /root/.gtkrc-2.0
COPY --chown=fractal display/theme/gtkrc-2.0 /home/fractal/.gtkrc-2.0
COPY display/theme/qt4-settings.conf /root/.config/Trolltech.conf
COPY --chown=fractal display/theme/qt4-settings.conf /home/fractal/.config/Trolltech.conf
COPY display/theme/awesome-rc.lua /home/fractal/.config/awesome/rc.lua

#########################
# Audio
#########################

# Install dependencies
RUN apt-get update && apt-get install --no-install-recommends -y \
    libunwind8 \
    liborc-0.4-0 \
    libpulse0 \
    libsnapd-glib1 \
    libsndfile1 \
    libsoxr0 \
    libasound2-data \
    libasound2 \
    libasound2-dev \
    libspeexdsp1 \
    libwebrtc-audio-processing1 \
    libasound2-plugins \
    pulseaudio-utils \
    libltdl7 \
    libtdb1 \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# Install Pulse Audio
RUN apt-get update && apt-get install --no-install-recommends -y \
    pulseaudio \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# Give access to Pulse Audio virtual sound card
RUN adduser root pulse-access \
    && adduser fractal pulse-access

# Prevent Pulse Audio from running as user (breaking sound for non-root users)
RUN rm /etc/systemd/user/default.target.wants/pulseaudio.service
RUN systemctl mask pulseaudio
RUN chmod -x /usr/bin/start-pulseaudio-x11

# Set up service to start pulseaudio
COPY audio/pulse-client.conf /etc/pulse/client.conf
COPY audio/fractal-audio.service /etc/systemd/system
RUN systemctl enable fractal-audio

#########################
# Startup
#########################

# Set up user config map for mandelbox startup
COPY startup/app-config-map.json /usr/share/fractal/app-config-map.json

# Install Dependencies for Cookie Import
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3-pip \
    && pip install --no-cache-dir browser-cookie3 \
    && pip install --no-cache-dir keyring \
    && pip install --no-cache-dir pyaes \
    && pip install --no-cache-dir pbkdf2 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Set up custom config scripts
COPY utils/import_custom_cookies.py /usr/share/fractal/import_custom_cookies.py

# Set up first systemd service
COPY startup/fractal-startup.sh /usr/share/fractal
RUN chmod +x /usr/share/fractal/fractal-startup.sh
COPY startup/fractal-startup.service /etc/systemd/system
RUN systemctl enable fractal-startup

# Set up the entrypoint for the mandelbox (which starts systemd)
COPY startup/entrypoint.sh /usr/share/fractal/entrypoint.sh
RUN chmod +x /usr/share/fractal/entrypoint.sh
CMD ["/usr/share/fractal/entrypoint.sh"]

#########################
# Main
#########################

# Set up the default (harmless/useless) Whist application (eyes)

# Install xeyes and dependencies
RUN apt-get update && apt-get install --allow-downgrades --no-install-recommends -y \
    libc6 \
    libfontconfig1 \
    libfreetype6 \
    libice6 \
    libtinfo6 \
    libutempter0 \
    libx11-6 \
    libxaw7 \
    libxext6 \
    libxft2 \
    libxinerama1 \
    libxmu6 \
    libxpm4 \
    libxt6 \
    xbitmaps \
    x11-utils \
    x11-apps \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# Set up the default Whist application symlink
RUN ln -sf "$(which xeyes)" /usr/bin/fractal-application

# Set up script to launch `fractal-application` as the `fractal` user
COPY main/run-fractal-application.sh /usr/bin/run-fractal-application.sh
RUN chmod 0555 /usr/bin/run-fractal-application.sh

# Set up the teleport FUSE service

# Install FUSE dependencies
RUN apt-get update && apt-get install --allow-downgrades --no-install-recommends -y \
    fuse3 \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

COPY --from=fractal-teleport-fuse /fractal-teleport-fuse/build/fractal-teleport-fuse /usr/bin/fractal-teleport-fuse

# Set up script to launch teleport functionality
COPY teleport/run-fractal-teleport.sh /usr/bin/run-fractal-teleport.sh
RUN chmod +x /usr/bin/run-fractal-teleport.sh

# Set up the teleport URI handler

# Install XDG dependencies
RUN apt-get update && apt-get install --allow-downgrades --no-install-recommends -y \
    xdg-utils \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# Install fractal-teleport-uri-handler.desktop to capture URI protocols like zoommtg://*
# See fractal-teleport-uri-handler.desktop for a list of currently-supported protocols.
RUN mkdir -p /opt/teleport
COPY teleport/uri-handler/fractal-teleport-uri-handler.sh /opt/teleport/uri-handler
RUN chmod +x /opt/teleport/uri-handler
RUN ln -sf /opt/teleport/uri-handler /usr/bin/xdg-open

# Set up the Whist server protocol

# Install protocol dependencies
COPY --from=build-assets setup-linux-build-environment.sh /usr/share/fractal/setup-linux-build-environment.sh
RUN /usr/share/fractal/setup-linux-build-environment.sh \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*
RUN rm /usr/share/fractal/setup-linux-build-environment.sh

# Set up Whist Protocol symlink
RUN mkdir /usr/share/fractal/bin
RUN ln -sf /usr/share/fractal/bin/FractalServer /usr/share/fractal/FractalServer

# Set up the service which launches both the server protocol and the application

COPY main/run-fractal-server.sh /usr/share/fractal/run-fractal-server.sh
RUN chmod +x /usr/share/fractal/run-fractal-server.sh
COPY main/fractal-main.service /etc/systemd/system
RUN systemctl enable fractal-main

#########################
# Cleanup
#########################

# Set our fractal systemd files to be root-visible only
RUN chgrp root /etc/systemd/system/fractal* \
    && chown root:root /etc/systemd/system/fractal* \
    && chmod 600 /etc/systemd/system/fractal*


# Install Whist Protocol binaries and helper files
# We do this last and symlink `/usr/share/fractal/bin` earlier
# to make it easier to modify the protocol and rebuild the base
# Dockerfile without needing to redo many steps
COPY --from=build-assets protocol/* /usr/share/fractal/bin/
