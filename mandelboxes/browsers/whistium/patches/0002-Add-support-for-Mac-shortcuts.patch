<<<<<<< HEAD:mandelboxes/browsers/whistium/patches/0002-Add-support-for-Mac-shortcuts.patch
From 6c49722396240edaec1531b33c9234be7002a573 Mon Sep 17 00:00:00 2001
From: Karthick Jeyapal <karthick@whist.com>
Date: Tue, 8 Nov 2022 06:10:41 +0000
Subject: [PATCH 2/5] Add support for Mac shortcuts

---
 .../renderer/core/editing/editing_behavior.cc | 54 +++++++++++++------
 .../exported/web_plugin_container_impl.cc     |  2 +-
 ui/base/accelerators/accelerator.cc           |  4 +-
 ui/events/event.h                             |  4 +-
 ui/events/event_constants.h                   |  2 +-
 ui/views/controls/textfield/textfield.cc      |  6 +--
 6 files changed, 46 insertions(+), 26 deletions(-)

diff --git a/third_party/blink/renderer/core/editing/editing_behavior.cc b/third_party/blink/renderer/core/editing/editing_behavior.cc
index 6b7a35b5b83db..2537f0737c936 100644
--- a/third_party/blink/renderer/core/editing/editing_behavior.cc
+++ b/third_party/blink/renderer/core/editing/editing_behavior.cc
@@ -44,7 +44,7 @@ const unsigned kCtrlKey = WebInputEvent::kControlKey;
 const unsigned kAltKey = WebInputEvent::kAltKey;
 const unsigned kShiftKey = WebInputEvent::kShiftKey;
 const unsigned kMetaKey = WebInputEvent::kMetaKey;
-#if BUILDFLAG(IS_MAC)
+#if 1 //BUILDFLAG(IS_MAC)
 // Aliases for the generic key defintions to make kbd shortcuts definitions more
 // readable on OS X.
 const unsigned kOptionKey = kAltKey;
@@ -87,7 +87,7 @@ struct DomKeyKeyDownEntry {
 const KeyboardCodeKeyDownEntry kKeyboardCodeKeyDownEntries[] = {
     {VKEY_LEFT, 0, "MoveLeft"},
     {VKEY_LEFT, kShiftKey, "MoveLeftAndModifySelection"},
-#if BUILDFLAG(IS_MAC)
+#if 1 //BUILDFLAG(IS_MAC)
     {VKEY_LEFT, kOptionKey, "MoveWordLeft"},
     {VKEY_LEFT, kOptionKey | kShiftKey, "MoveWordLeftAndModifySelection"},
 #else
@@ -96,7 +96,7 @@ const KeyboardCodeKeyDownEntry kKeyboardCodeKeyDownEntries[] = {
 #endif
     {VKEY_RIGHT, 0, "MoveRight"},
     {VKEY_RIGHT, kShiftKey, "MoveRightAndModifySelection"},
-#if BUILDFLAG(IS_MAC)
+#if 1 //BUILDFLAG(IS_MAC)
     {VKEY_RIGHT, kOptionKey, "MoveWordRight"},
     {VKEY_RIGHT, kOptionKey | kShiftKey, "MoveWordRightAndModifySelection"},
 #else
@@ -109,7 +109,7 @@ const KeyboardCodeKeyDownEntry kKeyboardCodeKeyDownEntries[] = {
     {VKEY_DOWN, 0, "MoveDown"},
     {VKEY_DOWN, kShiftKey, "MoveDownAndModifySelection"},
     {VKEY_NEXT, kShiftKey, "MovePageDownAndModifySelection"},
-#if !BUILDFLAG(IS_MAC)
+#if 0 //!BUILDFLAG(IS_MAC)
     {VKEY_UP, kCtrlKey, "MoveParagraphBackward"},
     {VKEY_UP, kCtrlKey | kShiftKey, "MoveParagraphBackwardAndModifySelection"},
     {VKEY_DOWN, kCtrlKey, "MoveParagraphForward"},
@@ -119,32 +119,32 @@ const KeyboardCodeKeyDownEntry kKeyboardCodeKeyDownEntries[] = {
 #endif
     {VKEY_HOME, 0, "MoveToBeginningOfLine"},
     {VKEY_HOME, kShiftKey, "MoveToBeginningOfLineAndModifySelection"},
-#if BUILDFLAG(IS_MAC)
+#if 1 //BUILDFLAG(IS_MAC)
     {VKEY_PRIOR, kOptionKey, "MovePageUp"},
     {VKEY_NEXT, kOptionKey, "MovePageDown"},
 #endif
-#if !BUILDFLAG(IS_MAC)
+#if 0 //!BUILDFLAG(IS_MAC)
     {VKEY_HOME, kCtrlKey, "MoveToBeginningOfDocument"},
     {VKEY_HOME, kCtrlKey | kShiftKey,
      "MoveToBeginningOfDocumentAndModifySelection"},
 #endif
     {VKEY_END, 0, "MoveToEndOfLine"},
     {VKEY_END, kShiftKey, "MoveToEndOfLineAndModifySelection"},
-#if !BUILDFLAG(IS_MAC)
+#if 0 //!BUILDFLAG(IS_MAC)
     {VKEY_END, kCtrlKey, "MoveToEndOfDocument"},
     {VKEY_END, kCtrlKey | kShiftKey, "MoveToEndOfDocumentAndModifySelection"},
 #endif
     {VKEY_BACK, 0, "DeleteBackward"},
     {VKEY_BACK, kShiftKey, "DeleteBackward"},
     {VKEY_DELETE, 0, "DeleteForward"},
-#if BUILDFLAG(IS_MAC)
+#if 1 //BUILDFLAG(IS_MAC)
     {VKEY_BACK, kOptionKey, "DeleteWordBackward"},
     {VKEY_DELETE, kOptionKey, "DeleteWordForward"},
 #else
     {VKEY_BACK, kCtrlKey, "DeleteWordBackward"},
     {VKEY_DELETE, kCtrlKey, "DeleteWordForward"},
 #endif
-#if BUILDFLAG(IS_MAC)
+#if 1 //BUILDFLAG(IS_MAC)
     {'B', kCommandKey, "ToggleBold"},
     {'I', kCommandKey, "ToggleItalic"},
 #else
@@ -167,20 +167,40 @@ const KeyboardCodeKeyDownEntry kKeyboardCodeKeyDownEntries[] = {
 #if !BUILDFLAG(IS_MAC)
     // On OS X, we pipe these back to the browser, so that it can do menu item
     // blinking.
-    {'C', kCtrlKey, "Copy"},
-    {'V', kCtrlKey, "Paste"},
-    {'V', kCtrlKey | kShiftKey, "PasteAndMatchStyle"},
-    {'X', kCtrlKey, "Cut"},
-    {'A', kCtrlKey, "SelectAll"},
-    {'Z', kCtrlKey, "Undo"},
-    {'Z', kCtrlKey | kShiftKey, "Redo"},
-    {'Y', kCtrlKey, "Redo"},
+    {'C', kMetaKey, "Copy"},
+    {'V', kMetaKey, "Paste"},
+    {'V', kMetaKey | kShiftKey, "PasteAndMatchStyle"},
+    {'X', kMetaKey, "Cut"},
+    {'A', kMetaKey, "SelectAll"},
+    {'Z', kMetaKey, "Undo"},
+    {'Z', kMetaKey | kShiftKey, "Redo"},
+    {'Y', kMetaKey, "Redo"},
 #endif
 #if BUILDFLAG(IS_WIN)
     {VKEY_BACK, kAltKey, "Undo"},
     {VKEY_BACK, kAltKey | kShiftKey, "Redo"},
 #endif
     {VKEY_INSERT, 0, "OverWrite"},
+    // The following shortcuts are applicable for only for Mac client. In actual mac
+    // platform, these shortcuts will be handled automatically by Apple's AppKit
+    {VKEY_LEFT, kMetaKey, "MoveToBeginningOfLine"},
+    {VKEY_LEFT, kMetaKey | kShiftKey, "MoveToBeginningOfLineAndModifySelection"},
+    {VKEY_RIGHT, kMetaKey, "MoveToEndOfLine"},
+    {VKEY_RIGHT, kMetaKey | kShiftKey, "MoveToEndOfDocumentAndModifySelection"},
+    {VKEY_UP, kOptionKey, "MoveParagraphBackward"},
+    {VKEY_UP, kOptionKey | kShiftKey, "MoveParagraphBackwardAndModifySelection"},
+    {VKEY_DOWN, kOptionKey, "MoveParagraphForward"},
+    {VKEY_DOWN, kOptionKey | kShiftKey, "MoveParagraphForwardAndModifySelection"},
+    {VKEY_UP, kMetaKey, "MoveToBeginningOfDocument"},
+    {VKEY_UP, kMetaKey | kShiftKey, "MoveToBeginningOfDocumentAndModifySelection"},
+    {VKEY_DOWN, kMetaKey, "MoveToEndOfDocument"},
+    {VKEY_DOWN, kMetaKey | kShiftKey, "MoveToEndOfDocumentAndModifySelection"},
+    {'H', kCtrlKey, "DeleteBackward"},
+    {'D', kCtrlKey, "DeleteForward"},
+    {'B', kCtrlKey, "MoveLeft"},
+    {'F', kCtrlKey, "MoveRight"},
+    {'P', kCtrlKey, "MoveUp"},
+    {'N', kCtrlKey, "MoveDown"},
 };
 
 const KeyboardCodeKeyPressEntry kKeyboardCodeKeyPressEntries[] = {
diff --git a/third_party/blink/renderer/core/exported/web_plugin_container_impl.cc b/third_party/blink/renderer/core/exported/web_plugin_container_impl.cc
index 27fbc0f8b7ec4..52d984f3a2c44 100644
--- a/third_party/blink/renderer/core/exported/web_plugin_container_impl.cc
+++ b/third_party/blink/renderer/core/exported/web_plugin_container_impl.cc
@@ -111,7 +111,7 @@ namespace blink {
 
 namespace {
 
-#if BUILDFLAG(IS_MAC)
+#if 1 //BUILDFLAG(IS_MAC)
 const WebInputEvent::Modifiers kEditingModifier = WebInputEvent::kMetaKey;
 #else
 const WebInputEvent::Modifiers kEditingModifier = WebInputEvent::kControlKey;
diff --git a/ui/base/accelerators/accelerator.cc b/ui/base/accelerators/accelerator.cc
index 2468b2c588182..e8d2981ff7298 100644
--- a/ui/base/accelerators/accelerator.cc
+++ b/ui/base/accelerators/accelerator.cc
@@ -205,7 +205,7 @@ bool Accelerator::IsShiftDown() const {
 }
 
 bool Accelerator::IsCtrlDown() const {
-  return (modifiers_ & EF_CONTROL_DOWN) != 0;
+  return (modifiers_ & EF_COMMAND_DOWN) != 0;
 }
 
 bool Accelerator::IsAltDown() const {
@@ -217,7 +217,7 @@ bool Accelerator::IsAltGrDown() const {
 }
 
 bool Accelerator::IsCmdDown() const {
-  return (modifiers_ & EF_COMMAND_DOWN) != 0;
+  return (modifiers_ & EF_CONTROL_DOWN) != 0;
 }
 
 bool Accelerator::IsFunctionDown() const {
diff --git a/ui/events/event.h b/ui/events/event.h
index ae5e40ab11e0c..d67a6eda2606e 100644
--- a/ui/events/event.h
+++ b/ui/events/event.h
@@ -117,9 +117,9 @@ class EVENTS_EXPORT Event {
   // The following methods return true if the respective keys were pressed at
   // the time the event was created.
   bool IsShiftDown() const { return (flags_ & EF_SHIFT_DOWN) != 0; }
-  bool IsControlDown() const { return (flags_ & EF_CONTROL_DOWN) != 0; }
+  bool IsControlDown() const { return (flags_ & EF_COMMAND_DOWN) != 0; }
   bool IsAltDown() const { return (flags_ & EF_ALT_DOWN) != 0; }
-  bool IsCommandDown() const { return (flags_ & EF_COMMAND_DOWN) != 0; }
+  bool IsCommandDown() const { return (flags_ & EF_CONTROL_DOWN) != 0; }
   bool IsAltGrDown() const { return (flags_ & EF_ALTGR_DOWN) != 0; }
   bool IsCapsLockOn() const { return (flags_ & EF_CAPS_LOCK_ON) != 0; }
 
diff --git a/ui/events/event_constants.h b/ui/events/event_constants.h
index c16556cd8c1d8..04c1dd9ee1568 100644
--- a/ui/events/event_constants.h
+++ b/ui/events/event_constants.h
@@ -49,7 +49,7 @@ enum EventFlags {
 // An artificial value used to bridge platform differences.
 // Many commands on Mac as Cmd+Key are the counterparts of
 // Ctrl+Key on other platforms.
-#if BUILDFLAG(IS_APPLE)
+#if 1 //BUILDFLAG(IS_APPLE)
   EF_PLATFORM_ACCELERATOR = EF_COMMAND_DOWN,
 #else
   EF_PLATFORM_ACCELERATOR = EF_CONTROL_DOWN,
diff --git a/ui/views/controls/textfield/textfield.cc b/ui/views/controls/textfield/textfield.cc
index ad0c697c839e0..62f84dd9e7a01 100644
--- a/ui/views/controls/textfield/textfield.cc
+++ b/ui/views/controls/textfield/textfield.cc
@@ -249,9 +249,9 @@ Textfield::Textfield()
   // These allow BrowserView to pass edit commands from the Chrome menu to us
   // when we're focused by simply asking the FocusManager to
   // ProcessAccelerator() with the relevant accelerators.
-  AddAccelerator(ui::Accelerator(ui::VKEY_X, ui::EF_CONTROL_DOWN));
-  AddAccelerator(ui::Accelerator(ui::VKEY_C, ui::EF_CONTROL_DOWN));
-  AddAccelerator(ui::Accelerator(ui::VKEY_V, ui::EF_CONTROL_DOWN));
+  AddAccelerator(ui::Accelerator(ui::VKEY_X, ui::EF_COMMAND_DOWN));
+  AddAccelerator(ui::Accelerator(ui::VKEY_C, ui::EF_COMMAND_DOWN));
+  AddAccelerator(ui::Accelerator(ui::VKEY_V, ui::EF_COMMAND_DOWN));
 #endif
 
   // Sometimes there are additional ignored views, such as the View representing
-- 
2.25.1

