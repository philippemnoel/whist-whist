diff --git a/chrome/browser/renderer_context_menu/render_view_context_menu.cc b/chrome/browser/renderer_context_menu/render_view_context_menu.cc
index 2516bb55d3836..79212d9fd7fc2 100644
--- a/chrome/browser/renderer_context_menu/render_view_context_menu.cc
+++ b/chrome/browser/renderer_context_menu/render_view_context_menu.cc
@@ -1392,7 +1392,6 @@ void RenderViewContextMenu::AppendLinkItems() {
         browser && (browser->is_type_app() || browser->is_type_app_popup());
 
     bool show_open_in_new_window = true;
-    bool show_open_link_off_the_record = true;
 
 #if BUILDFLAG(IS_CHROMEOS_ASH)
     Profile* profile = GetProfile();
@@ -1435,13 +1434,6 @@ void RenderViewContextMenu::AppendLinkItems() {
       AppendProtocolHandlerSubMenu();
     }
 
-    if (show_open_link_off_the_record) {
-      menu_model_.AddItemWithStringId(
-          IDC_CONTENT_CONTEXT_OPENLINKOFFTHERECORD,
-          in_app ? IDS_CONTENT_CONTEXT_OPENLINKOFFTHERECORD_INAPP
-                 : IDS_CONTENT_CONTEXT_OPENLINKOFFTHERECORD);
-    }
-
     AppendOpenInWebAppLinkItems();
     AppendOpenWithLinkItems();
 
@@ -1814,6 +1806,10 @@ void RenderViewContextMenu::AppendExitFullscreenItem() {
   if (!browser)
     return;
 
+  // If kiosk mode, Whist has enabled the context menu so we must remove this option.
+  if (base::CommandLine::ForCurrentProcess()->HasSwitch(switches::kKioskMode))
+    return;
+
   // Only show item if in fullscreen mode.
   if (!browser->exclusive_access_manager()
            ->fullscreen_controller()
diff --git a/chrome/browser/ui/views/bookmarks/bookmark_context_menu.cc b/chrome/browser/ui/views/bookmarks/bookmark_context_menu.cc
index 6046671d59481..851c330312409 100644
--- a/chrome/browser/ui/views/bookmarks/bookmark_context_menu.cc
+++ b/chrome/browser/ui/views/bookmarks/bookmark_context_menu.cc
@@ -78,9 +78,6 @@ void BookmarkContextMenu::InstallPreRunCallback(base::OnceClosure callback) {
 
 void BookmarkContextMenu::RunMenuAt(const gfx::Point& point,
                                     ui::MenuSourceType source_type) {
-  if (base::CommandLine::ForCurrentProcess()->HasSwitch(switches::kKioskMode))
-    return;
-
   if (!PreRunCallback().is_null())
     std::move(PreRunCallback()).Run();
 
diff --git a/chrome/browser/ui/views/page_action/zoom_view.cc b/chrome/browser/ui/views/page_action/zoom_view.cc
index fba0a8ce686d1..a256348e4ce9f 100644
--- a/chrome/browser/ui/views/page_action/zoom_view.cc
+++ b/chrome/browser/ui/views/page_action/zoom_view.cc
@@ -34,6 +34,9 @@ void ZoomView::UpdateImpl() {
 }
 
 bool ZoomView::ShouldBeVisible(bool can_show_bubble) const {
+  // We don't want the server to ever show the zoom bubble view
+  return false;
+  /*
   if (delegate()->ShouldHidePageActionIcons())
     return false;
 
@@ -47,6 +50,7 @@ bool ZoomView::ShouldBeVisible(bool can_show_bubble) const {
   zoom::ZoomController* zoom_controller =
       zoom::ZoomController::FromWebContents(GetWebContents());
   return zoom_controller && !zoom_controller->IsAtDefaultZoom();
+  */
 }
 
 bool ZoomView::HasAssociatedBubble() const {
diff --git a/chrome/browser/ui/views/renderer_context_menu/render_view_context_menu_views.cc b/chrome/browser/ui/views/renderer_context_menu/render_view_context_menu_views.cc
index 13b73503a6a73..f521aaa36c80e 100644
--- a/chrome/browser/ui/views/renderer_context_menu/render_view_context_menu_views.cc
+++ b/chrome/browser/ui/views/renderer_context_menu/render_view_context_menu_views.cc
@@ -369,9 +369,6 @@ void RenderViewContextMenuViews::ExecOpenInReadAnything() {
 }
 
 void RenderViewContextMenuViews::Show() {
-  if (base::CommandLine::ForCurrentProcess()->HasSwitch(switches::kKioskMode))
-    return;
-
   // Menus need a Widget to work. If we're not the active tab we won't
   // necessarily be in a widget.
   views::Widget* top_level_widget = GetTopLevelWidget();
diff --git a/third_party/blink/renderer/core/editing/editing_behavior.cc b/third_party/blink/renderer/core/editing/editing_behavior.cc
index 6b7a35b5b83db..256a20c1d5251 100644
--- a/third_party/blink/renderer/core/editing/editing_behavior.cc
+++ b/third_party/blink/renderer/core/editing/editing_behavior.cc
@@ -44,7 +44,7 @@ const unsigned kCtrlKey = WebInputEvent::kControlKey;
 const unsigned kAltKey = WebInputEvent::kAltKey;
 const unsigned kShiftKey = WebInputEvent::kShiftKey;
 const unsigned kMetaKey = WebInputEvent::kMetaKey;
-#if BUILDFLAG(IS_MAC)
+#if 1 //BUILDFLAG(IS_MAC)
 // Aliases for the generic key defintions to make kbd shortcuts definitions more
 // readable on OS X.
 const unsigned kOptionKey = kAltKey;
@@ -87,7 +87,7 @@ struct DomKeyKeyDownEntry {
 const KeyboardCodeKeyDownEntry kKeyboardCodeKeyDownEntries[] = {
     {VKEY_LEFT, 0, "MoveLeft"},
     {VKEY_LEFT, kShiftKey, "MoveLeftAndModifySelection"},
-#if BUILDFLAG(IS_MAC)
+#if 1 //BUILDFLAG(IS_MAC)
     {VKEY_LEFT, kOptionKey, "MoveWordLeft"},
     {VKEY_LEFT, kOptionKey | kShiftKey, "MoveWordLeftAndModifySelection"},
 #else
@@ -96,7 +96,7 @@ const KeyboardCodeKeyDownEntry kKeyboardCodeKeyDownEntries[] = {
 #endif
     {VKEY_RIGHT, 0, "MoveRight"},
     {VKEY_RIGHT, kShiftKey, "MoveRightAndModifySelection"},
-#if BUILDFLAG(IS_MAC)
+#if 1 //BUILDFLAG(IS_MAC)
     {VKEY_RIGHT, kOptionKey, "MoveWordRight"},
     {VKEY_RIGHT, kOptionKey | kShiftKey, "MoveWordRightAndModifySelection"},
 #else
@@ -109,7 +109,7 @@ const KeyboardCodeKeyDownEntry kKeyboardCodeKeyDownEntries[] = {
     {VKEY_DOWN, 0, "MoveDown"},
     {VKEY_DOWN, kShiftKey, "MoveDownAndModifySelection"},
     {VKEY_NEXT, kShiftKey, "MovePageDownAndModifySelection"},
-#if !BUILDFLAG(IS_MAC)
+#if 0 //!BUILDFLAG(IS_MAC)
     {VKEY_UP, kCtrlKey, "MoveParagraphBackward"},
     {VKEY_UP, kCtrlKey | kShiftKey, "MoveParagraphBackwardAndModifySelection"},
     {VKEY_DOWN, kCtrlKey, "MoveParagraphForward"},
@@ -119,32 +119,32 @@ const KeyboardCodeKeyDownEntry kKeyboardCodeKeyDownEntries[] = {
 #endif
     {VKEY_HOME, 0, "MoveToBeginningOfLine"},
     {VKEY_HOME, kShiftKey, "MoveToBeginningOfLineAndModifySelection"},
-#if BUILDFLAG(IS_MAC)
+#if 1 //BUILDFLAG(IS_MAC)
     {VKEY_PRIOR, kOptionKey, "MovePageUp"},
     {VKEY_NEXT, kOptionKey, "MovePageDown"},
 #endif
-#if !BUILDFLAG(IS_MAC)
+#if 0 //!BUILDFLAG(IS_MAC)
     {VKEY_HOME, kCtrlKey, "MoveToBeginningOfDocument"},
     {VKEY_HOME, kCtrlKey | kShiftKey,
      "MoveToBeginningOfDocumentAndModifySelection"},
 #endif
     {VKEY_END, 0, "MoveToEndOfLine"},
     {VKEY_END, kShiftKey, "MoveToEndOfLineAndModifySelection"},
-#if !BUILDFLAG(IS_MAC)
+#if 0 //!BUILDFLAG(IS_MAC)
     {VKEY_END, kCtrlKey, "MoveToEndOfDocument"},
     {VKEY_END, kCtrlKey | kShiftKey, "MoveToEndOfDocumentAndModifySelection"},
 #endif
     {VKEY_BACK, 0, "DeleteBackward"},
     {VKEY_BACK, kShiftKey, "DeleteBackward"},
     {VKEY_DELETE, 0, "DeleteForward"},
-#if BUILDFLAG(IS_MAC)
+#if 1 //BUILDFLAG(IS_MAC)
     {VKEY_BACK, kOptionKey, "DeleteWordBackward"},
     {VKEY_DELETE, kOptionKey, "DeleteWordForward"},
 #else
     {VKEY_BACK, kCtrlKey, "DeleteWordBackward"},
     {VKEY_DELETE, kCtrlKey, "DeleteWordForward"},
 #endif
-#if BUILDFLAG(IS_MAC)
+#if 1 //BUILDFLAG(IS_MAC)
     {'B', kCommandKey, "ToggleBold"},
     {'I', kCommandKey, "ToggleItalic"},
 #else
@@ -167,14 +167,14 @@ const KeyboardCodeKeyDownEntry kKeyboardCodeKeyDownEntries[] = {
 #if !BUILDFLAG(IS_MAC)
     // On OS X, we pipe these back to the browser, so that it can do menu item
     // blinking.
-    {'C', kCtrlKey, "Copy"},
-    {'V', kCtrlKey, "Paste"},
-    {'V', kCtrlKey | kShiftKey, "PasteAndMatchStyle"},
-    {'X', kCtrlKey, "Cut"},
-    {'A', kCtrlKey, "SelectAll"},
-    {'Z', kCtrlKey, "Undo"},
-    {'Z', kCtrlKey | kShiftKey, "Redo"},
-    {'Y', kCtrlKey, "Redo"},
+    {'C', kMetaKey, "Copy"},
+    {'V', kMetaKey, "Paste"},
+    {'V', kMetaKey | kShiftKey, "PasteAndMatchStyle"},
+    {'X', kMetaKey, "Cut"},
+    {'A', kMetaKey, "SelectAll"},
+    {'Z', kMetaKey, "Undo"},
+    {'Z', kMetaKey | kShiftKey, "Redo"},
+    {'Y', kMetaKey, "Redo"},
 #endif
 #if BUILDFLAG(IS_WIN)
     {VKEY_BACK, kAltKey, "Undo"},
diff --git a/third_party/blink/renderer/core/events/ui_event_with_key_state.h b/third_party/blink/renderer/core/events/ui_event_with_key_state.h
index 7d5e5359e6a33..5cee1fecbdb6d 100644
--- a/third_party/blink/renderer/core/events/ui_event_with_key_state.h
+++ b/third_party/blink/renderer/core/events/ui_event_with_key_state.h
@@ -34,10 +34,10 @@ class EventModifierInit;
 
 class CORE_EXPORT UIEventWithKeyState : public UIEvent {
  public:
-  bool ctrlKey() const { return modifiers_ & WebInputEvent::kControlKey; }
+  bool ctrlKey() const { return modifiers_ & WebInputEvent::kMetaKey; }
   bool shiftKey() const { return modifiers_ & WebInputEvent::kShiftKey; }
   bool altKey() const { return modifiers_ & WebInputEvent::kAltKey; }
-  bool metaKey() const { return modifiers_ & WebInputEvent::kMetaKey; }
+  bool metaKey() const { return modifiers_ & WebInputEvent::kControlKey; }
 
   // We ignore the new tab modifiers (ctrl or meta, depending on OS) set by
   // JavaScript when processing events.  However, scripts running in isolated
diff --git a/third_party/blink/renderer/core/exported/web_plugin_container_impl.cc b/third_party/blink/renderer/core/exported/web_plugin_container_impl.cc
index af1e17b1a0e54..b2801a7a51e22 100644
--- a/third_party/blink/renderer/core/exported/web_plugin_container_impl.cc
+++ b/third_party/blink/renderer/core/exported/web_plugin_container_impl.cc
@@ -111,7 +111,7 @@ namespace blink {
 
 namespace {
 
-#if BUILDFLAG(IS_MAC)
+#if 1 //BUILDFLAG(IS_MAC)
 const WebInputEvent::Modifiers kEditingModifier = WebInputEvent::kMetaKey;
 #else
 const WebInputEvent::Modifiers kEditingModifier = WebInputEvent::kControlKey;
diff --git a/ui/base/accelerators/accelerator.cc b/ui/base/accelerators/accelerator.cc
index 9fca6ff3e6220..32bcd28dfedaf 100644
--- a/ui/base/accelerators/accelerator.cc
+++ b/ui/base/accelerators/accelerator.cc
@@ -205,7 +205,7 @@ bool Accelerator::IsShiftDown() const {
 }
 
 bool Accelerator::IsCtrlDown() const {
-  return (modifiers_ & EF_CONTROL_DOWN) != 0;
+  return (modifiers_ & EF_COMMAND_DOWN) != 0;
 }
 
 bool Accelerator::IsAltDown() const {
@@ -217,7 +217,7 @@ bool Accelerator::IsAltGrDown() const {
 }
 
 bool Accelerator::IsCmdDown() const {
-  return (modifiers_ & EF_COMMAND_DOWN) != 0;
+  return (modifiers_ & EF_CONTROL_DOWN) != 0;
 }
 
 bool Accelerator::IsFunctionDown() const {
diff --git a/ui/events/event.h b/ui/events/event.h
index 0d8d8bc2762ae..e0ca8b8c3bac6 100644
--- a/ui/events/event.h
+++ b/ui/events/event.h
@@ -116,9 +116,9 @@ class EVENTS_EXPORT Event {
   // The following methods return true if the respective keys were pressed at
   // the time the event was created.
   bool IsShiftDown() const { return (flags_ & EF_SHIFT_DOWN) != 0; }
-  bool IsControlDown() const { return (flags_ & EF_CONTROL_DOWN) != 0; }
+  bool IsControlDown() const { return (flags_ & EF_COMMAND_DOWN) != 0; }
   bool IsAltDown() const { return (flags_ & EF_ALT_DOWN) != 0; }
-  bool IsCommandDown() const { return (flags_ & EF_COMMAND_DOWN) != 0; }
+  bool IsCommandDown() const { return (flags_ & EF_CONTROL_DOWN) != 0; }
   bool IsAltGrDown() const { return (flags_ & EF_ALTGR_DOWN) != 0; }
   bool IsCapsLockOn() const { return (flags_ & EF_CAPS_LOCK_ON) != 0; }
 
diff --git a/ui/events/event_constants.h b/ui/events/event_constants.h
index 8728f1200f28b..0e34b4925b00e 100644
--- a/ui/events/event_constants.h
+++ b/ui/events/event_constants.h
@@ -50,7 +50,7 @@ constexpr EventFlags EF_MOUSE_BUTTON =
 // An artificial value used to bridge platform differences.
 // Many commands on Mac as Cmd+Key are the counterparts of
 // Ctrl+Key on other platforms.
-#if BUILDFLAG(IS_APPLE)
+#if 1 //BUILDFLAG(IS_APPLE)
 constexpr EventFlags EF_PLATFORM_ACCELERATOR = EF_COMMAND_DOWN;
 #else
 constexpr EventFlags EF_PLATFORM_ACCELERATOR = EF_CONTROL_DOWN;
diff --git a/ui/views/controls/textfield/textfield.cc b/ui/views/controls/textfield/textfield.cc
index e051ad7bcd429..ba41c709f1d6d 100644
--- a/ui/views/controls/textfield/textfield.cc
+++ b/ui/views/controls/textfield/textfield.cc
@@ -246,9 +246,9 @@ Textfield::Textfield()
   // These allow BrowserView to pass edit commands from the Chrome menu to us
   // when we're focused by simply asking the FocusManager to
   // ProcessAccelerator() with the relevant accelerators.
-  AddAccelerator(ui::Accelerator(ui::VKEY_X, ui::EF_CONTROL_DOWN));
-  AddAccelerator(ui::Accelerator(ui::VKEY_C, ui::EF_CONTROL_DOWN));
-  AddAccelerator(ui::Accelerator(ui::VKEY_V, ui::EF_CONTROL_DOWN));
+  AddAccelerator(ui::Accelerator(ui::VKEY_X, ui::EF_COMMAND_DOWN));
+  AddAccelerator(ui::Accelerator(ui::VKEY_C, ui::EF_COMMAND_DOWN));
+  AddAccelerator(ui::Accelerator(ui::VKEY_V, ui::EF_COMMAND_DOWN));
 #endif
 
   // Sometimes there are additional ignored views, such as the View representing
