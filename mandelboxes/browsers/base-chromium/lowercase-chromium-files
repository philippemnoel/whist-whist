#!/bin/bash

# Enable Sentry bash error handler, this will catch errors if `set -e` is set in a Bash script
SENTRY_ENV_FILENAME=/usr/share/whist/private/sentry_env
case $(cat $SENTRY_ENV_FILENAME) in
  dev|staging|prod)
    export SENTRY_ENVIRONMENT=${SENTRY_ENV}
    eval "$(sentry-cli bash-hook)"
    ;;
  *)
    echo "Sentry environment not set, skipping Sentry error handler"
    ;;
esac

# Exit on subcommand errors
set -Eeuo pipefail

monitor() {
  # Exclude .service files, since we're not allowed to watch those
  inotifywait -q -m -r -e create -exclude '*.service*' "$1" | while read DIRECTORY EVENT FILE; do
    case $EVENT in
      CREATE*)
        # Get lowercase version of filename
        LOWER_FILE="${FILE,,}"
        # If the lowercase version is different from original filename,
        # symlink the lowercase version to the original version
        # Check against "$1/", to not flood /tmp or ./Extensions
        if [[ "$LOWER_FILE" != "$FILE" && "$DIRECTORY" != "$1/" ]]; then
          ln -s "./$FILE" "$DIRECTORY/$LOWER_FILE"
          echo ln -s "./$FILE" "$DIRECTORY/$LOWER_FILE"
        fi
      ;;
    esac
  done
}

# By watching /tmp and ./Extensions, this allows chromium themes
# to function properly

# Monitor the /tmp directory, chromium puts extensions there first
monitor /tmp &

# $1 should be "google-chrome" or "BraveSoftware"
EXTENSION_DIR="/home/whist/.config/$1/Default/Extensions"

# Wait for the extensions directory to be created
while [[ ! -d "$EXTENSION_DIR" ]]; do
  sleep 0.05
done

# Monitor the extensions directory
monitor "$EXTENSION_DIR" &

# Let both jobs run indefinitely
wait

# Always succeed, even if the jobs fail for some reason
exit 0

