# #[[
################## WhistProtocolTest ##################
#]]

# Create the executable
set(PROTOCOL_TEST_BINARY WhistProtocolTest)

# Client-only files, since macOS is only supported client-sides
if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    add_executable(${PROTOCOL_TEST_BINARY}
        protocol_test.cpp

        # Files needed for Whist Lib unit tests
        ../whist/utils/aes.c
        ../whist/utils/png.c
        ../whist/utils/avpacket_buffer.c
        ../whist/network/ringbuffer.c

        # Files needed for Client unit tests
        ../client/audio.c
        ../client/client_utils.c
        ../client/network.c
        ../client/sdl_event_handler.c
        ../client/sdl_utils.c
        ../client/handle_server_message.c
        ../client/video.c
        ../client/sdlscreeninfo.c
        ../client/sync_packets.c
        ../client/bitrate.c
    )
# Server & Client files, for Windows/Linux (supported on both client and server)
else()
    add_executable(${PROTOCOL_TEST_BINARY}
        protocol_test.cpp
        # Files needed for Server unit tests
        ../server/client.c
        ../server/video.c
        ../server/audio.c
        ../server/parse_args.c
        ../server/handle_client_message.c
        ../server/network.c

        # Files needed for Whist Lib unit tests
        ../whist/utils/aes.c
        ../whist/utils/png.c
        ../whist/utils/avpacket_buffer.c
        ../whist/network/ringbuffer.c

        # Files needed for Client unit tests
        ../client/audio.c
        ../client/client_utils.c
        ../client/network.c
        ../client/sdl_event_handler.c
        ../client/sdl_utils.c
        ../client/handle_server_message.c
        ../client/video.c
        ../client/sdlscreeninfo.c
        ../client/sync_packets.c
        ../client/bitrate.c
)
endif()

# Link the GoogleTest library
target_link_libraries(${PROTOCOL_TEST_BINARY} gtest)
target_link_libraries(${PROTOCOL_TEST_BINARY} gmock)

# Copy the Sentry library to the build folder
add_custom_command(
    TARGET ${PROTOCOL_TEST_BINARY} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_directory
    ${CMAKE_BINARY_DIR}/lib/64/sentry/${CMAKE_SYSTEM_NAME}/
    $<TARGET_FILE_DIR:${PROTOCOL_TEST_BINARY}>
)

# Copy the FFmpeg library to the build folder
add_custom_command(
    TARGET ${PROTOCOL_TEST_BINARY} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_directory
    ${CMAKE_BINARY_DIR}/lib/64/ffmpeg/${CMAKE_SYSTEM_NAME}/
    $<TARGET_FILE_DIR:${PROTOCOL_TEST_BINARY}>
)

# Copy the OpenSSL/libcrypto libraries if we are on Windows
if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    add_custom_command(
        TARGET ${PROTOCOL_TEST_BINARY} POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy
        ${CMAKE_BINARY_DIR}/lib/64/openssl/Windows/libcrypto-1_1-x64.dll
        $<TARGET_FILE_DIR:${PROTOCOL_TEST_BINARY}>
    )
endif()

# Link the FFmpeg libraries
foreach(LIB ${FFMPEG_LIBS_PATHS})
    message(VERBOSE "linking lib for ${PROTOCOL_TEST_BINARY}: ${LIB}")
    target_link_libraries(${PROTOCOL_TEST_BINARY} ${LIB})
endforeach()

# Link the threading and dynamic link library if we are on macOS/Linx
if(NOT ${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    target_link_libraries(${PROTOCOL_TEST_BINARY} ${CMAKE_DL_LIBS})
endif()

# Link the remaining platform-independent libraries
target_link_libraries(${PROTOCOL_TEST_BINARY}
    ${PLATFORM_INDEPENDENT_SERVER_LIBS}
    ${PLATFORM_INDEPENDENT_LIBS}
)

# Link macOS-specific files and libraries
if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    target_sources(${PROTOCOL_TEST_BINARY} PRIVATE
        ../client/native_window_utils_mac.m
    )
    target_link_libraries(${PROTOCOL_TEST_BINARY} ${MAC_SPECIFIC_CLIENT_LIBS})
endif()

# Link more Linux-specific libraries
if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    target_sources(${PROTOCOL_TEST_BINARY} PRIVATE ../client/native_window_utils_x11.c)
    find_package(X11 REQUIRED
        Xfixes
        Xdamage
        Xext
        Xtst
    )
    find_package(ALSA REQUIRED)
    include_directories(${X11_INCLUDE_DIR} ${ALSA_INCLUD_DIR})
    if(NOT X11_LIBRARIES)
        message(FATAL_ERROR "Library X11_LIBRARIES was not found!")
    endif()
    if(NOT X11_Xfixes_LIB)
        message(FATAL_ERROR "Library X11_Xfixes_LIB was not found!")
    endif()
    if(NOT X11_Xdamage_LIB)
        message(FATAL_ERROR "Library X11_Xdamage_LIB was not found!")
    endif()
    if(NOT X11_Xext_LIB)
        message(FATAL_ERROR "Library X11_Xext_LIB was not found!")
    endif()

    target_link_libraries(${PROTOCOL_TEST_BINARY}
        ${X11_LIBRARIES}
        ${X11_Xfixes_LIB}
        ${X11_Xdamage_LIB}
        ${X11_Xext_LIB}
        ${X11_Xtst_LIB}
        ${ALSA_LIBRARIES}
        GL
        asound
        m
    )
endif()

# Finally, link Windows-specific libraries
if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    set(CMAKE_EXE_LINKER_FLAGS "/nodefaultlib /nologo /ignore:4099  ")

    target_sources(${PROTOCOL_TEST_BINARY} PRIVATE
        ../client/native_window_utils_windows.c
    )
    target_link_libraries(${PROTOCOL_TEST_BINARY} whistInput ${LIBMFX})

    set_property(TARGET ${PROTOCOL_TEST_BINARY} PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>"
    )

    if(CMAKE_CUDA_COMPILER)
        set_property(TARGET ${PROTOCOL_TEST_BINARY} PROPERTY CUDA_ARCHITECTURES OFF)
    endif()

    # Link to system libs
    target_link_libraries(${PROTOCOL_TEST_BINARY} ${WINDOWS_SPECIFIC_CLIENT_LIBS})
endif()

# Copy over test-related assets from s3

message(STATUS "Downloading test assets from AWS S3")
execute_process(COMMAND aws s3 cp --recursive s3://fractal-test-assets/protocol-test-assets ${CMAKE_BINARY_DIR}/test/assets)
message(STATUS "Downloading test assets from AWS S3 - Completed")

# Run the tests
add_custom_command(
    TARGET ${PROTOCOL_TEST_BINARY} POST_BUILD
    COMMAND ./${PROTOCOL_TEST_BINARY}
)

# Generate code coverage
if(GENERATE_COVERAGE)
    add_custom_command(
        TARGET ${PROTOCOL_TEST_BINARY} POST_BUILD
        COMMAND lcov --capture --directory ${CMAKE_BINARY_DIR} --output-file ${CMAKE_BINARY_DIR}/coverage.info
        COMMAND lcov --remove ${CMAKE_BINARY_DIR}/coverage.info -o ${CMAKE_BINARY_DIR}/coverage.info '${CMAKE_BINARY_DIR}/*' '/Applications/*' '/usr/include/c++/9/*' '/Library/*' '${CMAKE_SOURCE_DIR}/test' # Remove non-Whist files
        COMMAND lcov --list ${CMAKE_BINARY_DIR}/coverage.info # print verbose coverage information
    )
endif()

# Upload code coverage to Codecov
if(UPLOAD_COVERAGE)
    add_custom_command(
        TARGET ${PROTOCOL_TEST_BINARY} POST_BUILD
        COMMAND ${CMAKE_BINARY_DIR}/codecov --sha $ENV{GITHUB_SHA} --slug fractal/whist -t $ENV{CODECOV_TOKEN} -c -F protocol
    )
endif()

# Include the GoogleTest library, and let gtest scan for the tests in the binary file
include(GoogleTest)
gtest_discover_tests(${PROTOCOL_TEST_BINARY})
