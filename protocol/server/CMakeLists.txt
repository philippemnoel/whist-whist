#[[
################## FractalServer ##################
]]

set(CMAKE_SKIP_BUILD_RPATH  FALSE)
set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
set(CMAKE_INSTALL_RPATH $ORIGIN)
add_executable(FractalServer
        client.c
        main.c
        handle_client_message.c
        network.c
        webserver.c
        )

# copy the sentry shared library to the build folder after the build
add_custom_command(
        TARGET FractalServer POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy
        ${CMAKE_SOURCE_DIR}/sentry-native/${CMAKE_SHARED_LIBRARY_PREFIX}sentry${CMAKE_SHARED_LIBRARY_SUFFIX}
        ${CMAKE_SOURCE_DIR}/server/build${arch})

# MacOS and Windows default to crashpad for Sentry, and crashpad_handler needs to be in
#   the same folder as the executable
if (${CMAKE_SYSTEM_NAME} MATCHES "Darwin" OR ${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    add_custom_command(
            TARGET FractalServer POST_BUILD
            COMMAND ${CMAKE_COMMAND} -E copy
            ${CMAKE_SOURCE_DIR}/sentry-native/crashpad_build/handler/crashpad_handler
            ${CMAKE_SOURCE_DIR}/server/build${arch})
endif()
if (${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    add_custom_command(
            TARGET FractalServer POST_BUILD
            COMMAND ${CMAKE_COMMAND} -E copy
            ${CMAKE_SOURCE_DIR}/sentry-native/crashpad_build/handler/crashpad_handler.exe
            ${CMAKE_SOURCE_DIR}/server/build${arch})
endif()

set_target_properties(FractalServer PROPERTIES
        RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/server/build${arch}
        LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/server/build${arch})

#Print out compile flags in verbose mode of CMake
message(VERBOSE "c base flags ${CMAKE_C_FLAGS}")
message(VERBOSE "c release flags ${CMAKE_C_FLAGS_RELEASE}")
message(VERBOSE "c debug flags ${CMAKE_C_FLAGS_DEBUG}")

# FFMPEG, Threading and Dynamic linking libs
foreach(LIB ${FFMPEG_LIBS_PATHS})
    message(STATUS ${LIB})
    target_link_libraries(FractalServer ${LIB})
endforeach(LIB)

# Threading and Dynamic link for linux/macosx only
# if we add other target platforms we may need to come back to this
if (NOT ${CMAKE_SYSTEM_NAME} MATCHES "Windows")
#    set(THREADS_PREFER_PTHREAD_FLAG ON)
#    find_package(Threads REQUIRED)
    target_link_libraries(FractalServer
#            Threads::Threads
            ${CMAKE_DL_LIBS}
            )
endif ()


#[[
################## Linking platform independent libs ##################
]]
target_link_libraries(FractalServer
        fractalCore
        fractalAudio
        fractalVideo
        fractalClipboard
        fractalCursor
        fractalInput
        fractalNetwork
        fractalUtils
        ${STATIC_SDL2}
        ${LIBMFX}
        sentry
        )

#[[
################## LINUX ##################
]]
if (${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    find_package(X11 REQUIRED
            Xfixes
            Xdamage
            Xext
            Xtst)
    include_directories(${X11_INCLUDE_DIR})
    if(NOT X11_LIBRARIES)
        message(FATAL_ERROR "Library X11_LIBRARIES was not found!")
    endif()
    if(NOT X11_Xfixes_LIB)
        message(FATAL_ERROR "Library X11_Xfixes_LIB was not found!")
    endif()
    if(NOT X11_Xdamage_LIB)
        message(FATAL_ERROR "Library X11_Xdamage_LIB was not found!")
    endif()
    if(NOT X11_Xext_LIB)
        message(FATAL_ERROR "Library X11_Xext_LIB was not found!")
    endif()

    target_link_libraries(FractalServer
            ${X11_LIBRARIES}
            ${X11_Xfixes_LIB}
            ${X11_Xdamage_LIB}
            ${X11_Xext_LIB}
            ${X11_Xtst_LIB}
            asound
            m
            OpenSSL::Crypto
            )
endif()

#[[
################## WINDOWS ##################
]]
if (${WIN32})
    #Linked flags: LNK4099 is when the linker cannot find the .pdb for debugging symbols
    # this comes up when we used precompiled libraries which we do not have .pdb files for
    set(CMAKE_EXE_LINKER_FLAGS "/nodefaultlib /nologo /ignore:4099	")

    #sets the MSVC runtime library as multithreaded and adds debug symbols if is a debug build
    #see https://cmake.org/cmake/help/v3.15/variable/CMAKE_MSVC_RUNTIME_LIBRARY.html#variable:CMAKE_MSVC_RUNTIME_LIBRARY
    set_property(TARGET FractalServer PROPERTY
            MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")

    # Link to system libs
    target_link_libraries(FractalServer
            ${STATIC_OPENSSL}
            libvcruntime
            libcmt
            kernel32
            ws2_32
            crypt32
            wldap32
            normaliz
            gdi32
            winmm
            imm32
            shell32
            advapi32
            ole32
            oleaut32
            opengl32
            user32
            uuid
            version
            dxgi
            d3d11
            winspool
            comdlg32
            odbc32
            odbccp32
            ucrt
            vcruntime
            msvcrt
            msvcmrt
            libcpmt
            msvcprt
            avrt
            d3dcompiler
            dxguid
            crypt32
            shlwapi
            shcore
            DbgHelp
            )
endif()
