import argparse
import shutil
import os
import subprocess

# move to directory where this file is written no matter where this is called from
CURRENT_DIR = os.path.join(os.getcwd(), os.path.dirname(__file__))

WEBSERVER_ROOT = os.path.join(CURRENT_DIR, "../..")

MONOREPO_ROOT = os.path.join(WEBSERVER_ROOT, "..")


def setup_branch():
    shutil.copytree(os.path.join(CURRENT_DIR, "bin"), os.path.join(MONOREPO_ROOT, "bin"))
    shutil.copy(os.path.join(WEBSERVER_ROOT, "app.json"), MONOREPO_ROOT)

    # waits for process to finish, stdout is shared
    ret = subprocess.run(f"git add {os.path.join(MONOREPO_ROOT, 'bin')}", shell=True)
    assert ret.returncode == 0

    ret = subprocess.run(f"git add {os.path.join(MONOREPO_ROOT, 'app.json')}", shell=True)
    assert ret.returncode == 0

    ret = subprocess.run(
        'git commit -m "AUTOGENERATED COMMIT. This branch can now make a review app."', shell=True
    )
    assert ret.returncode == 0

    ret = subprocess.run("git push", shell=True)
    assert ret.returncode == 0

    print("Go to the Heroku UI and create a review app under the 'Pipeline' tab in fractal-server")


def setup_db():
    setup_db_parser = argparse.ArgumentParser(description="Parse args for the db.")
    setup_db_parser.add_argument(
        "--app_name",
        required=True,
        help="Name of the Heroku Review App.",
    )

    args, _ = setup_db_parser.parse_known_args()
    app_name = args.app_name

    # capture stdout of this process so we get the eph db url
    print(f"Getting POSTGRES_EPHEMERAL_DB_URL from review app {app_name}...")
    ret = subprocess.run(
        f"heroku config:get POSTGRES_EPHEMERAL_DB_URL --app {app_name}",
        capture_stdout=True,
        shell=True,
    )
    assert ret.returncode == 0

    eph_db_url = ret.stdout.decode("utf-8")

    # add DB_EXISTS=true and POSTGRES_URI=<eph_db_url> to env, then
    # run `ephemeral_db_setup/db_setup.sh`
    print(f"Settup up ephemeral db at {eph_db_url}")
    ret = subprocess.run(
        f"env DB_EXISTS=true POSTGRES_URI={eph_db_url} bash {os.path.join(WEBSERVER_ROOT, 'ephemeral_db_setup/db_setup.sh')}",
        start_new_session=True,
        shell=True,
    )
    assert ret.returncode == 0

    # override DATABASE_URL in the review app to be the eph db. This restarts the dyno
    # and makes it use the eph db.
    print("Overriding DATABASE_URL to be ephemeral db url.")
    ret = subprocess.run(
        f"heroku config:set DATABASE_URL={eph_db_url} --app {app_name}",
        start_new_session=True,
        shell=True,
    )
    assert ret.returncode == 0


def clean_branch():
    pass


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Review app utility.")

    parser.add_argument(
        "--setup_branch",
        action="store_true",  # True iff --setup_branch passed
        help="Add files to this branch so that it can run a review app and commit them.",
    )
    parser.add_argument(
        "--setup_db",
        action="store_true",  # True iff --setup_db passed
        help="Setup the review app db.",
    )
    parser.add_argument(
        "--clean_branch",
        action="store_true",  # True iff --clean_branch passed
        help="Undoes setup_branch and commits.",
    )

    args, _ = parser.parse_known_args()

    # only one can be true
    assert (
        args.setup_branch + args.setup_db + args.clean_branch == 1
    ), "Only one of setup_branch, setup_db, clean_branch can be passed."

    if args.setup_branch:
        setup_branch()
    elif args.setup_db:
        setup_db()
    elif args.clean_branch:
        clean_branch()
    else:
        raise ValueError("Which arg was set? Not handled by utility.")
