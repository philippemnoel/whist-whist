#!/bin/bash

# exit on error and missing env var
set -Eeuo pipefail

# Retrieve relative subfolder path
# https://stackoverflow.com/questions/59895/how-to-get-the-source-directory-of-a-bash-script-from-within-the-script-itself
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
# Make sure we are always running this script with working directory `main-webserver/db_setup`
cd "$DIR"

ARG="setup-branch"
if [[ $* =~ [:space:]*--setup-branch[:space:]* ]]; then
  ARG="setup-branch"
elif [[ $* =~ [:space:]*--setup-db[:space:]* ]]; then
  ARG="setup-db"
elif [[ $* =~ [:space:]*--clean-branch[:space:]* ]]; then
  ARG="clean-branch"
else
    echo "Must pass one of the following args: --setup-branch, setup-db, clean-branch"
    exit 1
fi

if [ $ARG == "setup-branch" ]; then
    read -p "This will commit new files to your branch and push. Press enter to continue"

    # puts in fractal monorepo (not webserver monorepo)
    echo "Copying bin/ to monorepo root"
    cp -R bin/ ../../../bin

    # puts app.json in fractal monorepo
    echo "Copying app.json to monorepo root"
    cp ../../app.json ../../../

    echo "Commiting files to git"
    git add ../../../bin
    git add ../../../app.json
    git commit -m "AUTOGENERATED COMMIT. This branch can now make a review app."
    git push

    echo "Go to the Heroku UI and create a review app."
    
elif [ $ARG == "setup-db" ]; then
    REVIEW_APP_NAME=${1}
    export POSTGRES_TO_URL=$(heroku config:get POSTGRES_EPHEMERAL_DB_URL --app $REVIEW_APP_NAME)

    # add env vars to current env. these tell us the host, db, role, pwd
    export $(cat .env | xargs)
    export POSTGRES_FROM_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}/${POSTGRES_DB}

    cd ../../db_setup
    # first fetch the current dev db schema
    if [ -f db_schema.sql ]; then
        echo "Found existing schema and data sql scripts. Skipping fetching db."
    else
        export POSTGRES_REMOTE_URI=$POSTGRES_FROM_URL
        bash fetch_db.sh
    fi

    # save the current schema as we are temporarily modifying
    cp db_schema.sql db_schema.true.sql
    python modify_db_schema.py

    # figure out env vars
    # setup the ephemeral review app db using the modified schema
    bash db_setup.sh

    # cleanup
    mv db_schema.true.sql db_schema.sql
fi
