import os


def rename_x_to_y(x, y, file_data):
    """
    Rename x to y in file_data (create with readlines()). Modifies file_data directly.

    Args:
        x (str): old value
        y (str): new value
        file_data (List[str]): lines of original file
    """
    for i in range(len(file_data)):
        file_data[i] = file_data[i].replace(x, y)


def parse_role_and_db_from_url(postgres_url):
    """
    Get the role and db from a postgres URL.

    Args:
        postgres_url (str): a url in the form postgres://<role>:<password>@<host>:<port>/<database>

    Returns:
        role (str)
        db (str)
    """
    prefix = "postgres://"
    # grabs role and db from str, cut out prefix
    role = postgres_url[len(prefix) :].split(":")[0]
    db = postgres_url[len(prefix) :].split("/")[-1]
    return role, db


def change_schema_for_ci():
    """
    Change the schema script download by fetch_db.sh. Heroku requires us to use role/db generated by them,
    so we need to change the schema script to work on the role/db given by Heroku in CI.

    Needs db_schema.sql in the current directory and env vars POSTGRES_HOST (origin, dev/staging/prod server)
    and POSTGRES_LOCAL_HOST (dest in CI)
    """
    assert "db_schema.sql" in os.listdir(".")
    postgres_host = os.getenv("POSTGRES_HOST", "")
    postgres_local_host = os.getenv("POSTGRES_LOCAL_HOST", "")
    assert postgres_host != "" and postgres_local_host != ""
    prefix = "postgres://"
    assert postgres_host[: len(prefix)] == prefix
    assert postgres_local_host[: len(prefix)] == prefix
    role, db = parse_role_and_db_from_url(postgres_host)
    local_role, local_db = parse_role_and_db_from_url(postgres_local_host)

    fp = open("db_schema.sql", "r")
    file_data = fp.readlines()
    fp.close()

    rename_x_to_y(role, local_role, file_data)
    rename_x_to_y(db, local_db, file_data)

    fp = open("db_schema.sql", "w")
    fp.writelines(file_data)
    fp.close()


if __name__ == "__main__":
    change_schema_for_ci()
