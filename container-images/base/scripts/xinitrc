# Note that we can't set "o" or "pipefail" since xinitrc is run as a non-compatible shell script.
set -Eeu

# This script starts the AwesomeWM window manager inside the container, retrieves
# the container ID and DPI, and starts the container's application (i.e. Google Chrome)

# Set resource paths
FRACTAL_MAPPINGS_DIR=/fractal/resourceMappings
DPI_FILENAME=$FRACTAL_MAPPINGS_DIR/DPI
AWESOME_WM_PID_FILE=/usr/share/fractal/private/awesome_wm_pid

# Install keymappings
xmodmap /root/.Xmodmap

# Things running outside runuser are run as root

# Start playerctl to respond to media keys
echo "Starting 'playerctl daemon' in the background..."
/usr/share/fractal/run-as-fractal-user.sh "playerctl daemon" &

# Start the AwesomeWM window manager
echo "Starting AwesomeWM in the background..."
/usr/share/fractal/run-as-fractal-user.sh "awesome" &

# Gets the PID of the backgrounded AwesomeWM process
awesome_pid=$!

echo "AwesomeWM started as PID $awesome_pid..."

echo $awesome_pid > $AWESOME_WM_PID_FILE
 
# Send DPI to X Server, if DPI is set for the container
if [ -f "$DPI_FILENAME" ]; then
    export FRACTAL_DPI=$(cat $DPI_FILENAME)
    echo "Xft.dpi: $FRACTAL_DPI" | xrdb -merge
fi

# Indicate that the display is ready and consider the service started
systemd-notify --ready --status="X11 Display and AwesomeWM started"

echo "Notified that fractal-display service is ready"

# Wait for AwesomeWM process to finish
# Note: this never finishes, but leaves the X server open
wait $awesome_pid

# Remove the PID file - indicating to other scripts that Awesome WM has finished.
rm $AWESOME_WM_PID_FILE

# Spin until container is shut down
while true
do
    sleep 1000
done

echo "FINISHED FRACTAL-DISPLAY"
