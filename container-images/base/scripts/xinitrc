# Note that we can't set "o" or "pipefail" since xinitrc is run as a non-compatible shell script.
set -Eeu

# This script starts the AwesomeWM window manager inside the container, retrieves
# the container ID and DPI, and starts the container's application (i.e. Google Chrome)

# Things running outside run_as_fractal are run as root.
# Running with login means that we lose all environment variables, so we need to pass them in manually.
run_as_fractal() {
    runuser --login fractal -c \
        'DISPLAY=:10 \
        LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:/usr/lib/i386-linux-gnu:/usr/local/nvidia/lib:/usr/local/nvidia/lib64 \
        LOCAL=yes \
        LC_ALL=C \
        PATH=/usr/local/cuda-11.0/bin:/usr/local/nvidia/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin \
        DEBIAN_FRONTEND=noninteractive '"$1"''
}

# Install keymappings
xmodmap /root/.Xmodmap

# Start playerctl to respond to media keys
run_as_fractal "playerctl daemon" &

# Start the AwesomeWM window manager
# Things running outside runuser are run as root
run_as_fractal "awesome" &

# Retrieve container parameters
FRACTAL_MAPPINGS_DIR=/fractal/resourceMappings
USER_CONFIGS_DIR=/fractal/userConfigs
DPI_FILENAME=$FRACTAL_MAPPINGS_DIR/DPI

# Send DPI to X Server, if DPI is set for the container
if [ -f "$DPI_FILENAME" ]; then
    export FRACTAL_DPI=$(cat $DPI_FILENAME)
    echo "Xft.dpi: $FRACTAL_DPI" | xrdb -merge
fi

# Wait for app configs to be ready
# TODO: perhaps use inotifytools to block instead of poll
# (https://github.com/fractal/fractal/issues/1132)
until [ -f $USER_CONFIGS_DIR/.configready ]
do
    sleep 0.1
done
rm $USER_CONFIGS_DIR/.configready

# Start the application that this container runs
run_as_fractal fractal-application
