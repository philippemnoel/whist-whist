FROM ubuntu:18.04

# -o option for pipefail before RUN commands with pipe in them, like unminimize
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

ENV container docker
ENV LC_ALL C
ENV DEBIAN_FRONTEND noninteractive

RUN sed -i 's/# deb/deb/g' /etc/apt/sources.list

RUN apt-get update \
    && apt-get install --no-install-recommends -y systemd systemd-sysv \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

WORKDIR /lib/systemd/system/sysinit.target.wants/
RUN ls | grep -v systemd-tmpfiles-setup | xargs rm -f "$1"
WORKDIR /

RUN rm -f /lib/systemd/system/multi-user.target.wants/* \
    /etc/systemd/system/*.wants/* \
    /lib/systemd/system/local-fs.target.wants/* \
    /lib/systemd/system/sockets.target.wants/*udev* \
    /lib/systemd/system/sockets.target.wants/*initctl* \
    /lib/systemd/system/basic.target.wants/* \
    /lib/systemd/system/anaconda.target.wants/* \
    /lib/systemd/system/plymouth* \
    /lib/systemd/system/systemd-update-utmp*

RUN apt-get update && apt-get clean && apt-get install --no-install-recommends -y \
    x11vnc \
    xvfb \
    fluxbox \
    wmctrl \
    ca-certificates \
    wget \
    gnupg2 \
    libgbm1 \
    libxcb-dri3-0 \
    wget \
    python \
    python3 \
    gnupg2 \
    sudo \
    vim \
    apt-utils \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

RUN wget -qO - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \
    && echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list \
    && sudo sed -i '3 s/^/# /' /etc/apt/sources.list \
    && apt-get update && apt-get install --no-install-recommends -y google-chrome-stable \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Avoids interactive installation for tzdata
# Uses UTC
ENV LOCAL="yes"
RUN apt-get install --no-install-recommends -y tzdata keyboard-configuration ufw \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Workaround for sudo bug in containers https://github.com/sudo-project/sudo/issues/42
RUN echo "Set disable_coredump false" >> /etc/sudo.conf

# Use local setup-scripts repository for development
COPY setup-scripts /setup-scripts

RUN useradd --create-home fractal \
    && usermod -aG sudo fractal \
    && echo 'fractal:password1234567.' | chpasswd

RUN apt-get install --no-install-recommends -y lsb-release \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

RUN apt-get install --no-install-recommends -y pulseaudio \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

RUN adduser root pulse-access \
    && adduser fractal pulse-access

# Install all required components for Fractal to perform well
# Split into multiple steps for caching
WORKDIR /setup-scripts/linux
RUN /bin/bash -c "source utils.sh && Update-Linux"
RUN /bin/bash -c "source utils.sh && Install-VirtualDisplay-NoGnome"
RUN /bin/bash -c "source utils.sh \
    && Install-7Zip \
    && Install-Curl \
    && Install-GoogleChrome"
RUN /bin/bash -c "source utils.sh \
    && Install-CustomX11Configuration"
RUN /bin/bash -c "source utils.sh \
    && Set-FractalDirectory \
    && Install-FractalServer dev"
RUN /bin/bash -c "source utils.sh \
    && Install-FractalAutoUpdate master"
RUN /bin/bash -c "source utils.sh \
    && Install-FractalLinuxInputDriver"
RUN /bin/bash -c "source utils.sh \
    && Install-Unison \
    && Enable-SSHKey"
RUN /bin/bash -c " source utils.sh \
    && Disable-Shutdown"
RUN /bin/bash -c " source utils.sh && Add-AutoLogin"
RUN /bin/bash -c " source utils.sh \
    Install-FractalServer \
    Install-CustomGDMConfiguration"
WORKDIR /

#From protocol/server/linux-server-setup.sh
RUN sudo apt-get install --no-install-recommends -y ffmpeg libavcodec-dev libavdevice-dev libx11-dev libxtst-dev libxdamage-dev libasound2-dev xclip x11-xserver-utils \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

COPY entry.sh /home/fractal
COPY display-service-envs /home/fractal
COPY fractal-input.rules home/fractal

RUN sudo apt-get install --no-install-recommends -y openssh-server \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

RUN systemctl enable ssh

RUN chown -v -R fractal:fractal /home/fractal
RUN chown root:root /run/user
RUN chmod +x /home/fractal/entry.sh


###### Set up nvidia inside container
LABEL com.nvidia.volumes.needed="nvidia_driver"

RUN echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf

RUN mkdir -p /opt/nvidia/lib && \
    ln -s /usr/local/nvidia/lib /opt/nvidia/lib/i386-linux-gnu && \
    ln -s /usr/local/nvidia/lib64 /opt/nvidia/lib/x86_64-linux-gnu

ENV PATH /usr/local/nvidia/bin:${PATH}
ENV LD_LIBRARY_PATH /usr/lib/x86_64-linux-gnu:/usr/lib/i386-linux-gnu${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}:/usr/local/nvidia/lib:/usr/local/nvidia/lib64

RUN sudo apt-get --no-install-recommends -y install "linux-headers-$(uname -r)" \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

ENV distribution $(. /etc/os-release;echo $ID$VERSION_ID | sed -e 's/\.//g')
RUN wget https://developer.download.nvidia.com/compute/cuda/repos/$(. /etc/os-release;echo $ID$VERSION_ID | sed -e 's/\.//g')/x86_64/cuda-$(. /etc/os-release;echo $ID$VERSION_ID | sed -e 's/\.//g').pin
RUN sudo mv cuda-$(. /etc/os-release;echo $ID$VERSION_ID | sed -e 's/\.//g').pin /etc/apt/preferences.d/cuda-repository-pin-600
RUN sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/$(. /etc/os-release;echo $ID$VERSION_ID | sed -e 's/\.//g')/x86_64/7fa2af80.pub
RUN echo "deb http://developer.download.nvidia.com/compute/cuda/repos/'$'(. /etc/os-release;echo $ID$VERSION_ID | sed -e 's/\.//g')/x86_64 /" | sudo tee /etc/apt/sources.list.d/cuda.list
RUN sudo apt-get -y update
RUN sudo apt-get --no-install-recommends -y install cuda-drivers \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

ENV PATH /usr/local/cuda-11.0/bin${PATH:+:${PATH}}

# Set up service (that starts before X) to fix the NVIDIA GPU bus ID
COPY setup-scripts/linux/01-fractal-nvidia.conf /usr/share/X11/xorg.conf.d/
COPY fractal-update-nvidia-busid.service /etc/systemd/system/
COPY setup-scripts/linux/update-nvidia-busid.sh /usr/share/fractal/
RUN systemctl enable fractal-update-nvidia-busid

# Set display environment variable to our nvidia-powered display
ENV DISPLAY :10

# Install libraries for (limited) hardware acceleration
RUN apt-get install --no-install-recommends -y vainfo vdpauinfo vdpau-va-driver libvdpau-va-gl1 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install some useful utilities for debugging/testing
RUN sudo apt-get install --no-install-recommends -y tmux xserver-xorg-video-dummy mesa-utils glmark2 mpv \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install firefox nightly (for testing only)
# RUN sudo add-apt-repository ppa:ubuntu-mozilla-daily/ppa
# RUN sudo apt update
# RUN sudo apt install firefox-trunk


# Install fractal services
COPY fractal-entrypoint.service /etc/systemd/system
RUN systemctl enable fractal-entrypoint
COPY fractal-display.service /etc/systemd/system
RUN systemctl enable fractal-display
COPY fractal-protocol.service /etc/systemd/system
RUN systemctl enable fractal-protocol
COPY fractal-audio.service /etc/systemd/system
RUN systemctl enable fractal-audio


COPY fractal-setup.sh /
RUN chmod +x /fractal-setup.sh

VOLUME [ "/sys/fs/cgroup" ]

#As opposed to graphical.target, which is the default
#RUN systemctl set-default multi-user.target
ENV init /sbin/init

# Disable some extra systemd services
RUN systemctl mask plymouth
RUN systemctl mask systemd-hostnamed
RUN systemctl mask acpid
RUN systemctl mask NetworkManager-wait-online
RUN systemctl mask nvidia-persistenced

CMD ["/lib/systemd/systemd"]
