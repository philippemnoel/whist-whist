FROM ubuntu:18.04

# Force failure on non-zero exit code for commands with a pipe in them
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

ENV container docker
ENV LC_ALL C
ENV DEBIAN_FRONTEND noninteractive

RUN sed -i 's/# deb/deb/g' /etc/apt/sources.list

# Install systemd
RUN apt-get update && apt-get install --no-install-recommends -y \
    systemd=237-3ubuntu10.42 \
    systemd-sysv=237-3ubuntu10.42 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Clean systemd install
WORKDIR /lib/systemd/system/sysinit.target.wants/

# hadolint ignore=SC2010
RUN ls | grep -v systemd-tmpfiles-setup | xargs rm -f "$1"

WORKDIR /

RUN rm -f /lib/systemd/system/multi-user.target.wants/* \
    /etc/systemd/system/*.wants/* \
    /lib/systemd/system/local-fs.target.wants/* \
    /lib/systemd/system/sockets.target.wants/*udev* \
    /lib/systemd/system/sockets.target.wants/*initctl* \
    /lib/systemd/system/basic.target.wants/* \
    /lib/systemd/system/anaconda.target.wants/* \
    /lib/systemd/system/plymouth* \
    /lib/systemd/system/systemd-update-utmp*

# These packages need to be installed before installing/updating Python
RUN apt-get update && apt-get install --no-install-recommends -y \
    lsb-release=9.20170808ubuntu1 \
    ufw=0.35-5 \
    keyboard-configuration=1.178ubuntu2 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Install Pulse Audio & XDummy dependencies explicitly, needs to be before installing/updating Python
RUN apt-get update && apt-get install --no-install-recommends -y \
    libunwind8=1.2.1-8 \
    xserver-xorg-core-hwe-18.04=2:1.20.8-2ubuntu2.2~18.04.3 \
    libgstreamer-plugins-base1.0-0=1.14.5-0ubuntu1~18.04.1 \
    libgstreamer1.0-0=1.14.5-0ubuntu1~18.04.1 \
    liborc-0.4-0=1:0.4.28-1 \
    libpulse0=1:11.1-1ubuntu7.10 \
    libsnapd-glib1=1.49-0ubuntu0.18.04.2 \
    libsndfile1=1.0.28-4ubuntu0.18.04.1 \
    libsoxr0=0.1.2-3 \
    libspeexdsp1=1.2~rc1.2-1ubuntu2 \
    libwebrtc-audio-processing1=0.3-1 \
    libasound2-plugins=1.1.1-1ubuntu1 \
    pulseaudio-utils=1:11.1-1ubuntu7.10 \
    libltdl7=2.4.6-2 \
    libtdb1=1.3.15-2 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install basic dependencies
RUN apt-get update && apt-get install --allow-downgrades --no-install-recommends -y \
    apt-utils=1.6.12ubuntu0.1 \
    x11vnc=0.9.13-3 \
    xvfb=2:1.19.6-1ubuntu4.6 \
    fluxbox=1.3.5-2build1 \
    wmctrl=1.07-7build1 \
    ca-certificates=20190110~18.04.1 \
    wget=1.19.4-1ubuntu2.2 \
    gnupg2=2.2.4-1ubuntu1.3 \
    libgbm1=19.2.8-0ubuntu0~18.04.2 \
    libxcb-dri3-0=1.13-1 \
    wget=1.19.4-1ubuntu2.2 \
    python=2.7.15~rc1-1 \
    python3.7=3.7.5-2~18.04 \
    sudo=1.8.21p2-3ubuntu1.2 \
    vim=2:8.0.1453-1ubuntu1.3 \
    libcurl4=7.58.0-2ubuntu3.10 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install Google Chrome dependencies explicitly
RUN apt-get update && apt-get install --no-install-recommends -y \
    libappindicator3-1=12.10.1+18.04.20180322.1-0ubuntu1 \
    libatk-bridge2.0-0=2.26.2-1 \
    libatk1.0-0=2.28.1-1 \
    libatspi2.0-0=2.28.0-1 \
    libcups2=2.2.7-1ubuntu2.8 \
    libgdk-pixbuf2.0-0=2.36.11-2 \
    libgtk-3-0=3.22.30-1ubuntu1 \
    libnspr4=2:4.18-1ubuntu1 \
    libnss3=2:3.35-2ubuntu2.12 \
    libpango-1.0-0=1.40.14-1ubuntu0.1 \
    libpangocairo-1.0-0=1.40.14-1ubuntu0.1 \
    libxcomposite1=1:0.4.4-2 \
    libxcursor1=1:1.1.15-1 \
    libxi6=2:1.7.9-1 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install Google Chrome
RUN wget -qO - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \
    && echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list \
    && sed -i '3 s/^/# /' /etc/apt/sources.list \
    && apt-get update && apt-get install --no-install-recommends -y google-chrome-stable=85.0.4183.102-1 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install time while avoiding interactive installation for tzdata, uses UTC
ENV LOCAL="yes"
RUN apt-get update && apt-get install --no-install-recommends -y \
    tzdata=2020a-0ubuntu0.18.04 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Workaround for sudo bug in containers https://github.com/sudo-project/sudo/issues/42
RUN echo "Set disable_coredump false" >> /etc/sudo.conf

# Use local setup-scripts repository for development
COPY setup-scripts /setup-scripts

# Create fractal user
RUN useradd --create-home fractal \
    && usermod -aG sudo fractal \
    && echo 'fractal:password1234567.' | chpasswd

# Install Pulse Audio
RUN apt-get update && apt-get install --no-install-recommends -y \ 
    pulseaudio=1:11.1-1ubuntu7.10 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Give access to Pulse Audio virtual sound card
RUN adduser root pulse-access \
    && adduser fractal pulse-access

# Install all required components for Fractal to perform well, split into steps for caching
WORKDIR /setup-scripts/linux

RUN /bin/bash -c "source utils.sh && Update-Linux"

RUN /bin/bash -c "source utils.sh && Install-VirtualDisplay-NoGnome"

RUN /bin/bash -c "source utils.sh \
    && Install-7Zip \
    && Install-Curl \
    && Install-GoogleChrome"

RUN /bin/bash -c "source utils.sh \
    && Install-CustomX11Configuration"

RUN /bin/bash -c "source utils.sh \
    && Set-FractalDirectory \
    && Install-FractalServer dev"

RUN /bin/bash -c "source utils.sh \
    && Install-FractalAutoUpdate master"

RUN /bin/bash -c "source utils.sh \
    && Install-FractalLinuxInputDriver"

RUN /bin/bash -c "source utils.sh \
    && Install-Unison \
    && Enable-SSHKey"






####### HERE




RUN /bin/bash -c " source utils.sh && Add-AutoLogin"
RUN /bin/bash -c " source utils.sh \
    Install-FractalServer \
    Install-CustomGDMConfiguration"
WORKDIR /

#From protocol/server/linux-server-setup.sh
RUN apt-get install --no-install-recommends -y \
    ffmpeg=7:3.4.8-0ubuntu0.2 \ 
    libavcodec-dev=7:3.4.8-0ubuntu0.2 \
    libavdevice-dev=7:3.4.8-0ubuntu0.2 \
    libx11-dev=2:1.6.4-3ubuntu0.3 \
    libxtst-dev=2:1.2.3-1 \
    libxdamage-dev=1:1.1.4-3 \
    libasound2-dev=1.1.3-5 \
    xclip=0.12+svn84-4build1 \
    x11-xserver-utils=7.7+7build1 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

COPY entry.sh /home/fractal
COPY display-service-envs /home/fractal
COPY fractal-input.rules home/fractal

RUN apt-get install --no-install-recommends -y openssh-server=1:7.6p1-4ubuntu0.3 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

RUN systemctl enable ssh

RUN chown -v -R fractal:fractal /home/fractal
RUN chown root:root /run/user
RUN chmod +x /home/fractal/entry.sh


###### Set up nvidia inside container
LABEL com.nvidia.volumes.needed="nvidia_driver"

RUN echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf

RUN mkdir -p /opt/nvidia/lib && \
    ln -s /usr/local/nvidia/lib /opt/nvidia/lib/i386-linux-gnu && \
    ln -s /usr/local/nvidia/lib64 /opt/nvidia/lib/x86_64-linux-gnu

ENV PATH /usr/local/nvidia/bin:${PATH}
ENV LD_LIBRARY_PATH /usr/lib/x86_64-linux-gnu:/usr/lib/i386-linux-gnu${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}:/usr/local/nvidia/lib:/usr/local/nvidia/lib64

# hadolint ignore=DL3008
RUN apt-get --no-install-recommends -y install "linux-headers-$(uname -r)"= \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

ENV distribution $(. /etc/os-release;echo $ID$VERSION_ID | sed -e 's/\.//g')
RUN wget "https://developer.download.nvidia.com/compute/cuda/repos/'$'(. /etc/os-release;echo $ID$VERSION_ID | sed -e 's/\.//g')/x86_64/cuda-'$'(. /etc/os-release;echo $ID$VERSION_ID | sed -e 's/\.//g').pin"
RUN mv "cuda-'$'(. /etc/os-release;echo $ID$VERSION_ID | sed -e 's/\.//g').pin" /etc/apt/preferences.d/cuda-repository-pin-600
RUN apt-key adv --fetch-keys "https://developer.download.nvidia.com/compute/cuda/repos/'$'(. /etc/os-release;echo $ID$VERSION_ID | sed -e 's/\.//g')/x86_64/7fa2af80.pub"
RUN echo "deb http://developer.download.nvidia.com/compute/cuda/repos/'$'(. /etc/os-release;echo $ID$VERSION_ID | sed -e 's/\.//g')/x86_64 /" | tee /etc/apt/sources.list.d/cuda.list
# hadolint ignore=DL3008
RUN apt-get -y update \
    && apt-get --no-install-recommends -y install cuda-drivers \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

ENV PATH /usr/local/cuda-11.0/bin${PATH:+:${PATH}}

# Set up service (that starts before X) to fix the NVIDIA GPU bus ID
COPY setup-scripts/linux/01-fractal-nvidia.conf /usr/share/X11/xorg.conf.d/
COPY fractal-update-nvidia-busid.service /etc/systemd/system/
COPY setup-scripts/linux/update-nvidia-busid.sh /usr/share/fractal/
RUN systemctl enable fractal-update-nvidia-busid

# Set display environment variable to our nvidia-powered display
ENV DISPLAY :10

# Install libraries for (limited) hardware acceleration
RUN apt-get install --no-install-recommends -y \
    vainfo=2.1.0+ds1-1 \
    vdpauinfo=1.0-3 \
    vdpau-va-driver=0.7.4-6ubuntu1 \
    libvdpau-va-gl1=0.4.2-1build1 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install some useful utilities for debugging/testing
RUN apt-get install --no-install-recommends -y \
    tmux=2.6-3 \
    xserver-xorg-video-dummy=1:0.3.8-1build1 \
    mesa-utils=8.4.0-1 \
    glmark2=2014.03+git20150611.fa71af2d-0ubuntu4 \
    mpv=0.27.2-1ubuntu1 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install firefox nightly (for testing only)
# RUN sudo add-apt-repository ppa:ubuntu-mozilla-daily/ppa
# RUN sudo apt update
# RUN sudo apt install firefox-trunk


# Install fractal services
COPY fractal-entrypoint.service /etc/systemd/system
RUN systemctl enable fractal-entrypoint
COPY fractal-display.service /etc/systemd/system
RUN systemctl enable fractal-display
COPY fractal-protocol.service /etc/systemd/system
RUN systemctl enable fractal-protocol
COPY fractal-audio.service /etc/systemd/system
RUN systemctl enable fractal-audio


COPY fractal-setup.sh /
RUN chmod +x /fractal-setup.sh

VOLUME [ "/sys/fs/cgroup" ]

#As opposed to graphical.target, which is the default
#RUN systemctl set-default multi-user.target
ENV init /sbin/init

# Disable some extra systemd services
RUN systemctl mask plymouth
RUN systemctl mask systemd-hostnamed
RUN systemctl mask acpid
RUN systemctl mask NetworkManager-wait-online
RUN systemctl mask nvidia-persistenced

CMD ["/lib/systemd/systemd"]
