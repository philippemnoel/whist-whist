// Code generated by pggen. DO NOT EDIT.

package queries

import (
	"context"
	"fmt"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
)

const verifyAllocatedContainerSQL = `SELECT * FROM hardware.container_info
  WHERE instance_name = $1
    AND user_id = $2;`

type VerifyAllocatedContainerRow struct {
	ContainerID  pgtype.Varchar `json:"container_id"`
	UserID       pgtype.Varchar `json:"user_id"`
	InstanceName pgtype.Varchar `json:"instance_name"`
	Status       pgtype.Varchar `json:"status"`
}

// VerifyAllocatedContainer implements Querier.VerifyAllocatedContainer.
func (q *DBQuerier) VerifyAllocatedContainer(ctx context.Context, instanceName string, userID string) ([]VerifyAllocatedContainerRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "VerifyAllocatedContainer")
	rows, err := q.conn.Query(ctx, verifyAllocatedContainerSQL, instanceName, userID)
	if err != nil {
		return nil, fmt.Errorf("query VerifyAllocatedContainer: %w", err)
	}
	defer rows.Close()
	items := []VerifyAllocatedContainerRow{}
	for rows.Next() {
		var item VerifyAllocatedContainerRow
		if err := rows.Scan(&item.ContainerID, &item.UserID, &item.InstanceName, &item.Status); err != nil {
			return nil, fmt.Errorf("scan VerifyAllocatedContainer row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close VerifyAllocatedContainer rows: %w", err)
	}
	return items, err
}

// VerifyAllocatedContainerBatch implements Querier.VerifyAllocatedContainerBatch.
func (q *DBQuerier) VerifyAllocatedContainerBatch(batch *pgx.Batch, instanceName string, userID string) {
	batch.Queue(verifyAllocatedContainerSQL, instanceName, userID)
}

// VerifyAllocatedContainerScan implements Querier.VerifyAllocatedContainerScan.
func (q *DBQuerier) VerifyAllocatedContainerScan(results pgx.BatchResults) ([]VerifyAllocatedContainerRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query VerifyAllocatedContainerBatch: %w", err)
	}
	defer rows.Close()
	items := []VerifyAllocatedContainerRow{}
	for rows.Next() {
		var item VerifyAllocatedContainerRow
		if err := rows.Scan(&item.ContainerID, &item.UserID, &item.InstanceName, &item.Status); err != nil {
			return nil, fmt.Errorf("scan VerifyAllocatedContainerBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close VerifyAllocatedContainerBatch rows: %w", err)
	}
	return items, err
}
