// Code generated by pggen. DO NOT EDIT.

package queries

import (
	"context"
	"fmt"
	"github.com/jackc/pgconn"
	"github.com/jackc/pgx/v4"
)

const updateInstanceCapacitySQL = `UPDATE whist.instances SET (remaining_capacity) = row(remaining_capacity + $1) WHERE id = $2;`

// UpdateInstanceCapacity implements Querier.UpdateInstanceCapacity.
func (q *DBQuerier) UpdateInstanceCapacity(ctx context.Context, removedMandelboxes int32, instanceID string) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpdateInstanceCapacity")
	cmdTag, err := q.conn.Exec(ctx, updateInstanceCapacitySQL, removedMandelboxes, instanceID)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query UpdateInstanceCapacity: %w", err)
	}
	return cmdTag, err
}

// UpdateInstanceCapacityBatch implements Querier.UpdateInstanceCapacityBatch.
func (q *DBQuerier) UpdateInstanceCapacityBatch(batch genericBatch, removedMandelboxes int32, instanceID string) {
	batch.Queue(updateInstanceCapacitySQL, removedMandelboxes, instanceID)
}

// UpdateInstanceCapacityScan implements Querier.UpdateInstanceCapacityScan.
func (q *DBQuerier) UpdateInstanceCapacityScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec UpdateInstanceCapacityBatch: %w", err)
	}
	return cmdTag, err
}
