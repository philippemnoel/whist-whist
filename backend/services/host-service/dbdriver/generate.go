package dbdriver // import "github.com/whisthq/whist/backend/services/host-service/dbdriver"

//go:generate echo "Generating dbdriver query code..."

// We don't pass the schema path in as an environment variable from the
// Makefile, since it needs to be relative to this file, not the Makefile.
//go:generate pggen gen go --schema-glob "../../../webserver/db_migration/schema.sql" --query-glob ./queries/*.sql

import (
	"math/bits"

	logger "github.com/whisthq/whist/backend/services/whistlogger"
)

func init() {
	// Ensure that the size of an `int` on our current system is 64-bits. This
	// should always be true anyways, but we might as well enforce it. It's
	// unclear how this check would be affected by cross-compilation.
	//
	// We need to check this because of
	// https://github.com/jschaf/pggen/issues/36. In particular, `pggen` is
	// generating `int` code for Postgres `bigint`s (i.e. 64-bit signed
	// integers). This is okay on 64-bit systems, but far from ideal.
	if bits.UintSize != 64 {
		// We can do a "real" panic here because it's in an init function, so we
		// haven't even entered the host service main() yet.
		logger.Panicf(nil,
			"This host service is running on (or was compiled on) a non-64 bit machine --- at the moment, the autogenerated database-interfacing code will not work.",
		)
	}
}
