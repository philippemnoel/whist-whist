// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: assign/assign.proto

package assign

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AssignServiceClient is the client API for AssignService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssignServiceClient interface {
	MandelboxAssign(ctx context.Context, in *MandelboxAssignRequest, opts ...grpc.CallOption) (*MandelboxAssignResponse, error)
}

type assignServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssignServiceClient(cc grpc.ClientConnInterface) AssignServiceClient {
	return &assignServiceClient{cc}
}

func (c *assignServiceClient) MandelboxAssign(ctx context.Context, in *MandelboxAssignRequest, opts ...grpc.CallOption) (*MandelboxAssignResponse, error) {
	out := new(MandelboxAssignResponse)
	err := c.cc.Invoke(ctx, "/com.whist.assign.AssignService/MandelboxAssign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssignServiceServer is the server API for AssignService service.
// All implementations must embed UnimplementedAssignServiceServer
// for forward compatibility
type AssignServiceServer interface {
	MandelboxAssign(context.Context, *MandelboxAssignRequest) (*MandelboxAssignResponse, error)
	mustEmbedUnimplementedAssignServiceServer()
}

// UnimplementedAssignServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAssignServiceServer struct {
}

func (UnimplementedAssignServiceServer) MandelboxAssign(context.Context, *MandelboxAssignRequest) (*MandelboxAssignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MandelboxAssign not implemented")
}
func (UnimplementedAssignServiceServer) mustEmbedUnimplementedAssignServiceServer() {}

// UnsafeAssignServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssignServiceServer will
// result in compilation errors.
type UnsafeAssignServiceServer interface {
	mustEmbedUnimplementedAssignServiceServer()
}

func RegisterAssignServiceServer(s grpc.ServiceRegistrar, srv AssignServiceServer) {
	s.RegisterService(&AssignService_ServiceDesc, srv)
}

func _AssignService_MandelboxAssign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MandelboxAssignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignServiceServer).MandelboxAssign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.whist.assign.AssignService/MandelboxAssign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignServiceServer).MandelboxAssign(ctx, req.(*MandelboxAssignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AssignService_ServiceDesc is the grpc.ServiceDesc for AssignService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssignService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.whist.assign.AssignService",
	HandlerType: (*AssignServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MandelboxAssign",
			Handler:    _AssignService_MandelboxAssign_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "assign/assign.proto",
}
