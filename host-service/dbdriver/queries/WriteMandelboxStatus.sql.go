// Code generated by pggen. DO NOT EDIT.

package queries

import (
	"context"
	"fmt"
	"github.com/jackc/pgconn"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
)

const writeMandelboxStatusSQL = `UPDATE hardware.mandelbox_info
  SET status = $1
  WHERE mandelbox_id = $2;`

// WriteMandelboxStatus implements Querier.WriteMandelboxStatus.
func (q *DBQuerier) WriteMandelboxStatus(ctx context.Context, status pgtype.Varchar, mandelboxID string) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "WriteMandelboxStatus")
	cmdTag, err := q.conn.Exec(ctx, writeMandelboxStatusSQL, status, mandelboxID)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query WriteMandelboxStatus: %w", err)
	}
	return cmdTag, err
}

// WriteMandelboxStatusBatch implements Querier.WriteMandelboxStatusBatch.
func (q *DBQuerier) WriteMandelboxStatusBatch(batch *pgx.Batch, status pgtype.Varchar, mandelboxID string) {
	batch.Queue(writeMandelboxStatusSQL, status, mandelboxID)
}

// WriteMandelboxStatusScan implements Querier.WriteMandelboxStatusScan.
func (q *DBQuerier) WriteMandelboxStatusScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec WriteMandelboxStatusBatch: %w", err)
	}
	return cmdTag, err
}
