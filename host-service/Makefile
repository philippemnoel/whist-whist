# Shell for this makefile
SHELL := /bin/bash

# Go command (configurable for testing different installations, etc.)
GOCMD        = go

# Build parameters
BUILD_FOLDER = build
DOCS_FOLDER  = $(BUILD_FOLDER)/docs
BINARY_NAME  = host-service

# Git parameters
GIT_COMMIT := $(shell git rev-list -1 HEAD)
GIT_BRANCH := $(shell git rev-parse --abbrev-ref HEAD)

# Continuous Integration parameters
CI ?= false
HEROKU_USER ?= $(shell heroku auth:whoami)
HEROKU_APIKEY ?= $(shell heroku auth:token | tail -1)
HEROKU_APP_NAME_OVERRIDE ?=

all: build

# Check that the required environment variables for building as part of our
# continuous integration/deployment pipeline on GitHub Actions are set properly.
checkCI:
	$(info building in $(BUILD_FOLDER) with CI set to $(CI)...)
ifeq ($(CI),true)
	# We're building on GitHub Actions, so we need to require non-trivial secrets
	$(info CI is true)
ifeq ($(origin HEROKU_USER),file)
	$(error "HEROKU_USER is not set, but CI is true")
endif
ifeq ($(HEROKU_USER),)
	$(error "HEROKU_USER is empty, but CI is true")
endif
ifeq ($(origin HEROKU_APIKEY),file)
	$(error "HEROKU_APIKEY is not set, but CI is true")
endif
ifeq ($(HEROKU_APIKEY),)
	$(error "HEROKU_APIKEY is empty, but CI is true")
endif
else
	$(info CI is false)
endif

build: checkCI
	# Temporarily resolve build issues by skipping go mod tidy
	$(GOCMD) mod tidy -v
	$(GOCMD) get github.com/jschaf/pggen/cmd/pggen
	touch $(CURDIR)/dbdriver/queries/temp.sql.go
	find $(CURDIR)/dbdriver/queries -type f -name "*.sql.go" | xargs rm

	# GOFLAGS fixes go.sum issue with lz4 package
	# Detailed at: https://github.com/golang/go/issues/44129#issuecomment-788810473
	GOFLAGS=-mod=mod $(GOCMD) generate ./...

	$(GOCMD) build -ldflags "\
		-X 'github.com/fractal/fractal/host-service/metadata.gitCommit=$(GIT_COMMIT)'\
		-X 'github.com/fractal/fractal/host-service/metadata/heroku.email=$(HEROKU_USER)'\
		-X 'github.com/fractal/fractal/host-service/metadata/heroku.apiKey=$(HEROKU_APIKEY)'\
		-X 'github.com/fractal/fractal/host-service/metadata/heroku.appNameOverride=$(HEROKU_APP_NAME_OVERRIDE)'\
		" -o $(BUILD_FOLDER)/$(BINARY_NAME) .

upload: build
	aws s3api put-object --bucket fractal-host-service --key $(GIT_BRANCH) --body build/host-service

format:
	(cd ~ && $(GOCMD) get -u golang.org/x/tools/cmd/goimports)
	goimports -l -w $$(find $(CURDIR) -name "*.go" | grep --invert-match ".sql.go" | xargs)

lint: build
	(cd ~ && $(GOCMD) get -u golang.org/x/lint/golint)
	$(GOCMD) list ./... | grep -v /agent/ | xargs golint -set_exit_status

vet: build
	$(GOCMD) list ./... | grep -v /agent/ | xargs $(GOCMD) vet

test: build
	echo "Running go tests..."
	# We need to run some tests as root since the host service init() checks for root perms.
	# Set CI flag in test environment so we can properly skip metrics collection in CI
	sudo env "PATH=$(PATH)" "CI=$(CI)" go test ./... -race -covermode=atomic -coverprofile=coverage.out

	# Download the Codecov uploader
	curl -Os https://uploader.codecov.io/latest/linux/codecov && chmod +x codecov

	# Upload coverage report to Codecov
	./codecov -t ${CODECOV_TOKEN} -c -F host-service

docs:
	$(GOCMD) install github.com/johnstarich/go/gopages@master
	gopages -out="$(DOCS_FOLDER)" -base="https://docs.fractal.co/host-service/" -brand-title="Fractal Host Service" -brand-description="Autogenerated from $(shell git describe --always --match "NOT A TAG" --dirty)" -source-link="https://github.com/fractal/fractal/blob/$(GIT_BRANCH)/host-service/{{.Path}}{{if .Line}}#L{{.Line}}{{end}}"

# Note that we should build before we lint or vet, since build updates the fractal dependencies.
.NOTPARALLEL:
check: clean build vet format lint test docs
	echo "All checks (clean, build, vet, format, lint, test, and docs) succeeded!"

clean:
	$(GOCMD) clean -modcache
	rm -rf $(BUILD_FOLDER)

run: build
	$(info running $(BUILD_FOLDER)/$(BINARY_NAME) with local dev (debug) configuration...)
	# we run the built binary instead of using `go run` because otherwise signal
	# handling for Ctrl+C does not work. We also create the symlink below so that
	# the host service can use the `ubuntu` account's aws credentials to run,
	# even though it runs as root.
ifeq ("$(wildcard /root/.aws/*)","")
	sudo ln -sf /home/ubuntu/.aws /root/.aws
endif
	sudo env "PATH=$(PATH)" APP_ENV=localdev $(BUILD_FOLDER)/$(BINARY_NAME)

runlocaldevwithdb: build
	$(info running $(BUILD_FOLDER)/$(BINARY_NAME) with localdevwithdb configuration...)
ifeq ("$(wildcard /root/.aws/*)","")
	sudo ln -sf /home/ubuntu/.aws /root/.aws
endif
	sudo env "PATH=$(PATH)" APP_ENV=localdevwithdb $(BUILD_FOLDER)/$(BINARY_NAME)

rundev: build
	$(info running $(BUILD_FOLDER)/$(BINARY_NAME) with dev configuration...)
	sudo env "PATH=$(PATH)" APP_ENV=development $(BUILD_FOLDER)/$(BINARY_NAME)

runstaging: build
	$(info running $(BUILD_FOLDER)/$(BINARY_NAME) with staging configuration...)
	sudo env "PATH=$(PATH)" APP_ENV=staging $(BUILD_FOLDER)/$(BINARY_NAME)

runprod: build
	$(info running $(BUILD_FOLDER)/$(BINARY_NAME) with production configuration...)
	sudo env "PATH=$(PATH)" APP_ENV=production $(BUILD_FOLDER)/$(BINARY_NAME)

.PHONY: build clean run rundev runstaging runprod format lint vet check
