# Shell for this makefile
SHELL := /bin/bash

# Go command (configurable for testing different installations, etc.)
GOCMD        = go

# Build parameters
BUILD_FOLDER = build
DOCS_FOLDER  = $(BUILD_FOLDER)/docs
BINARY_NAME  = host-service

# Git parameters
GIT_COMMIT := $(shell git rev-list -1 HEAD)
GIT_BRANCH := $(shell git rev-parse --abbrev-ref HEAD)

# Continuous Integration parameters
CI ?= false
ifeq ($(CI),true)
HEROKU_USER ?= $(shell heroku auth:whoami)
HEROKU_APIKEY ?= $(shell heroku auth:token | tail -1)
HEROKU_APP_NAME_OVERRIDE ?=
endif

all: build

# Check that the required environment variables for building as part of our
# continuous integration/deployment pipeline on GitHub Actions are set properly.
checkCI:
	$(info building in $(BUILD_FOLDER) with CI set to $(CI)...)
ifeq ($(CI),true)
# We're building on GitHub Actions, so we need to require non-trivial secrets
	$(info CI is true)
ifeq ($(origin HEROKU_USER),file)
	$(error "HEROKU_USER is not set, but CI is true")
endif
ifeq ($(HEROKU_USER),)
	$(error "HEROKU_USER is empty, but CI is true")
endif
ifeq ($(origin HEROKU_APIKEY),file)
	$(error "HEROKU_APIKEY is not set, but CI is true")
endif
ifeq ($(HEROKU_APIKEY),)
	$(error "HEROKU_APIKEY is empty, but CI is true")
endif
else
	$(info CI is false)
endif

build: checkCI
	$(GOCMD) mod tidy -v
	$(GOCMD) install github.com/jschaf/pggen/cmd/pggen@latest
	touch $(CURDIR)/dbdriver/queries/temp.sql.go
	find $(CURDIR)/dbdriver/queries -type f -name "*.sql.go" | xargs rm

# GOFLAGS fixes go.sum issue with lz4 package
# Detailed at: https://github.com/golang/go/issues/44129#issuecomment-788810473
	GOFLAGS=-mod=mod $(GOCMD) generate ./...

	$(GOCMD) build -ldflags "\
		-X 'github.com/whisthq/whist/core-go/metadata.gitCommit=$(GIT_COMMIT)'\
		-X 'github.com/whisthq/whist/core-go/metadata/heroku.email=$(HEROKU_USER)'\
		-X 'github.com/whisthq/whist/core-go/metadata/heroku.apiKey=$(HEROKU_APIKEY)'\
		-X 'github.com/whisthq/whist/core-go/metadata/heroku.appNameOverride=$(HEROKU_APP_NAME_OVERRIDE)'\
		" -o $(BUILD_FOLDER)/$(BINARY_NAME) .

format:
	(cd ~ && $(GOCMD) install golang.org/x/tools/cmd/goimports@latest)
	goimports -l -w $$(find $(CURDIR) -name "*.go" | grep --invert-match ".sql.go" | xargs)

lint: build
	(cd ~ && $(GOCMD) install honnef.co/go/tools/cmd/staticcheck@latest)
	$(GOCMD) list ./... | xargs staticcheck

vet: build
	$(GOCMD) list ./... | grep -v /agent/ | xargs $(GOCMD) vet

test: build
	echo "Running go tests..."

# We need to run some tests as root since the host service init() checks for root perms.
#
# Set CI flag in test environment so we can properly skip metrics collection in CI
#
# -p 1 flag ensures that tests run in series instead of parallel
# This ensures that tests that use the file system do not conflict or race with each other
#
# Set AWS credentials to allow user config integration tests to run
	sudo env "PATH=$(PATH)" "CI=$(CI)" "AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID)" "AWS_SECRET_ACCESS_KEY=$(AWS_SECRET_ACCESS_KEY)" go test -v -p 1 ./... -race -covermode=atomic -coverprofile=coverage.out

ifeq ($(CI),true)
	$(info Running in CI, uploading code coverage results to Codecov...)
# Download the Codecov uploader
	curl -Os https://uploader.codecov.io/latest/linux/codecov && chmod +x codecov

# Upload coverage report to Codecov
	./codecov -t ${CODECOV_TOKEN} -c -F host-service
	$(info Finished uploading code coverage results to Codecov.)
else
	$(info Not running in CI, skipping code coverage upload to Codecov...)
endif

docs:
	$(GOCMD) install github.com/johnstarich/go/gopages@master
	gopages -out="$(DOCS_FOLDER)" -base="https://docs.whist.com/host-service/" -brand-title="Whist Host Service" -brand-description="Autogenerated from $(shell git describe --always --match "NOT A TAG" --dirty)" -source-link="https://github.com/whisthq/whist/blob/$(GIT_BRANCH)/host-service/{{.Path}}{{if .Line}}#L{{.Line}}{{end}}"

# Note that we should build before we lint or vet, since build updates the whist dependencies.
.NOTPARALLEL:
check: clean build vet format lint test docs
	echo "All checks (clean, build, vet, format, lint, test, and docs) succeeded!"

clean:
	$(GOCMD) clean -modcache
	rm -rf $(BUILD_FOLDER)

run: build
	$(info running $(BUILD_FOLDER)/$(BINARY_NAME) with local dev (debug) configuration...)
# we run the built binary instead of using `go run` because otherwise signal
# handling for Ctrl+C does not work. We also create the symlink below so that
# the host service can use the `ubuntu` account's aws credentials to run,
# even though it runs as root.
ifeq ("$(wildcard /root/.aws/*)","")
	sudo ln -sf /home/ubuntu/.aws /root/.aws
endif
	sudo env "PATH=$(PATH)" APP_ENV=localdev $(BUILD_FOLDER)/$(BINARY_NAME)

runlocaldevwithdb: build
	$(info running $(BUILD_FOLDER)/$(BINARY_NAME) with localdevwithdb configuration...)
ifeq ("$(wildcard /root/.aws/*)","")
	sudo ln -sf /home/ubuntu/.aws /root/.aws
endif
	sudo env "PATH=$(PATH)" APP_ENV=localdevwithdb $(BUILD_FOLDER)/$(BINARY_NAME)

rundev: build
	$(info running $(BUILD_FOLDER)/$(BINARY_NAME) with dev configuration...)
	sudo env "PATH=$(PATH)" APP_ENV=dev USE_PROD_LOGGING=0 $(BUILD_FOLDER)/$(BINARY_NAME)

.PHONY: build clean run rundev format lint vet check
