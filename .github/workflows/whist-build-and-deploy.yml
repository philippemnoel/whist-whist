# workflows/whist-build-and-deploy.yml
#
# Whist: Build & Deploy
# Build and deploy each of the relevant Whist projects for our production, staging and dev environments

name: "Whist: Build & Deploy"

on:
  # On dev, we run a nightly build on weekdays (days of the week 1-5) at 00:01 UTC.
  schedule:
    - cron: "1 0 * * 1,2,3,4,5"
  # On staging & prod, we run a build for each promotion (push to branch).
  push:
    branches:
      - prod
      - staging
    paths-ignore:
      - "README.md"
      - "**/README.md"
      - ".github/workflows/README.md"
  workflow_dispatch:
    inputs:
      target:
        description: |
          The target deployment environment to which the chosen ref
          should be deployed. The target deployment environment
          should be one of "dev", "staging", or "prod". The default
          target deployment environment matches the branch that is
          being deployed.
        required: false
      dry-run:
        description: |
          A boolean indicating whether or not to perform a dry run
          deployment. If this boolean is set, code will be built, but
          not deployed.
        # Avoid accidental mistakes by doing dry run deployments by
        # default
        default: true

# This guarantees that if you push many commits to the same PR, only the latest
# commit will get run (others get cancelled)
concurrency:
  group: whist-build-and-deploy-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  # Configure Jobs
  # Detect the branch using regex matching and store as an output to regulate downstream actions.
  # Access branch with `whist-publish-build-config.outputs.branch`.
  whist-publish-build-config:
    name: "Configure Jobs"
    runs-on: ubuntu-20.04
    outputs:
      branch: ${{ steps.set-deploy-environment.outputs.environment }}
      publish: ${{ steps.detect-publish.outputs.publish }}
      scaling_service_url: ${{ steps.set-backend-services-urls.outputs.scaling_service_url }}
      auth0-domain: ${{ steps.set-deploy-environment.outputs.auth0-domain }}
      auth0-client-id: ${{ steps.set-deploy-environment.outputs.auth0-client-id }}
      auth0-client-secret-key: ${{ steps.set-deploy-environment.outputs.auth0-client-secret-key }}
    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Get the whole git history

      - name: Setup Python-based notifications
        working-directory: .github/workflows/helpers
        run: ./notifications/setup_notifications.sh

      - name: Set deploy environment
        id: set-deploy-environment
        if: ${{ github.event_name == 'push' || github.event_name == 'schedule' || contains(fromJSON('["", "dev", "staging", "prod"]'), inputs.target) }}
        uses: ./.github/actions/set-environment
        with:
          # Deploy the git ref corresponding to the event that
          # triggered the workflow unless the event that triggered the
          # workflow was a manual workflow_dispatch event. In such a
          # case, the branch specified by the target input should be
          # deployed.
          ref: ${{ inputs.target || github.ref }}

      - name: Set backend services URL based on Git Branch (prod, staging, dev)
        id: set-backend-services-urls
        run: |
          # Grab the name of the deployment environment from set-deploy-environment
          BRANCH_NAME=${{ steps.set-deploy-environment.outputs.environment }}
          if [ "$BRANCH_NAME" == "prod" ]; then
            SCALING_SERVICE_URL=https://prod-scaling-service.whist.com
          elif [ "$BRANCH_NAME" == "staging" ]; then
            SCALING_SERVICE_URL=https://staging-scaling-service.whist.com
          else
            SCALING_SERVICE_URL=https://dev-scaling-service.whist.com
          fi
          echo "scaling_service_url is set to: $SCALING_SERVICE_URL"
          echo "scaling_service_url=$SCALING_SERVICE_URL" >> $GITHUB_OUTPUT

      - name: Detect Whether to Publish the Job(s) or Not
        id: detect-publish
        run: |
          trap 'echo "::error::Command '\''$BASH_COMMAND'\'' exited with code $?"' ERR
          ref="${{ github.ref }}"
          target="${{ steps.set-deploy-environment.outputs.environment }}"
          case "$ref" in
            *prod|*staging|*dev)
              # Get the short branch name for dev, staging, and
              # prod by stripping away any leading characters. For
              # example, "/refs/heads/dev" becomes "dev".
              branch="${ref##*/}" ;;
            *)
                branch="$ref" ;;
          esac

          # We are only allowed to deploy a branch to its corresponding
          # target deployment environment. In other words, we can only
          # deploy dev to dev, staging to staging, and prod to prod.
          # Feature branches are not deployable.
          deployable="$([ "$branch" != "$target" ] || echo "1")"

          if [[ "${{ github.event_name }}" == "push" || "${{ github.event_name }}" == "schedule" ]]; then
            # If the workflow was triggered by a push or schedule event, the
            # dry-run input is not available. We can assert that the
            # push event was triggered on either dev, staging, or
            # prod, and then set the dry run flag to false.
            [[ "$branch" =~ dev|staging|prod ]]
            dry_run="false"
          else
            dry_run="${{ inputs.dry-run }}"

            # If we're trying to perform a real deployment, but the
            # current configuration is not deployable, abort.
            test "$deployable" -o "$dry_run" != "false"
          fi

          # Publish the job outputs iff this is not a dry run and
          # the git branch that we're deploying matches the target
          # deployment environment.
          publish="$([ "$deployable" -a "$dry_run" = "false" ] && echo "true" || echo "false")"

          echo "Publish is set to: $publish"
          echo "publish=$publish" >> $GITHUB_OUTPUT

      - name: Notify Slack on Job Error
        if: failure()
        shell: python3 {0}
        run: |
          from notifications.slack_bot import slack_post
          BODY = "@releases :rotating_light: Deployment failed: could not generate configs for deployment in `whist-publish-build-config` job, investigate immediately :rotating_light: (<https://github.com/whisthq/whist/actions/runs/${{ github.run_id }} | see logs>)"
          SLACK_WEBHOOK = "${{ secrets[format('SLACK_HOOKS_ENDPOINT_{0}', steps.set-deploy-environment.outputs.branch)] }}"
          slack_post(slack_webhook=SLACK_WEBHOOK, body=BODY)

  #######################################################################################
  #######################################################################################

  # Sentry Release: Create & Deploy a Sentry release for each of our projects to Sentry
  # Create and deploy a Sentry release for each of the Whist project with an associated
  # Sentry project to the Sentry console. This helps tag commits for debugging.
  # Runs if config succeeds and branch is in ["prod", "staging", "dev"]
  sentry-deploy-sentry-releases:
    name: "Deploy Sentry Release for: ${{ matrix.project.name }}"
    runs-on: ubuntu-20.04
    needs: [whist-publish-build-config]
    outputs:
      sentry-deploy-environment: ${{ steps.set-deploy-environment.outputs.environment }}
    env:
      SENTRY_ORG: whist
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

    strategy:
      matrix:
        project:
          - name: Host Service
            sentry-project: host-service
          - name: Mandelboxes
            sentry-project: mandelboxes
          - name: Protocol (macOS, Windows, Linux)
            sentry-project: protocol
          - name: Scaling Service
            sentry-project: scaling-service

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3

      - name: Set Deploy Environment
        id: set-deploy-environment
        uses: ./.github/actions/set-environment
        with:
          ref: ${{ github.ref }}

      - name: Setup Python-based notifications
        working-directory: .github/workflows/helpers
        run: ./notifications/setup_notifications.sh false

      - name: Set Git Repository URL to Enable sentry-cli Automatic Commit Tagging
        run: git remote set-url origin https://github.com/whisthq/whist

      - name: Create New Sentry Release
        env:
          SENTRY_DEPLOY_ENVIRONMENT: ${{ steps.set-deploy-environment.outputs.environment }}
        run: |
          # Install Sentry CLI
          curl -sL https://sentry.io/get-cli/ | bash

          # Create new Sentry release
          export SENTRY_RELEASE=$(sentry-cli releases propose-version)
          sentry-cli releases new $SENTRY_RELEASE --project ${{ matrix.project.sentry-project }}
          sentry-cli releases set-commits --auto $SENTRY_RELEASE --log-level=debug
          sentry-cli releases finalize $SENTRY_RELEASE

          # Create new deploy for this Sentry release
          sentry-cli releases deploys $SENTRY_RELEASE new -e $SENTRY_DEPLOY_ENVIRONMENT

      - name: Notify Slack on Failure
        if: failure()
        shell: python3 {0}
        run: |
          # Retrieve Slack webhook
          from notifications.slack_bot import slack_post
          BODY = f"@releases :rotating_light: Failed to deploy `${{ matrix.project.sentry-project }}` Sentry release on branch: `${{ steps.set-deploy-environment.outputs.environment }}`, investigate immediately :rotating_light: (<https://github.com/whisthq/whist/actions/runs/${{ github.run_id }} | see logs>)"
          SLACK_WEBHOOK = "${{ secrets[format('SLACK_HOOKS_ENDPOINT_{0}', steps.set-deploy-environment.outputs.environment)] }}"
          slack_post(slack_webhook=SLACK_WEBHOOK, body=BODY)

  sentry-deploy-sentry-releases-notify-slack:
    name: Notify Slack
    runs-on: ubuntu-20.04
    needs: [whist-publish-build-config, sentry-deploy-sentry-releases]
    if: success()
    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3

      - name: Setup Python-based notifications
        working-directory: .github/workflows/helpers
        run: ./notifications/setup_notifications.sh false

      - name: Notify Slack on Success
        shell: python3 {0}
        run: |
          from notifications.slack_bot import slack_post
          TITLE = ":sentry: Sentry Releases Deployed :sentry:"
          BODY = f"Sentry Releases for Whist Sentry Projects `host-service`, `mandelboxes`, `protocol`, and `scaling-service` deployed to Sentry on branch: `${{ needs.sentry-deploy-sentry-releases.outputs.sentry-deploy-environment }}` (<https://github.com/whisthq/whist/actions/runs/${{ github.run_id }} | see logs>)"
          SLACK_WEBHOOK = "${{ secrets[format('SLACK_HOOKS_ENDPOINT_{0}', needs.sentry-deploy-sentry-releases.outputs.sentry-deploy-environment)] }}"
          slack_post(slack_webhook=SLACK_WEBHOOK, body=BODY, title=TITLE)

  #######################################################################################
  #######################################################################################

  # Auth0 Rules: Build & Deploy Auth0 Rules to Auth0 Tenant
  # Build and deploy the Auth0 rules to the Whist Auth0 Tenant platform, with
  # which our frontend interfaces with for authenticating users through Auth0
  # Runs if config succeeds and branch is in ["prod", "staging", "dev"]
  auth0-deploy-rules:
    name: "Deploy Auth0 Rules"
    runs-on: ubuntu-20.04
    concurrency: auth0-deploy-rules-${{ github.ref }}
    needs: [whist-publish-build-config]

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3

      - name: Setup Python-based notifications
        working-directory: .github/workflows/helpers
        run: ./notifications/setup_notifications.sh

      - name: Set up NodeJS Environment
        uses: actions/setup-node@v3.4.1
        with:
          node-version: "16"

      - name: Install Development Dependencies
        working-directory: backend/auth0
        run: yarn install

      - name: Deploy Changes to the Auth0 Tenant
        working-directory: backend/auth0
        env:
          AUTH0_CLIENT_SECRET: ${{ secrets[format('AUTH0_GHA_CLIENT_SECRET_{0}', needs.whist-publish-build-config.outputs.branch)] }}
          GOOGLE_OAUTH_SECRET: ${{ secrets.GOOGLE_OAUTH_SECRET }}
          APPLE_OAUTH_SECRET: ${{ secrets.APPLE_OAUTH_SECRET }}
        run: yarn deploy:${{ needs.whist-publish-build-config.outputs.branch }}

      - name: Notify Slack on Job Success
        if: needs.whist-publish-build-config.outputs.publish == 'true'
        shell: python3 {0}
        run: |
          from notifications.slack_bot import slack_post
          TITLE = ":auth0: Auth0 Rules Deployed :auth0:"
          BODY = f"Auth0 Rules deployed to Auth0 Tenant on branch: `${{ needs.whist-publish-build-config.outputs.branch }}` (<https://github.com/whisthq/whist/actions/runs/${{ github.run_id }} | see logs>)"
          SLACK_WEBHOOK = "${{ secrets[format('SLACK_HOOKS_ENDPOINT_{0}', needs.whist-publish-build-config.outputs.branch)] }}"
          slack_post(slack_webhook=SLACK_WEBHOOK, body=BODY, title=TITLE)

      - name: Notify Slack on Job Error
        if: failure()
        shell: python3 {0}
        run: |
          from notifications.slack_bot import slack_post
          BODY = "@releases :rotating_light: Deployment failed: could not deploy Auth0 Rules in `auth0-deploy-rules` job, investigate immediately :rotating_light: (<https://github.com/whisthq/whist/actions/runs/${{ github.run_id }} | see logs>)"
          SLACK_WEBHOOK = "${{ secrets[format('SLACK_HOOKS_ENDPOINT_{0}', needs.whist-publish-build-config.outputs.branch)] }}"
          slack_post(slack_webhook=SLACK_WEBHOOK, body=BODY)

  #######################################################################################
  #######################################################################################

  # Terraform: Deploy infrastructure
  # 1 - Setup Terraform and plan
  # 2 - Run Terraform apply to deploy infrastructure.
  terraform-deploy:
    name: Deploy Terraform
    runs-on: ubuntu-20.04
    needs: [whist-publish-build-config]
    env:
      # Set AWS credentials for Terraform
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_GITHUB_ACTIONS_USER_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_GITHUB_ACTIONS_USER_SECRET_ACCESS_KEY }}

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3

      - name: Setup Python-based notifications
        working-directory: .github/workflows/helpers
        run: ./notifications/setup_notifications.sh

      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v2

      - name: Initialize Terraform
        working-directory: backend/infrastructure/${{ needs.whist-publish-build-config.outputs.branch }}
        run: terraform init -input=false

      - name: Terraform Plan
        working-directory: backend/infrastructure/${{ needs.whist-publish-build-config.outputs.branch }}
        run: terraform plan -input=false -out=tfplan

      - name: Terraform Apply
        if: needs.whist-publish-build-config.outputs.publish == 'true'
        working-directory: backend/infrastructure/${{ needs.whist-publish-build-config.outputs.branch }}
        run: terraform apply -input=false -auto-approve tfplan

      - name: Notify Slack on Successful Terraform Apply
        if: needs.whist-publish-build-config.outputs.publish == 'true'
        shell: python3 {0}
        run: |
          from notifications.slack_bot import slack_post
          TITLE = ":earth_americas: Infrastructure successfully deployed :earth_americas:"
          BODY = f"Infrastructure deployed with Terraform: `${{ needs.whist-publish-build-config.outputs.branch }}` (<https://github.com/whisthq/whist/actions/runs/${{ github.run_id }} | see logs>)"
          SLACK_WEBHOOK = "${{ secrets[format('SLACK_HOOKS_ENDPOINT_{0}', needs.whist-publish-build-config.outputs.branch)] }}"
          slack_post(slack_webhook=SLACK_WEBHOOK, body=BODY, title=TITLE)

      - name: Notify Slack on Job Error
        if: failure()
        shell: python3 {0}
        run: |
          from notifications.slack_bot import slack_post
          SCALING_SERVICE_URL = "${{ needs.whist-publish-build-config.outputs.scaling_service_url }}"
          BODY = f"@releases :rotating_light: Infrastructure failed to deploy, investigate immediately :rotating_light: (<https://github.com/whisthq/whist/actions/runs/${{ github.run_id }} | see logs>)"
          SLACK_WEBHOOK = "${{ secrets[format('SLACK_HOOKS_ENDPOINT_{0}', needs.whist-publish-build-config.outputs.branch)] }}"
          slack_post(slack_webhook=SLACK_WEBHOOK, body=BODY)

  #######################################################################################
  #######################################################################################

  # Mandelboxes: Publish to GHCR
  # This job builds and publishes the mandelboxes to GHCR so that they can be pulled from our instances.
  # We invoke a separate workflow file to keep things nicely factored out.
  #
  # Runs if config succeeds and branch is in ["dev", "staging", "prod"]
  mandelboxes-publish-ghcr:
    name: "Mandelboxes: Publish to GHCR"
    needs: [whist-publish-build-config]
    concurrency: mandelboxes-publish-ghcr-${{ github.ref }}
    uses: ./.github/workflows/mandelboxes-publish-ghcr.yml
    with:
      branch: ${{ needs.whist-publish-build-config.outputs.branch }}
      publish: ${{ needs.whist-publish-build-config.outputs.publish == 'true' }}
    secrets: inherit

  #######################################################################################
  #######################################################################################

  amis-publish-aws:
    name: "AMIs: Publish to AWS"
    concurrency: amis-publish-aws-${{ github.ref }}
    needs: [whist-publish-build-config, terraform-deploy]
    uses: ./.github/workflows/backend-ami-publish-aws.yml
    with:
      branch: ${{ needs.whist-publish-build-config.outputs.branch }}
      publish: ${{ needs.whist-publish-build-config.outputs.publish == 'true' }}
    secrets: inherit

  # Whist Browser: Retrieve Version Number
  # Retrieve the current Whist version number from our configuration database, through Hasura
  # This is the first step in the Whist Browser deployment jobs
  whist-browser-retrieve-version-number:
    name: "Whist Browser: Retrieve Current Version Number from Config Database"
    runs-on: ubuntu-20.04
    concurrency: whist-browser-retrieve-version-number-${{ github.ref }}
    needs:
      [
        whist-publish-build-config,
        scaling-service-deploy,
        auth0-deploy-rules,
        terraform-deploy,
      ]
    outputs:
      release_version: ${{ steps.generate-release-version.outputs.release_version }}
      new_micro_version: ${{ steps.generate-release-version.outputs.new_micro_version }}
      new_staging_rc_version: ${{ steps.generate-release-version.outputs.new_staging_rc_version }}
      new_dev_rc_version: ${{ steps.generate-release-version.outputs.new_dev_rc_version }}

    # Only run whist-browser deployment if none of the previous steps failed
    if: |
      always() &&
      (needs.scaling-service-deploy.result == 'success') &&
      (needs.auth0-deploy-rules.result == 'success') &&
      (needs.mandelboxes-publish-ghcr.result == 'success') &&
      (needs.amis-publish-aws.result == 'success')

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3

      - name: Retrieve Whist Desktop Browser Version from Config Database
        id: generate-release-version
        shell: bash --noprofile --norc -eo pipefail {0}
        run: |
          BRANCH_NAME="${{ needs.whist-publish-build-config.outputs.branch }}"
          ACCESS_KEY='${{ secrets.HASURA_GRAPHQL_ACCESS_KEY_CONFIG }}'

          # curl GraphQL API to retrieve version number from config database
          curl -X POST \
          -H "Content-Type: application/json" \
          -H "X-Hasura-Admin-Secret: $ACCESS_KEY" \
          --data "{ \"query\": \"query { desktop_app_version { major minor micro dev_rc staging_rc } }\" }" \
          https://config-database.whist.com/v1/graphql > response.json

          # Check if parseable JSON was returned
          if ! cat response.json | jq -e . > /dev/null 2>&1; then
            echo "Failed to parse the JSON from the config DB. Is it up?" && false
          fi

          # parse JSON into major.minor.micro-rc
          MAJOR=$(cat response.json | jq '.data.desktop_app_version[0].major')
          MINOR=$(cat response.json | jq '.data.desktop_app_version[0].minor')
          MICRO=$(cat response.json | jq '.data.desktop_app_version[0].micro')
          DEV_RC=$(cat response.json | jq '.data.desktop_app_version[0].dev_rc')
          STAGING_RC=$(cat response.json | jq '.data.desktop_app_version[0].staging_rc')

          # remove temporary JSON file
          rm response.json

          echo "Current prod version: $MAJOR.$MINOR.$MICRO"
          echo "Current staging version: $MAJOR.$MINOR.$MICRO-staging-rc.$STAGING_RC"
          echo "Current dev version: $MAJOR.$MINOR.$MICRO-dev-rc.$DEV_RC"

          # if dev or staging, increment RC by 1, else increment micro by 1 and set RC to 0
          if [[ "$BRANCH_NAME" == "prod" ]]; then
            echo 'Using prod configuration...'

            # increment version by 0.0.1
            NEW_MICRO=$(echo "print( ${MICRO} + 1)" | python)

            # set new Whist Desktop Browser version
            NEW_VERSION="${MAJOR}.${MINOR}.${NEW_MICRO}"

            # store NEW_MICRO in GITHUB_ENV to push to GraphQL API, and reset STAGING_RC and DEV_RC to 0
            # The spacing looks weird because the written file shouldn't respect the if-block indentation.
            cat >> $GITHUB_OUTPUT << EOF
          new_micro_version=${NEW_MICRO}
          new_staging_rc_version=0
          new_dev_rc_version=0
          EOF
          elif [[ "$BRANCH_NAME" == "staging" ]]; then
            echo 'Using staging configuration...'

            # increment version by staging-rc.1
            NEW_STAGING_RC=$(echo "print( ${STAGING_RC} + 1)" | python)

            # set temporary variable for upcoming micro version which is 1 ahead of current, since
            # staging/dev are release candiates (rc) for the next version
            # we don't push that micro version to GraphQL in staging/dev, only on prod when it becomes current
            UPCOMING_MICRO=$(echo "print( ${MICRO} + 1)" | python)

            # set new Whist Desktop Browser version
            NEW_VERSION="${MAJOR}.${MINOR}.${UPCOMING_MICRO}-staging-rc.${NEW_STAGING_RC}"

            # store NEW_STAGING_RC in GITHUB_ENV to push to GraphQL API
            echo "new_staging_rc_version=${NEW_STAGING_RC}" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH_NAME" == "dev" ]]; then
            echo 'Using dev configuration...'

            # increment version by dev-rc.1
            NEW_DEV_RC=$(echo "print( ${DEV_RC} + 1)" | python)

            # set temporary variable for upcoming micro version which is 1 ahead of current, since
            # staging/dev are release candiates (rc) for the next version
            # we don't push that micro version to GraphQL in staging/dev, only on prod when it becomes current
            UPCOMING_MICRO=$(echo "print( ${MICRO} + 1)" | python)

            # set new Whist Desktop Browser version [-x64/-arm64] gets appended depending on the OS architecture it is built on
            NEW_VERSION="${MAJOR}.${MINOR}.${UPCOMING_MICRO}-dev-rc.${NEW_DEV_RC}"

            # store NEW_DEV_RC in GITHUB_ENV to push to GraphQL API
            echo "new_dev_rc_version=${NEW_DEV_RC}" >> $GITHUB_OUTPUT
          else
            echo 'Error: Invalid branch' && false
          fi

          # store new Whist Desktop Browser version as GitHub step output to substitute in GitHub Release tag creation
          echo "New $BRANCH_NAME version: ${NEW_VERSION}"
          echo "release_version=${NEW_VERSION}" >> $GITHUB_OUTPUT

  #######################################################################################
  #######################################################################################

  # Whist Browser: Build and Publish to AWS S3
  # Build the Whist Browser for all supported OSes
  whist-browser-publish-build-s3:
    name: "Whist Browser: Build & Deploy Whist Browser"
    concurrency: whist-browser-publish-build-s3-${{ github.ref }}
    needs:
      [
        whist-publish-build-config,
        whist-browser-retrieve-version-number,
        terraform-deploy,
      ]
    # Only run whist-browser deployment if none of the previous steps failed
    if: always() && (needs.whist-browser-retrieve-version-number.result == 'success')
    uses: ./.github/workflows/browser-hybrid-publish-s3.yml
    with:
      branch: ${{ needs.whist-publish-build-config.outputs.branch }}
      release_version: ${{ needs.whist-browser-retrieve-version-number.outputs.release_version }}
      publish: ${{ needs.whist-publish-build-config.outputs.publish == 'true' }}
    secrets: inherit

  #######################################################################################
  #######################################################################################

  # Whist Browser: Update Version Number
  # Set the New Whist version number in our configuration database, through Hasura
  whist-browser-update-version-number:
    name: "Whist Browser: Set New Version Number in Config Database"
    runs-on: ubuntu-20.04
    concurrency: whist-browser-update-version-number-${{ github.ref }}
    needs:
      [
        whist-publish-build-config,
        whist-browser-retrieve-version-number,
        whist-browser-publish-build-s3,
      ]

    # Only run whist-browser deployment if none of the previous steps failed
    if: |
      always() &&
      (needs.whist-browser-retrieve-version-number.result == 'success') &&
      (needs.whist-browser-publish-build-s3.result == 'success')

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3

      - name: Setup Python-based notifications
        working-directory: .github/workflows/helpers
        run: ./notifications/setup_notifications.sh

      - name: Update Config Database version with the new version
        if: needs.whist-publish-build-config.outputs.publish == 'true'
        run: |
          BRANCH_NAME="${{ needs.whist-publish-build-config.outputs.branch }}"
          ACCESS_KEY='${{ secrets.HASURA_GRAPHQL_ACCESS_KEY_CONFIG }}'

          # curl GraphQL API to set new micro/staging_rc/dev_rc version number and git commit hash in config database
          if [[ "$BRANCH_NAME" == "prod" ]]; then
            curl -X POST \
            -H "Content-Type: application/json" \
            -H "X-Hasura-Admin-Secret: $ACCESS_KEY" \
            --data "{ \"query\": \"mutation { update_desktop_app_version_by_pk(pk_columns: {id: 1}, _set: {micro: ${{ needs.whist-browser-retrieve-version-number.outputs.new_micro_version }}, staging_rc: ${{ needs.whist-browser-retrieve-version-number.outputs.new_staging_rc_version }}, dev_rc: ${{ needs.whist-browser-retrieve-version-number.outputs.new_dev_rc_version }}, prod_commit_hash: \\\"${{ github.sha }}\\\"}) { id } }\" }" \
            https://config-database.whist.com/v1/graphql
          elif [[ "$BRANCH_NAME" == "staging" ]]; then
            curl -X POST \
            -H "Content-Type: application/json" \
            -H "X-Hasura-Admin-Secret: $ACCESS_KEY" \
            --data "{ \"query\": \"mutation { update_desktop_app_version_by_pk(pk_columns: {id: 1}, _set: {staging_rc: ${{ needs.whist-browser-retrieve-version-number.outputs.new_staging_rc_version }}, staging_commit_hash: \\\"${{ github.sha }}\\\"}) { id } }\" }" \
            https://config-database.whist.com/v1/graphql
          elif [[ "$BRANCH_NAME" == "dev" ]]; then
            curl -X POST \
            -H "Content-Type: application/json" \
            -H "X-Hasura-Admin-Secret: $ACCESS_KEY" \
            --data "{ \"query\": \"mutation { update_desktop_app_version_by_pk(pk_columns: {id: 1}, _set: {dev_rc: ${{ needs.whist-browser-retrieve-version-number.outputs.new_dev_rc_version }}, dev_commit_hash: \\\"${{ github.sha }}\\\"}) { id } }\" }" \
            https://config-database.whist.com/v1/graphql
          fi

      - name: Notify Slack on Publishing Whist Desktop Browser Success
        shell: python3 {0}
        if: needs.whist-browser-publish-build-s3.result == 'success'
        run: |
          if "prod" in "${{ needs.whist-publish-build-config.outputs.branch }}":
            WEBSITE_URL = "https://whist.com"
          elif "staging" in "${{ needs.whist-publish-build-config.outputs.branch }}":
            WEBSITE_URL = "https://staging.whist.com"
          else:
            WEBSITE_URL = "https://dev.whist.com"

          from notifications.slack_bot import slack_post
          TITLE = ":chromium: Windows & macOS Whist Desktop Browser Deployed :chromium:"
          BODY = f"Windows & macOS Whist Desktop Browser deployed via upload to AWS S3 on branch: `${{ needs.whist-publish-build-config.outputs.branch }}` - You can download them from {WEBSITE_URL} (<https://github.com/whisthq/whist/actions/runs/${{ github.run_id }} | see logs>)"
          SLACK_WEBHOOK = "${{ secrets[format('SLACK_HOOKS_ENDPOINT_{0}', needs.whist-publish-build-config.outputs.branch)] }}"
          slack_post(slack_webhook=SLACK_WEBHOOK, body=BODY, title=TITLE)

  #######################################################################################
  #######################################################################################

  # Scaling Service: Deploy & Upgrade Image
  # Push the scaling service subtree to the appropriate Heroku app. This will also
  # automatically start the image swapover event on the scaling service.
  scaling-service-deploy:
    name: "Scaling Service: Deploy & Upgrade Image"
    runs-on: ubuntu-20.04
    concurrency: scaling-service-deploy-${{ github.ref }}
    needs:
      [
        whist-publish-build-config,
        mandelboxes-publish-ghcr,
        amis-publish-aws,
        auth0-deploy-rules,
        terraform-deploy,
      ]

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # need to get full history for splitsh-lite

      - name: Setup Python-based notifications
        working-directory: .github/workflows/helpers
        run: ./notifications/setup_notifications.sh

      - name: Authenticate Heroku
        run: |
          cat > ~/.netrc << EOF
          machine api.heroku.com
            login developers@whist.com
            password ${{ secrets.HEROKU_DEVELOPER_API_KEY }}
          machine git.heroku.com
            login developers@whist.com
            password ${{ secrets.HEROKU_DEVELOPER_API_KEY }}
          EOF

      - name: Set up Go Environment
        uses: actions/setup-go@v3.3.0
        with:
          go-version: "1.19"

      - name: Authenticate Go commands with GitHub
        env:
          GH_USERNAME: ${{ secrets.GHA_USERNAME }}
          GH_PAT: ${{ secrets.GHA_PERSONAL_ACCESS_TOKEN }}
        run: git config --global url.https://$GH_USERNAME:$GH_PAT@github.com/.insteadOf https://github.com/

      - name: Add Heroku Remote
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_DEVELOPER_API_KEY }}
        run: |
          if [[ ${{ needs.whist-publish-build-config.outputs.branch }} == dev ]]; then
            HEROKU_APP_NAME=whist-dev-scaling-service
          elif [[ ${{ needs.whist-publish-build-config.outputs.branch }} == staging ]]; then
            HEROKU_APP_NAME=whist-staging-scaling-service
          elif [[ ${{ needs.whist-publish-build-config.outputs.branch }} == prod ]]; then
            HEROKU_APP_NAME=whist-prod-scaling-service
          else
            echo 'Error: Invalid branch' && false
          fi
          echo "HEROKU_APP_NAME=$HEROKU_APP_NAME" >> $GITHUB_ENV

          heroku git:remote --app $HEROKU_APP_NAME --remote heroku-whist-scaling-service

      - name: Configure git for Scaling Service deploy script
        run: |
          # Set the author of the deployment to Heroku to be Phil, since the GHA
          # Personal Access Token is under his account, for simplicity.
          git config user.name "philippemnoel"
          git config user.email "phil@whist.com"
          # Authenticate Git as Phil with GitHub
          git config credential.helper store
          git credential approve <<EOF
          protocol=https
          host=github.com
          username=phil@whist.com
          password=${{ secrets.GHA_PERSONAL_ACCESS_TOKEN }}
          EOF

      - name: Diff database schema with local schema.sql
        id: db-diff
        env:
          HEROKU_API_TOKEN: ${{ secrets.HEROKU_DEVELOPER_API_KEY }}
          HEROKU_APP_NAME: ${{ env.HEROKU_APP_NAME }}
        uses: ./.github/actions/db-migration

      - name: Write heroku.yml with yq
        uses: mikefarah/yq@master
        with:
          cmd: |
            yq -n '
            .build.config.GIT_COMMIT = "${{ github.sha }}" |
            .build.config.HEROKU_USER = "developers@whist.com" |
            .build.config.HEROKU_API_KEY = "${{ secrets.HEROKU_DEVELOPER_API_KEY }}" |
            .build.docker.web = "Dockerfile"' > backend/services/heroku.yml

      - name: Deploy the Scaling Service, Start image upgrade and Migrate database schema
        if: needs.whist-publish-build-config.outputs.publish == 'true'
        shell: bash --noprofile --norc -eo pipefail {0}
        working-directory: backend/services/scaling-service
        run: ./deploy.sh '${{ needs.amis-publish-aws.outputs.region_to_ami_map }}' '${{ env.HEROKU_APP_NAME }}' '${{ github.sha }}' '${{ steps.db-diff.outputs.code }}' '${{ steps.db-diff.outputs.diff }}'

      - name: Notify Slack on Database Migration Performed
        shell: python3 {0}
        run: |
          import os
          import sys
          import urllib.parse
          from notifications.slack_bot import slack_post

          # This should be set by backend/services/scaling-service/deploy.sh
          if os.environ.get("DB_MIGRATION_PERFORMED", "false") != "true":
            sys.exit(0)

          TITLE = ":construction: Database Migration Performed :construction:"
          BODY = f"Database Schema Migration performed on branch: `${{ needs.whist-publish-build-config.outputs.branch }}` (<https://github.com/whisthq/whist/actions/runs/${{ github.run_id }} | see logs>)"
          SLACK_WEBHOOK = "${{ secrets[format('SLACK_HOOKS_ENDPOINT_{0}', needs.whist-publish-build-config.outputs.branch)] }}"
          slack_post(slack_webhook=SLACK_WEBHOOK, body=BODY, title=TITLE)

      - name: Notify Slack on Successful Scaling Service Deploy
        if: needs.whist-publish-build-config.outputs.publish == 'true'
        shell: python3 {0}
        run: |
          from notifications.slack_bot import slack_post
          SCALING_SERVICE_URL = "${{ needs.whist-publish-build-config.outputs.scaling_service_url }}"
          TITLE = ":party_parrot: Scaling Service Successfully Deployed :party_parrot:"
          BODY = f"Scaling Service at {SCALING_SERVICE_URL} deployed and started image upgrade on: `${{ needs.whist-publish-build-config.outputs.branch }}` (<https://github.com/whisthq/whist/actions/runs/${{ github.run_id }} | see logs>)"
          SLACK_WEBHOOK = "${{ secrets[format('SLACK_HOOKS_ENDPOINT_{0}', needs.whist-publish-build-config.outputs.branch)] }}"
          slack_post(slack_webhook=SLACK_WEBHOOK, body=BODY, title=TITLE)

      - name: Notify Slack on Job Error
        if: failure()
        shell: python3 {0}
        run: |
          from notifications.slack_bot import slack_post
          SCALING_SERVICE_URL = "${{ needs.whist-publish-build-config.outputs.scaling_service_url }}"
          BODY = f"@releases :rotating_light: Scaling Service at {SCALING_SERVICE_URL} failed to deploy, investigate immediately :rotating_light: (<https://github.com/whisthq/whist/actions/runs/${{ github.run_id }} | see logs>)"
          SLACK_WEBHOOK = "${{ secrets[format('SLACK_HOOKS_ENDPOINT_{0}', needs.whist-publish-build-config.outputs.branch)] }}"
          slack_post(slack_webhook=SLACK_WEBHOOK, body=BODY)

  #######################################################################################
  #######################################################################################

  # Create GitHub Tag
  # Create a GitHub Tag when promoting to the `prod` branch
  # Runs if the entire deployment succeeds and the promotion is running on `prod`
  whist-create-github-release-tag:
    name: "Create GitHub Release Tag"
    runs-on: ubuntu-20.04
    needs:
      [
        whist-publish-build-config,
        auth0-deploy-rules,
        sentry-deploy-sentry-releases,
        terraform-deploy,
        mandelboxes-publish-ghcr,
        amis-publish-aws,
        scaling-service-deploy,
        whist-browser-retrieve-version-number,
        whist-browser-publish-build-s3,
        whist-browser-update-version-number,
      ]
    if: needs.whist-publish-build-config.outputs.publish == 'true' && contains(fromJSON('["prod"]'), needs.whist-publish-build-config.outputs.branch)

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3

      - name: Setup Python-based notifications
        working-directory: .github/workflows/helpers
        run: ./notifications/setup_notifications.sh

      - name: Retrieve Today's Date
        run: echo "date=$(date)" >> $GITHUB_ENV

      - name: Create GitHub Tag
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.whist-browser-retrieve-version-number.outputs.release_version }}
          body: Whist Production Release on ${{ env.date }}
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify Slack on Job Success
        shell: python3 {0}
        run: |
          from notifications.slack_bot import slack_post
          TITLE = ":github: Whist GitHub Release Completed :github:"
          BODY = "Deployment of Whist Version `v${{ needs.whist-browser-retrieve-version-number.outputs.release_version }}` on branch `${{ needs.whist-publish-build-config.outputs.branch }}` completed - See the generated GitHub Release here: https://github.com/whisthq/whist/releases/tag/v${{ needs.whist-browser-retrieve-version-number.outputs.release_version }} (<https://github.com/whisthq/whist/actions/runs/${{ github.run_id }} | see logs>)"
          SLACK_WEBHOOK = "${{ secrets[format('SLACK_HOOKS_ENDPOINT_{0}', needs.whist-publish-build-config.outputs.branch)] }}"
          slack_post(slack_webhook=SLACK_WEBHOOK, body=BODY, title=TITLE)

      - name: Notify Slack on Job Error
        if: failure()
        shell: python3 {0}
        run: |
          from notifications.slack_bot import slack_post
          BODY = "@releases :rotating_light: Deployment failed: could not create GitHub Release in `whist-create-github-release-tag` job, investigate immediately :rotating_light: (<https://github.com/whisthq/whist/actions/runs/${{ github.run_id }} | see logs>)"
          SLACK_WEBHOOK = "${{ secrets[format('SLACK_HOOKS_ENDPOINT_{0}', needs.whist-publish-build-config.outputs.branch)] }}"
          slack_post(slack_webhook=SLACK_WEBHOOK, body=BODY)
