# workflows/whist-build-and-deploy.yml
#
# Whist: Build & Deploy
# Build and deploy each of the relevant Whist projects for our production, staging and dev environments

name: "Whist: Build & Deploy"

on:
  push:
    branches:
      - prod
      - staging
      - dev
    paths-ignore:
      - "README.md"
      - "**/README.md"
      - ".github/workflows/README.md"
  workflow_dispatch:
    inputs:
      target:
        description: |
          The target deployment environment to which the chosen ref
          should be deployed. The target deployment environment
          should be one of "dev", "staging", or "prod". The default
          target deployment environment matches the branch that is
          being deployed.
        required: false
      dry-run:
        description: |
          A boolean indicating whether or not to perform a dry run
          deployment. If this boolean is set, code will be built, but
          not deployed.
        required: true
        # Avoid accidental mistakes by doing dry run deployments by
        # default
        default: true

# This guarantees that if you push many commits to the same PR, only the latest
# commit will get run (others get cancelled)
concurrency:
  group: whist-build-and-deploy-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  # Configure Jobs
  # Detect the branch using regex matching and store as an output to regulate downstream actions.
  # Access branch with `whist-publish-build-config.outputs.branch`.
  whist-publish-build-config:
    name: "Configure Jobs"
    runs-on: ubuntu-20.04
    outputs:
      branch: ${{ steps.set-deploy-environment.outputs.environment }}
      publish: ${{ steps.detect-publish.outputs.publish }}
      scaling_service_url: ${{ steps.set-backend-services-urls.outputs.scaling_service_url }}
      auth0-domain: ${{ steps.set-deploy-environment.outputs.auth0-domain }}
      auth0-client-id: ${{ steps.set-deploy-environment.outputs.auth0-client-id }}
      auth0-client-secret-key: ${{ steps.set-deploy-environment.outputs.auth0-client-secret-key }}
    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Get the whole git history

      - name: Setup Python-based notifications
        working-directory: .github/workflows/helpers
        run: ./notifications/setup_notifications.sh

      - name: Set deploy environment
        id: set-deploy-environment
        if: ${{ github.event_name == 'push' || contains(fromJSON('["", "dev", "staging", "prod"]'), github.event.inputs.target) }}
        uses: ./.github/actions/set-environment
        with:
          # Deploy the git ref corresponding to the event that
          # triggered the workflow unless the event that triggered the
          # workflow was a manual workflow_dispatch event. In such a
          # case, the branch specified by the target input should be
          # deployed.
          ref: ${{ github.event.inputs.target || github.ref }}

      - name: Set backend services URL based on Git Branch (prod, staging, dev)
        id: set-backend-services-urls
        run: |
          # Grab the name of the deployment environment from set-deploy-environment
          BRANCH_NAME=${{ steps.set-deploy-environment.outputs.environment }}
          if [ "$BRANCH_NAME" == "prod" ]; then
            SCALING_SERVICE_URL=https://prod-scaling-service.whist.com
          elif [ "$BRANCH_NAME" == "staging" ]; then
            SCALING_SERVICE_URL=https://staging-scaling-service.whist.com
          else
            SCALING_SERVICE_URL=https://dev-scaling-service.whist.com
          fi
          echo "scaling_service_url is set to: $SCALING_SERVICE_URL"
          echo "::set-output name=scaling_service_url::$SCALING_SERVICE_URL"

      - name: Detect Whether to Publish the Job(s) or Not
        id: detect-publish
        run: |
          trap 'echo "::error::Command '\''$BASH_COMMAND'\'' exited with code $?"' ERR

          ref="${{ github.ref }}"
          target="${{ steps.set-deploy-environment.outputs.environment }}"

          case "$ref" in
            *prod|*staging|*dev)
              # Get the short branch name for dev, staging, and
              # prod by stripping away any leading characters. For
              # example, "/refs/heads/dev" becomes "dev".
              branch="${ref##*/}" ;;
            *)
                branch="$ref" ;;
          esac

          # We are only allowed to deploy a branch to its corresponding
          # target deployment environment. In other words, we can only
          # deploy dev to dev, staging to staging, and prod to prod.
          # Feature branches are not deployable.
          deployable="$([ "$branch" != "$target" ] || echo "1")"

          if [ "${{ github.event_name }}" = "push" ]; then
            # If the workflow was triggered by a push event, the
            # dry-run input is not available. We can assert that the
            # push event was triggered on either dev, staging, or
            # prod, and then set the dry run flag to false.
            [[ "$branch" =~ dev|staging|prod ]]
            dry_run="false"
          else
            dry_run="${{ github.event.inputs.dry-run }}"

            # If we're trying to perform a real deployment, but the
            # current configuration is not deployable, abort.
            test "$deployable" -o "$dry_run" != "false"
          fi

          # Publish the job outputs iff this is not a dry run and
          # the git branch that we're deploying matches the target
          # deployment environment.
          publish="$([ "$deployable" -a "$dry_run" = "false" ] && echo "true" || echo "false")"

          echo "Publish is set to: $publish"
          echo "::set-output name=publish::$publish"

      - name: Notify Slack on Job Error
        if: failure()
        shell: python3 {0}
        run: |
          # Retrieve Slack webhook
          if "prod" in "${{ steps.set-deploy-environment.outputs.branch }}":
            SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_PROD }}"
          elif "staging" in "${{ steps.set-deploy-environment.outputs.branch }}":
            SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_STAGING }}"
          else:
            SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_DEV }}"

          from notifications.slack_bot import slack_post
          BODY = "@releases :rotating_light: Deployment failed: could not generate configs for deployment in `whist-publish-build-config` job, investigate immediately :rotating_light: (<https://github.com/whisthq/whist/actions/runs/${{ github.run_id }} | see logs>)"
          slack_post(slack_webhook=SLACK_WEBHOOK, body=BODY)

  #######################################################################################
  #######################################################################################

  # Auth0 Rules: Build & Deploy Auth0 Rules to Auth0 Tenant
  # Build and deploy the Auth0 rules to the Whist Auth0 Tenant platform, with
  # which our frontend interfaces with for authenticating users through Auth0
  # Runs if config succeeds and branch is in ["prod", "staging", "dev"]
  auth0-deploy-rules:
    name: "Deploy Auth0 Rules"
    runs-on: ubuntu-20.04
    concurrency: auth0-deploy-rules-${{ github.ref }}
    needs: [whist-publish-build-config]

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3

      - name: Setup Python-based notifications
        working-directory: .github/workflows/helpers
        run: ./notifications/setup_notifications.sh

      - name: Set up NodeJS Environment
        uses: actions/setup-node@v3.3.0
        with:
          node-version: "16"

      - name: Install Development Dependencies
        working-directory: backend/auth0
        run: yarn install

      - name: Deploy Changes to the Auth0 Tenant
        working-directory: backend/auth0
        env:
          AUTH0_CLIENT_SECRET: ${{ secrets[format('AUTH0_GHA_CLIENT_SECRET_{0}', needs.whist-publish-build-config.outputs.branch)] }}
          GOOGLE_OAUTH_SECRET: ${{ secrets.GOOGLE_OAUTH_SECRET }}
          APPLE_OAUTH_SECRET: ${{ secrets.APPLE_OAUTH_SECRET }}
        run: yarn deploy:${{ needs.whist-publish-build-config.outputs.branch }}

      - name: Notify Slack on Job Success
        if: needs.whist-publish-build-config.outputs.publish == 'true'
        shell: python3 {0}
        run: |
          # Retrieve Slack webhook
          if "prod" in "${{ needs.whist-publish-build-config.outputs.branch }}":
            SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_PROD }}"
          elif "staging" in "${{ needs.whist-publish-build-config.outputs.branch }}":
            SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_STAGING }}"
          else:
            SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_DEV }}"

          from notifications.slack_bot import slack_post
          TITLE = ":auth0: Auth0 Rules Deployed :auth0:"
          BODY = f"Auth0 Rules deployed to Auth0 Tenant on branch: `${{ needs.whist-publish-build-config.outputs.branch }}` (<https://github.com/whisthq/whist/actions/runs/${{ github.run_id }} | see logs>)"
          slack_post(slack_webhook=SLACK_WEBHOOK, body=BODY, title=TITLE)

      - name: Notify Slack on Job Error
        if: failure()
        shell: python3 {0}
        run: |
          # Retrieve Slack webhook
          if "prod" in "${{ needs.whist-publish-build-config.outputs.branch }}":
            SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_PROD }}"
          elif "staging" in "${{ needs.whist-publish-build-config.outputs.branch }}":
            SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_STAGING }}"
          else:
            SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_DEV }}"

          from notifications.slack_bot import slack_post
          BODY = "@releases :rotating_light: Deployment failed: could not deploy Auth0 Rules in `auth0-deploy-rules` job, investigate immediately :rotating_light: (<https://github.com/whisthq/whist/actions/runs/${{ github.run_id }} | see logs>)"
          slack_post(slack_webhook=SLACK_WEBHOOK, body=BODY)

  #######################################################################################
  #######################################################################################

  # Terraform: Deploy infrastructure
  # 1 - Setup Terraform and plan
  # 2 - Run Terraform apply to deploy infrastructure.
  terraform-deploy:
    name: Deploy Terraform
    runs-on: ubuntu-20.04
    needs: [whist-publish-build-config]
    env:
      # Set AWS credentials for Terraform
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_GITHUB_ACTIONS_USER_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_GITHUB_ACTIONS_USER_SECRET_ACCESS_KEY }}
    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3

      - name: Setup Python-based notifications
        working-directory: .github/workflows/helpers
        run: ./notifications/setup_notifications.sh

      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v2

      - name: Initialize Terraform
        working-directory: backend/infrastructure
        run: cd "$GITHUB_REF_NAME" && terraform init -input=false

      - name: Terraform Plan
        working-directory: backend/infrastructure
        run: cd "$GITHUB_REF_NAME" && terraform plan -input=false -out=tfplan

      - name: Terraform Apply
        if: needs.whist-publish-build-config.outputs.publish == 'true'
        working-directory: backend/infrastructure
        run: cd "$GITHUB_REF_NAME" && terraform apply -input=false -auto-approve tfplan

      - name: Notify Slack on Successful Terraform Apply
        if: needs.whist-publish-build-config.outputs.publish == 'true'
        shell: python3 {0}
        run: |
          # Retrieve Slack webhook
          if "prod" in "${{ needs.whist-publish-build-config.outputs.branch }}":
            SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_PROD }}"
          elif "staging" in "${{ needs.whist-publish-build-config.outputs.branch }}":
            SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_STAGING }}"
          else:
            SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_DEV }}"

          from notifications.slack_bot import slack_post
          TITLE = ":earth_americas: Infrastructure successfully deployed :earth_americas:"
          BODY = f"Infrastructure deployed with Terraform: `${{ needs.whist-publish-build-config.outputs.branch }}` (<https://github.com/whisthq/whist/actions/runs/${{ github.run_id }} | see logs>)"
          slack_post(slack_webhook=SLACK_WEBHOOK, body=BODY, title=TITLE)

      - name: Notify Slack on Job Error
        if: failure()
        shell: python3 {0}
        run: |
          # Retrieve Slack webhook
          if "prod" in "${{ needs.whist-publish-build-config.outputs.branch }}":
            SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_PROD }}"
          elif "staging" in "${{ needs.whist-publish-build-config.outputs.branch }}":
            SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_STAGING }}"
          else:
            SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_DEV }}"

          from notifications.slack_bot import slack_post
          SCALING_SERVICE_URL = "${{ needs.whist-publish-build-config.outputs.scaling_service_url }}"
          BODY = f"@releases :rotating_light: Infrastructure failed to deploy, investigate immediately :rotating_light: (<https://github.com/whisthq/whist/actions/runs/${{ github.run_id }} | see logs>)"
          slack_post(slack_webhook=SLACK_WEBHOOK, body=BODY)

  #######################################################################################
  #######################################################################################

  # Mandelboxes: Publish to GHCR
  # This job builds and publishes the mandelboxes to GHCR so that they can be pulled from our instances.
  # We invoke a separate workflow file to keep things nicely factored out.
  #
  # Runs if config succeeds and branch is in ["dev", "staging", "prod"]
  mandelboxes-publish-ghcr:
    name: "Mandelboxes: Publish to GHCR"
    needs: [whist-publish-build-config]
    concurrency: mandelboxes-publish-ghcr-${{ github.ref }}
    uses: ./.github/workflows/mandelboxes-publish-ghcr.yml
    with:
      branch: ${{ needs.whist-publish-build-config.outputs.branch }}
      publish: ${{ needs.whist-publish-build-config.outputs.publish == 'true' }}
    secrets:
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      GHA_USERNAME: ${{ secrets.GHA_USERNAME }}
      GHA_PERSONAL_ACCESS_TOKEN: ${{ secrets.GHA_PERSONAL_ACCESS_TOKEN }}
      AWS_GITHUB_ACTIONS_USER_ACCESS_KEY_ID: ${{ secrets.AWS_GITHUB_ACTIONS_USER_ACCESS_KEY_ID }}
      AWS_GITHUB_ACTIONS_USER_SECRET_ACCESS_KEY: ${{ secrets.AWS_GITHUB_ACTIONS_USER_SECRET_ACCESS_KEY }}
      SLACK_HOOKS_ENDPOINT_DEV: ${{ secrets.SLACK_HOOKS_ENDPOINT_DEV }}
      SLACK_HOOKS_ENDPOINT_STAGING: ${{ secrets.SLACK_HOOKS_ENDPOINT_STAGING }}
      SLACK_HOOKS_ENDPOINT_PROD: ${{ secrets.SLACK_HOOKS_ENDPOINT_PROD }}

  #######################################################################################
  #######################################################################################

  # AMIs: Build & Publish Whist AMIs
  # This job builds and publishes the Whist Linux AMI, containing the pre-built Whist Host service,
  # to all supported AWS EC2 regions.
  #
  # Runs if config succeeds, terraform has deployed, and branch is in ["dev", "staging", "prod"]
  amis-publish-aws:
    name: "AMIs: Publish to AWS"
    runs-on: ubuntu-20.04
    concurrency: amis-publish-aws-${{ github.ref }}
    needs: [whist-publish-build-config, terraform-deploy]
    outputs:
      region_to_ami_map: ${{ steps.build-new-amis.outputs.region_to_ami_map }}

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3

      - name: Configure AWS CLI # To get and install GRID driver
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_GITHUB_ACTIONS_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_GITHUB_ACTIONS_USER_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set up Python Environment
        uses: actions/setup-python@v4.0.0
        with:
          python-version: "3.10.4"

      - name: Setup Python-based notifications # slack notifications need to be set up before steps that can lead to errors
        working-directory: .github/workflows/helpers
        run: ./notifications/setup_notifications.sh "true"

      ##########################################################################################
      ########################### Stage 1 - Build Backend Services #############################

      - name: Set up Go Environment
        uses: actions/setup-go@v3.2.0
        with:
          go-version: "1.18"

      - name: Authenticate Go commands with GitHub
        env:
          GH_USERNAME: ${{ secrets.GHA_USERNAME }}
          GH_PAT: ${{ secrets.GHA_PERSONAL_ACCESS_TOKEN }}
        run: git config --global url.https://$GH_USERNAME:$GH_PAT@github.com/.insteadOf https://github.com/

      - name: Build Backend Services
        working-directory: backend/services
        env:
          HEROKU_USER: developers@whist.com
          HEROKU_APIKEY: ${{ secrets.HEROKU_DEVELOPER_API_KEY }}
        run: make build

      ##########################################################################################
      ####################### Stage 2 - Build & Publish AMIs to AWS EC2 ########################

      - name: Set Host Service APP_ENV based on Git Branch (File gets read by host-service.service)
        working-directory: host-setup
        run: |
          BRANCH_NAME="${{ needs.whist-publish-build-config.outputs.branch }}"

          if [ "$BRANCH_NAME" == "prod" ]; then
            echo 'APP_ENV=PROD' > app_env.env
            echo 'LOGZIO_SHIPPING_TOKEN=${{ secrets.LOGZ_SHIPPING_TOKEN_PROD }}' >> app_env.env
          elif [ "$BRANCH_NAME" == "staging" ]; then
            echo 'APP_ENV=STAGING' > app_env.env
            echo 'LOGZIO_SHIPPING_TOKEN=${{ secrets.LOGZ_SHIPPING_TOKEN_STAGING }}' >> app_env.env
          else
            echo 'APP_ENV=DEV' > app_env.env
            echo 'LOGZIO_SHIPPING_TOKEN=${{ secrets.LOGZ_SHIPPING_TOKEN_DEV }}' >> app_env.env
          fi
          echo 'SENTRY_DSN=https://774bb2996acb4696944e1c847c41773c@o400459.ingest.sentry.io/5461239' >> app_env.env
          echo 'USE_PROD_LOGGING=true' >> app_env.env
          cat app_env.env

      - name: Set Github account, PAT and commit hash (File gets read by userdata script)
        working-directory: host-setup
        run: |
          echo 'GH_USERNAME=${{ secrets.GHA_USERNAME }}' >> app_env.env
          echo 'GH_PAT=${{ secrets.GHCR_PACKAGES_READ_ONLY_PAT }}' >> app_env.env
          echo 'GIT_BRANCH=${{ needs.whist-publish-build-config.outputs.branch }}' >> app_env.env
          echo 'GIT_HASH=${{ github.sha }}' >> app_env.env

      # This spins up an AWS EC2 instance to create the AMI, and then deletes it
      # It *could* fail if we are maxed-out in number AWS vCPUs allowed in aws_new_ami_source_region
      - name: Generate Packer Configuration, Create New AMI, Update Region, and Update Appropriate Database
        if: needs.whist-publish-build-config.outputs.publish == 'true'
        id: build-new-amis
        working-directory: host-setup
        shell: python3 {0}
        run: |
          import os, json, datetime, subprocess

          # Get the current date and time
          date_str = datetime.datetime.utcnow().strftime("%Y-%m-%d-%H-%M-%S")

          # Generate the Packer configuration variables
          data = {}
          data["git_branch"] = "${{ needs.whist-publish-build-config.outputs.branch }}"
          data["git_hash"] = "${{ github.sha }}"
          data["access_key"] = "${{ secrets.AWS_GITHUB_ACTIONS_USER_ACCESS_KEY_ID }}"
          data["secret_key"] = "${{ secrets.AWS_GITHUB_ACTIONS_USER_SECRET_ACCESS_KEY }}"
          data["ami_name"] = f"whist-ami-${{ needs.whist-publish-build-config.outputs.branch }}-${{ github.sha }}-{date_str}"

          # List all AWS regions we support
          supported_aws_regions = [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "ca-central-1",
            "sa-east-1",
            "eu-north-1",
            "eu-south-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "me-south-1",
            "ap-east-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-southeast-3",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "af-south-1",
          ]

          # Set Logz.io shipping token and regions to which to deploy the new AMI based on the environment.
          # For internal environments (dev, staging), we only clone our new AMI to us-east-1 and us-west-1, to save on
          # costs since we don't have/need test users in other regions.
          if data["git_branch"] == "prod":
            data["mandelbox_logz_shipping_token"] = "${{ secrets.LOGZ_SHIPPING_TOKEN_PROD }}"
            data["destination_regions"] = supported_aws_regions
          elif data["git_branch"] == "staging":
            data["mandelbox_logz_shipping_token"] = "${{ secrets.LOGZ_SHIPPING_TOKEN_STAGING }}"
            data["destination_regions"] = ["us-east-1"]
          elif data["git_branch"] == "dev":
            data["mandelbox_logz_shipping_token"] = "${{ secrets.LOGZ_SHIPPING_TOKEN_DEV }}"
            data["destination_regions"] = ["us-east-1"]
          else:
            raise Exception(f"Invalid environment/git branch: {data['git_branch']}")

          # Packer isn't able to loop over AWS Regions by itself. To work around this, we need to loop over all AWS regions
          # regions ourselves, until one of them has capacity (only returning an error if there is no capacity in any of the
          # regions). We could eventually also manually loop over availability zones, but this is probably not necessary as
          # Packer will attempt to autoassign the most optimal availibity zone for the Packer instance.
          for aws_region in supported_aws_regions:
            data["initial_region"] = aws_region

            # Write the generated Packer variables to a file
            fp = open("packer_vars.json", "w")
            json.dump(data, fp)
            fp.close()

            # Display file content, for debugging purposes
            subprocess.run("cat packer_vars.json && echo '\n\n'", shell=True)

            # Validate the Packer variables file for syntax errors
            subprocess.run("packer validate -var-file=packer_vars.json ami_config.pkr.hcl && echo '\n\n'", shell=True)

            # Generate AMIs via Packer
            # Stdout will be shared with the subprocess so that we can see what is happening
            # If you need to debug Packer, add `PACKER_LOG=1` before `packer build ...` in the subprocess.run command
            subprocess.run("packer build -var-file=packer_vars.json ami_config.pkr.hcl", shell=True)

            # If Packer succeeds, it will create `manifest.json`, which is our cue to stop trying other regions
            if os.path.exists("manifest.json"):
              print("Packer succeeded, exiting AWS Regions zones loop...")
              break

          # Assert that `manifest.json` exists after looping over all AWS Regions to fail the workflow in the event that
          # we couldn't get capacity in any of the AWS regions
          assert os.path.exists("manifest.json")

          # Save Packer output to a JSON, to use for creating new instances with the newly created AMI
          fp = open("manifest.json", "r")
          data = json.load(fp)
          fp.close()
          print("Printing Packer output: " + str(data))

          # Extract relevant data for creating new instances with this AMI
          new_ami_ids = data["builds"][0]["artifact_id"]
          region_ami_pairs = new_ami_ids.split(",")

          REGION_TO_AMI_MAP = dict()
          for region_ami_pair in region_ami_pairs:
            region_name, ami = region_ami_pair.split(":")
            REGION_TO_AMI_MAP[region_name] = ami

          # export REGION_TO_AMI_MAP
          # the .replace(...) makes all occurrences of a double quote " be prefixed by a \
          # it is best to explain via example:
          # >>> data = {'key': "val'ue"} # tricky example because we have single and double quotes
          # >>> print(json.dumps(data).replace('"', '\\"'))
          # {\"key\": \"val'ue\"} # this is saved as an output
          # LATER, when we need to use this output
          # >>> data = json.loads("{{ OUTPUT }}") # OUTPUT expands to {\"key\": \"val'ue\"}
          # >>> print(data)
          # {'key': "val'ue"}
          # if I did not add the \, then the json library would get confused by trying to read this:
          # >>> json.loads("{"key": "val'ue"}") # fails, we need the \ prefix
          region_to_ami_map_str = json.dumps(REGION_TO_AMI_MAP).replace('"', '\\"')

          print(f"Region to AMI map is set to {region_to_ami_map_str}")
          print(f"::set-output name=region_to_ami_map::{region_to_ami_map_str}")

      ##########################################################################################
      ############################# Stage 3 - Slack Notifications ##############################

      # Notify Slack after building and deploying the Whist AMI to all supported AWS regions.
      - name: Notify Slack on Job Successs
        if: needs.whist-publish-build-config.outputs.publish == 'true'
        shell: python3 {0}
        run: |
          # Retrieve Slack webhook
          if "prod" in "${{ needs.whist-publish-build-config.outputs.branch }}":
            SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_PROD }}"
          elif "staging" in "${{ needs.whist-publish-build-config.outputs.branch }}":
            SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_STAGING }}"
          else:
            SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_DEV }}"

          from notifications.slack_bot import slack_post
          TITLE = ":package: AMIs Deployed :package:"
          BODY = "AMIs deployed to all supported AWS regions on branch: `${{ needs.whist-publish-build-config.outputs.branch }}` (<https://github.com/whisthq/whist/actions/runs/${{ github.run_id }} | see logs>)"
          slack_post(slack_webhook=SLACK_WEBHOOK, body=BODY, title=TITLE)

      - name: Notify Slack on Job Error
        if: failure()
        shell: python3 {0}
        run: |
          # Retrieve Slack webhook
          if "prod" in "${{ needs.whist-publish-build-config.outputs.branch }}":
            SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_PROD }}"
          elif "staging" in "${{ needs.whist-publish-build-config.outputs.branch }}":
            SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_STAGING }}"
          else:
            SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_DEV }}"

          from notifications.slack_bot import slack_post
          BODY = "@releases :rotating_light: Deployment failed: could not deploy AMIs in the `amis-publish-aws` job, investigate immediately :rotating_light: (<https://github.com/whisthq/whist/actions/runs/${{ github.run_id }} | see logs>)"
          slack_post(slack_webhook=SLACK_WEBHOOK, body=BODY)

  #######################################################################################
  #######################################################################################

  # Scaling Service: Deploy & Upgrade Image
  # Push the scaling service subtree to the appropriate Heroku app. This will also
  # automatically start the image swapover event on the scaling service.
  scaling-service-deploy:
    name: "Scaling Service: Deploy & Upgrade Image"
    runs-on: ubuntu-20.04
    concurrency: scaling-service-deploy-${{ github.ref }}
    needs:
      [
        whist-publish-build-config,
        mandelboxes-publish-ghcr,
        amis-publish-aws,
        auth0-deploy-rules,
        terraform-deploy,
      ]

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # need to get full history for splitsh-lite

      - name: Setup Python-based notifications
        working-directory: .github/workflows/helpers
        run: ./notifications/setup_notifications.sh

      - name: Authenticate Heroku
        run: |
          cat > ~/.netrc << EOF
          machine api.heroku.com
            login developers@whist.com
            password ${{ secrets.HEROKU_DEVELOPER_API_KEY }}
          machine git.heroku.com
            login developers@whist.com
            password ${{ secrets.HEROKU_DEVELOPER_API_KEY }}
          EOF

      - name: Set up Go Environment
        uses: actions/setup-go@v3.2.0
        with:
          go-version: "1.18"

      - name: Authenticate Go commands with GitHub
        env:
          GH_USERNAME: ${{ secrets.GHA_USERNAME }}
          GH_PAT: ${{ secrets.GHA_PERSONAL_ACCESS_TOKEN }}
        run: git config --global url.https://$GH_USERNAME:$GH_PAT@github.com/.insteadOf https://github.com/

      - name: Build Backend Services
        working-directory: backend/services
        env:
          HEROKU_USER: developers@whist.com
          HEROKU_APIKEY: ${{ secrets.HEROKU_DEVELOPER_API_KEY }}
        run: make build

      - name: Add Heroku Remote
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_DEVELOPER_API_KEY }}
        run: |
          if [[ ${{ needs.whist-publish-build-config.outputs.branch }} == dev ]]; then
            HEROKU_APP_NAME=whist-dev-scaling-service
          elif [[ ${{ needs.whist-publish-build-config.outputs.branch }} == staging ]]; then
            HEROKU_APP_NAME=whist-staging-scaling-service
          elif [[ ${{ needs.whist-publish-build-config.outputs.branch }} == prod ]]; then
            HEROKU_APP_NAME=whist-prod-scaling-service
          else
            echo 'Error: Invalid branch' && false
          fi
          echo "HEROKU_APP_NAME=$HEROKU_APP_NAME" >> $GITHUB_ENV

          heroku git:remote --app $HEROKU_APP_NAME --remote heroku-whist-scaling-service

      - name: Configure git for Scaling Service deploy script
        run: |
          # Set the author of the commit in whisthq/docs to be the user
          # who just pushed to the dev branch of the monorepo.
          git config user.name "${{ github.event.pusher.name }}"
          git config user.email "${{ github.event.pusher.email }}"
          # Authenticate Git as Phil with GitHub
          git config credential.helper store
          git credential approve <<EOF
          protocol=https
          host=github.com
          username=phil@whist.com
          password=${{ secrets.GHA_PERSONAL_ACCESS_TOKEN }}
          EOF

      - name: Diff database schema with local schema.sql
        id: db-diff
        env:
          HEROKU_API_TOKEN: ${{ secrets.HEROKU_DEVELOPER_API_KEY }}
          HEROKU_APP_NAME: ${{ env.HEROKU_APP_NAME }}
        uses: ./.github/actions/db-migration

      - name: Deploy the Scaling Service,  Start image upgrade and Migrate database schema
        if: needs.whist-publish-build-config.outputs.publish == 'true'
        shell: bash --noprofile --norc -eo pipefail {0}
        working-directory: backend/services/scaling-service
        run: ./deploy.sh "${{ needs.amis-publish-aws.outputs.region_to_ami_map }}" ${{ env.HEROKU_APP_NAME }} ${{ github.sha }} '${{ steps.db-diff.outputs.code }}' '${{ steps.db-diff.outputs.diff }}'

      - name: Notify Slack on Database Migration Performed
        shell: python3 {0}
        run: |
          import os
          import sys
          import urllib.parse
          from notifications.slack_bot import slack_post

          # This should be set by backend/services/scaling-service/deploy.sh
          if os.environ.get("DB_MIGRATION_PERFORMED", "false") != "true":
            sys.exit(0)

          # Retrieve Slack webhook
          if "prod" in "${{ needs.whist-publish-build-config.outputs.branch }}":
            SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_PROD }}"
          elif "staging" in "${{ needs.whist-publish-build-config.outputs.branch }}":
            SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_STAGING }}"
          else:
            SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_DEV }}"

          TITLE = ":construction: Database Migration Performed :construction:"
          BODY = f"Database Schema Migration performed on branch: `${{ needs.whist-publish-build-config.outputs.branch }}` (<https://github.com/whisthq/whist/actions/runs/${{ github.run_id }} | see logs>)"
          slack_post(slack_webhook=SLACK_WEBHOOK, body=BODY, title=TITLE)

      - name: Notify Slack on Successful Scaling Service Deploy
        if: needs.whist-publish-build-config.outputs.publish == 'true'
        shell: python3 {0}
        run: |
          # Retrieve Slack webhook
          if "prod" in "${{ needs.whist-publish-build-config.outputs.branch }}":
            SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_PROD }}"
          elif "staging" in "${{ needs.whist-publish-build-config.outputs.branch }}":
            SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_STAGING }}"
          else:
            SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_DEV }}"

          from notifications.slack_bot import slack_post
          SCALING_SERVICE_URL = "${{ needs.whist-publish-build-config.outputs.scaling_service_url }}"
          TITLE = ":party_parrot: Scaling Service Successfully Deployed :party_parrot:"
          BODY = f"Scaling Service at {SCALING_SERVICE_URL} deployed and started image upgrade on: `${{ needs.whist-publish-build-config.outputs.branch }}` (<https://github.com/whisthq/whist/actions/runs/${{ github.run_id }} | see logs>)"
          slack_post(slack_webhook=SLACK_WEBHOOK, body=BODY, title=TITLE)

      - name: Notify Slack on Job Error
        if: failure()
        shell: python3 {0}
        run: |
          # Retrieve Slack webhook
          if "prod" in "${{ needs.whist-publish-build-config.outputs.branch }}":
            SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_PROD }}"
          elif "staging" in "${{ needs.whist-publish-build-config.outputs.branch }}":
            SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_STAGING }}"
          else:
            SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_DEV }}"

          from notifications.slack_bot import slack_post
          SCALING_SERVICE_URL = "${{ needs.whist-publish-build-config.outputs.scaling_service_url }}"
          BODY = f"@releases :rotating_light: Scaling Service at {SCALING_SERVICE_URL} failed to deploy, investigate immediately :rotating_light: (<https://github.com/whisthq/whist/actions/runs/${{ github.run_id }} | see logs>)"
          slack_post(slack_webhook=SLACK_WEBHOOK, body=BODY)
