# workflows/database-migration-push.yml
#
# Main Webserver: Migrate Database
# Compare the schema of the live database with
# main-webserver/db-migration/schema.sql
# If schema changes are detected, perform migration

name: "Database Migration Push"

on:
    push:
        branches:
            - prod
            - staging
            - dev
        paths:
            - "main-webserver/db_migration/schema.sql"
            - ".github/workflows/database-migration-push.yml"
    workflow_dispatch:

jobs:
    run-migra-diff:
        name: Run Migra Diff
        runs-on: ubuntu-20.04

        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # needed for migra diff tool
            GITHUB_SHA: ${{ github.sha }}
            GITHUB_SHA_URL: "https://github.com/fractal/fractal/commit/"
            HEROKU_DB_KEY: "DATABASE_URL"
            HEROKU_API_TOKEN: ${{ secrets.HEROKU_DEVELOPER_API_KEY }} # needed to retrieve config vars from Heroku
            SERVER_DEV: "fractal-dev-server"
            SERVER_STAGING: "fractal-staging-server"
            SERVER_PROD: "fractal-prod-server"
            SCRIPT_DIFF: "main-webserver/db_migration/schema_diff.py"
            PATH_HELPERS: ".github/workflows/helpers"
            PATH_SCRIPTS: "main-webserver/db_migration"
            PATH_CURRENT: "../temporary_db_schema.sql"
            PATH_MERGING: "main-webserver/db_migration/schema.sql"
            PATH_DIFF: "../temporary_diff_file.sql"

        steps:
            - name: Checkout Git Repository
              uses: actions/checkout@v2

            - name: Setup Python-based notifications
              working-directory: .github/workflows/helpers
              run: |
                  pip install -r notifications/requirements.txt
                  # allows us to import from notifications package anywhere in this job
                  echo "PYTHONPATH=$PYTHONPATH:$(pwd)" >> $GITHUB_ENV

            # A non-pull_request event does not have a github.base_ref set
            # We have to dig into the event object, which has a ref string
            # such as "refs/heads/dev". We trim "refs/heads/" to get the
            # substring that is the name of the branch.
            - name: Set GITHUB_BRANCH environment variable
              run: |
                  if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
                      echo "GITHUB_BRANCH=${{ github.event.repository.default_branch }}" >> $GITHUB_ENV
                  else
                      ref="${{ github.event.ref }}"
                      echo "GITHUB_BRANCH=${ref:11}" >> $GITHUB_ENV
                  fi

            - name: Set Slack channel based on branch
              run: echo "SLACK_CHANNEL=alerts-${{ env.GITHUB_BRANCH }}" >> $GITHUB_ENV

            - name: Log GitHub context
              shell: python3 {0}
              run: |
                  import os
                  context = """
                  GITHUB CONTEXT:
                  ${{ toJSON(github) }}
                  JOB CONTEXT:
                  ${{ toJSON(job) }}
                  STEPS CONTEXT:
                  ${{ toJSON(steps) }}
                  RUNNER CONTEXT:
                  ${{ toJSON(runner) }}
                  STRATEGY CONTEXT:
                  ${{ toJSON(strategy) }}
                  MATRIX CONTEXT:
                  ${{ toJSON(matrix) }}
                  """
                  print("GITHUB_BRANCH VARIABLE:")
                  print(os.environ.get("GITHUB_BRANCH"))
                  print(context.strip("\n"))

            - name: Upgrade pip
              working-directory: main-webserver
              run: pip3 install --upgrade pip

            - name: Install Python dependencies
              working-directory: main-webserver
              run: |
                  pip3 install \
                  SQLAlchemy==1.3.23 \
                  docker==4.4.4 \
                  migra==3.0.1615968929 \
                  pretty-errors==1.2.19 \
                  toolz==0.11.1 \
                  rich==9.13.0 \
                  psycopg2==2.8.6 \
                  requests==2.25.1 \
                  stopit==1.1.2 \
                  PyGithub==1.54.1 \
                  packaging==20.9

            # Use the name of the branch to determine which database url
            # to use for the migration
            # github.base_ref is the name of the branch that is being
            # "merged into", so we'll use it to choose the Heroku App name
            - name: Retrieve branch database URL from Heroku
              id: db-url
              shell: python3 {0}
              run: |
                  import os
                  import sys
                  sys.path.append(os.environ["PATH_HELPERS"])
                  from resources import heroku_config

                  base_ref = os.environ["GITHUB_BRANCH"]
                  appnames = {
                      "dev":     os.environ["SERVER_DEV"],
                      "staging": os.environ["SERVER_STAGING"],
                      "prod":  os.environ["SERVER_PROD"]
                  }
                  app = appnames.get(base_ref, "dev")

                  config = heroku_config(app)
                  db_url = config[os.environ["HEROKU_DB_KEY"]]

                  print(f"::set-output name=url::{db_url}")

            # Writing the "current" database schema to a file here,
            # as downstream steps use commands that require a file path
            - name: Dump current database schema to file
              run: |
                  DB_URL=${{ steps.db-url.outputs.url }}
                  pg_dump --no-owner --no-privileges --schema-only $DB_URL >> $PATH_CURRENT

            # The exit codes for this step will mimic the 'migra' diff tool
            # that it depends on.
            #
            # migra uses the following exit codes:
            # 0 is a successful run, producing no diff (identical schemas)
            # 1 is a error
            # 2 is a successful run, producing a diff (non-identical schemas)
            # 3 is a successful run, but producing no diff, meaning the diff is "unsafe"
            #
            # We'll introduce one exit code of our own:
            # 4 is a successful run, but producing a diff that does not result in
            #   identical databases upon application.
            - name: Diff current and merging schema files
              id: db-diff
              shell: python3 {0}
              run: |
                  import os
                  import sys
                  sys.path.append(os.environ["PATH_SCRIPTS"])
                  from schema_diff import schema_diff

                  code, diff = schema_diff(os.environ["PATH_CURRENT"],
                                           os.environ["PATH_MERGING"])

                  print(f"::set-output name=code::{code}")
                  with open(os.environ["PATH_DIFF"], "w") as f:
                    f.write(diff or "")

            # Perform the database migration if this pull request is being
            # merged.
            - name: Perform database migration
              run: |
                  echo "MIGRA RETURN CODE: ${{ steps.db-diff.outputs.code }}"
                  echo "MIGRA SQL DIFF: $(cat $PATH_DIFF)"
                  psql --single-transaction --file ${PATH_DIFF} \
                  ${{ steps.db-url.outputs.url }}

            - name: Notify Slack on success
              shell: python3 {0}
              run: |
                  import os
                  import sys
                  import urllib.parse
                  sys.path.append(os.environ["PATH_HELPERS"])
                  from notifications import slack_debug

                  # No notifications if the migration diff
                  # is empty, so exit early
                  with open(os.environ["PATH_DIFF"]) as f:
                      if not f.read():
                          sys.exit(0)


                  github_sha = os.environ["GITHUB_SHA"]
                  github_branch = os.environ["GITHUB_BRANCH"]

                  SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT }}"
                  SLACK_CHANNEL = f"#alerts-{github_branch}"

                  def issue_url(number):
                      return urllib.parse.urljoin(os.environ["GITHUB_SHA_URL"],
                                                  number)


                  slack_redirect = (f"You can take a look the commit "
                                     + f"here:\n{issue_url(github_sha)}")


                  title = "Database migration performed"
                  body = (f"A PR was merged and triggered "
                          + "an automatic schema migration on branch: "
                          + f"`{github_branch}`.\n\n"
                          + "Check the GitHub Actions logs for details. "
                          + slack_redirect)

                  slack_debug(slack_webhook=SLACK_WEBHOOK, channel=SLACK_CHANNEL, body=body, title=title)

            - name: Notify Slack on failure
              if: failure()
              shell: python3 {0}
              run: |
                  import os
                  import sys
                  sys.path.append(os.environ["PATH_HELPERS"])
                  from notifications import slack_post

                  SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT }}"
                  GITHUB_BRANCH = os.environ["GITHUB_BRANCH"]
                  SLACK_CHANNEL = f"#alerts-{GITHUB_BRANCH}"
                  BODY = f"@channel Failed to perform database migration. Schemas are out-of-sync on branch `{GITHUB_BRANCH}`."

                  slack_post(slack_webhook=SLACK_WEBHOOK, channel=SLACK_CHANNEL, body=BODY)
