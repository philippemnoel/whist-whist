# workflows/whist-browser-build-and-deploy.yml
#
# Whist Browser: Build & Deploy
# Build and deploy the Whist Browser, bundling the Whist monorepo and the Brave Chromium browser for
# our dev environment, nightly.

name: "Whist Browser: Build & Deploy"

on:
  # On dev, we run a nightly build on weekdays (days of the week 1-5) at 00:01 UTC.
  schedule:
    - cron: "1 0 * * 1,2,3,4,5"
  # On staging & prod, we run a build for each promotion (push to branch).
  push:
    branches:
      - prod
      - staging
    paths-ignore:
      - "README.md"
      - "**/README.md"
      - ".github/workflows/README.md"
  workflow_dispatch:

jobs:
  # This job cross-compiles the Whist Browser to x64 from our NYC office M1 Mac Mini self-hosted runner.
  whist-browser-build-macos:
    name: "Nightly: macOS (${{ matrix.config.arch}})"
    runs-on: [self-hosted, macOS, ARM64]

    strategy:
      matrix:
        config:
          - arch: "x64"
          - arch: "arm64"

    env:
      x64-binary-tar-name: whist-browser-macos-x64.tar.gz
      x64-s3-bucket-uri: s3://whist-browser-macos-x64
      arm64-binary-tar-name: whist-browser-macos-arm64.tar.gz
      arm64-s3-bucket-uri: s3://whist-browser-macos-arm64
      s3-bucket-region: us-east-1

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v2
        with:
          repository: whisthq/brave-browser
          ref: main
          fetch-depth: 1 # Only fetch the latest commit, since the history is so large
          token: ${{ secrets.GHA_PERSONAL_ACCESS_TOKEN }}

      - name: Configure AWS S3 CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_GITHUB_ACTIONS_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_GITHUB_ACTIONS_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.s3-bucket-region }}

      # Building Brave/Chromium requires specific Node & npm versions, and Xcode. For full
      # details, see: https://github.com/whisthq/brave-browser#readme
      - name: Log NodeJS, npm and Xcode versions
        run: |
          echo "NodeJS & npm versions:\n"
          node --version
          npm --version

          echo "Verify that Xcode is installed and up-to-date:\n"
          xcode-select --install
          xcodebuild -version

      - name: Configure build type
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/prod" ]]; then
            echo "build_type=Release" >> $GITHUB_ENV
          else
            echo "build_type=Debug" >> $GITHUB_ENV
          fi

      - name: Initialize the build environment
        run: npm install

      # We need to configure build parameters, to build for the proper architecture and with
      # the relevant flags for he build type. Note that we cannot/don't want to use a lot of 
      # Brave-specific services, which are either omitted or filled-in blank.
      #
      # List of potential flags can be found here:
      # https://github.com/whisthq/brave-core/blob/main/build/commands/lib/config.js#L77
      # https://github.com/brave/brave-core/blob/master/build/commands/scripts/commands.js#L71
      - name: Configure build parameters
        run: |



          npm config set target_arch "${{ matrix.config.arch }}"



          # npm config set is_official_build=false 
          # npm config set brave_services_key=somefakekey
          # npm config set updater_dev_endpoint=https://
          # npm config set updater_prod_endpoint=https://
          # npm config set brave_stats_updater_url=https://
          # npm config set brave_sync_endpoint=https://
          # npm config set brave_variations_server_url=https://
          # npm config set uphold_client_id=fake
          # npm config set uphold_client_secret=fake
          # npm config set gemini_api_url=https://
          # npm config set gemini_oauth_url=https://
          # npm config set gemini_wallet_client_id=fake
          # npm config set gemini_wallet_client_secret=fake
          # npm config set rewards_grant_dev_endpoint=https://
          # npm config set rewards_grant_staging_endpoint=https://
          # npm config set rewards_grant_prod_endpoint=https://


npm config set brave_google_api_key=
npm config set google_default_client_id
npm config set google_default_client_secret
npm config set brave_sync_endpoint
npm config set safebrowsing_api_endpoint
npm config set updater_prod_endpoint
npm config set updater_dev_endpoint


    this.webcompatReportApiEndpoint = getNPMConfig(['webcompat_report_api_endpoint']) || 'https://webcompat.brave.com/1/webcompat'
npm config set version


npm config set notary_user
npm config set notary_password
  this.mac_signing_keychain = getNPMConfig(['mac_signing_keychain']) || 'login'
npm config set mac_signing_identifier
npm config set mac_installer_signing_identifier
npm config set brave_safetynet_api_key
npm config set brave_variations_server_url         https://variations.brave.com/seed
npm config set uphold_client_id
npm config set uphold_client_secret
npm config set uphold_staging_client_id
npm config set uphold_staging_client_secret

      # TODO: configure the Chrome keys and other configs for creating a Release build
      # This may require some Google keys, so I (Phil) need to look into that
      # https://github.com/brave/brave-browser/pull/20481/files






      - name: Fetch Chromium source & dependencies
        run: npm run init

      # TODO: I'm not sure this is needed (?)
      # I got this from: https://github.com/brave/brave-browser/pull/20481/files
      - name: Confirm dependencies installation
        if: "${{ env.build_type }}" == "Release"
        run: echo "Y" | ./src/build/install-build-deps.sh

      - name: Build Whist Browser
        run: npm run build ${{ env.build_type }}

      # TODO: We'll need to grab the version from the config DB instead, I can just reuse
      # the code in whist-build-and-deploy.yml here
      - name: Add our own version stamp
        if: "${{ env.build_type }}" == "Release"
        run: echo "0.0.0" > out/Release/version

      - name: Tar & Upload Whist Browser to AWS S3
        run: |
          tar -zcvf ${{ env.${{ matrix.config.arch }}-binary-tar-name }} "Component_${{ matrix.config.arch }}/Brave Browser ${{ env.build_type }}.app"
          aws s3 cp ${{ env.${{ matrix.config.arch }}-binary-tar-name }} ${{ env.${{ matrix.config.arch }}-s3-bucket-uri }}/${{ env.${{ matrix.config.arch }}-binary-tar-name }}

      ###################################################################################

      - name: Checkout whisthq/whist Git Repository
        uses: actions/checkout@v2

      - name: Setup Python-based notifications
        working-directory: .github/workflows/helpers
        run: ./notifications/setup_notifications.sh

      - name: Notify Slack on Workflow Error (Only on Push/Workflow_dispatch Events)
        if: failure()
        shell: python3 {0}
        run: |
          from notifications.slack_bot import slack_post
          SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_DEV }}"
          BODY = f"@releases :rotating_light: Failed to deploy Whist Browser (Nightly macOS) to AWS S3, investigate immediately :rotating_light: (<https://github.com/whisthq/whist/actions/runs/${{ github.run_id }} | see logs>)"
          slack_post(slack_webhook=SLACK_WEBHOOK, body=BODY)

      - name: Notify Slack on Success
        if: success()
        shell: python3 {0}
        run: |
          from notifications.slack_bot import slack_post
          SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_DEV }}"
          TITLE = ":brave: Whist Chromium Browser (Nightly macOS) Deployed :brave:"
          BODY = f"Whist Chromium Browser (Nightly macOS) deployed via upload to AWS S3 (<https://github.com/whisthq/whist/actions/runs/${{ github.run_id }} | see logs>)"
          slack_post(slack_webhook=SLACK_WEBHOOK, body=BODY, title=TITLE)
