# workflows/webserver-cloud-infrastructure-monitoring.yml
#
# Webserver: Cloud Infrastructure Monitoring
# Checks and flags old EC2 instances and cleans dangling Packer instances, AMIs, and EBS snapshots

name: "Webserver: Cloud Infrastructure Monitoring"
on:
  schedule:
    - cron: "12 10 * * 1-5" # runs at 10:12 (EST/UTC+5) each weekday
    - cron: "12 15 * * 1-5" # runs at 15:12 (EST/UTC+5) each weekday
  workflow_dispatch:

jobs:
  # Find the number of AWS EC2 instances we have across all instance states (running, stopped)
  # running in each region, and notify Slack
  webserver-enumerate-all-instances:
    name: Webserver Enumerate All Instances
    runs-on: ubuntu-20.04
    env:
      AWS_REGIONS: "us-east-1 us-east-2 us-west-1 us-west-2 ca-central-1 eu-central-1 eu-west-1 eu-west-2 eu-west-3 eu-south-1 eu-north-1 sa-east-1 me-south-1 af-south-1 ap-east-1 ap-south-1 ap-northeast-1 ap-northeast-2 ap-northeast-3 ap-southeast-1 ap-southeast-2"
    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v2

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_EC2_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_EC2_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set up Python-based helper AWS
        working-directory: .github/workflows/helpers
        run: ./aws/setup_aws.sh

      - name: Setup Python-based Notifications
        working-directory: .github/workflows/helpers
        run: ./notifications/setup_notifications.sh

      - name: Install boto3
        run: pip install boto3

      - name: List Number of AWS EC2 Instances in Slack
        shell: python3 {0}
        run: |
          from notifications.slack_bot import slack_post
          from aws.resource_helpers import num_aws_instances

          SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT }}"
          SLACK_CHANNEL = "#alerts-dev"
          BODY = "*Number of Instances:*"

          for region in "${{ env.AWS_REGIONS }}".split():
            (running_instances, total_instances) = num_aws_instances(region)
            BODY += "\n     _%s_: `%d running (%d total)`" % (region, running_instances, total_instances)

          slack_post(slack_webhook=SLACK_WEBHOOK, channel=SLACK_CHANNEL, body=BODY)

  # Finds old, hanging, unresponsive, or lingering EC2 instances and notify Slack
  #   Old EC2 instances are defined as resources that exist on AWS
  #     but are created > 2 weeks ago and are not in a shutting down state
  #   Hanging EC2 instances are defined as resources that are
  #     not in one of our databases, but still exist in AWS
  #   Unresponsive EC2 instances are defined as resourced marked
  #     as `status` HOST_SERVICE_UNRESPONSIVE in our database table instance_info
  #   Lingering EC2 instances are defined as resources that have
  #     updated their `last_update` value >2 mins for running instances, >15 mins
  #     for pre-connected instances, or `status` is DRAINING for >2 minutes
  #     without an associated mandelbox (`last_update` can be <2 mins)
  webserver-old-hanging-unresponsive-lingering-resource-notifications:
    name: Webserver Old, Hanging, Unresponsive Host or Lingering Resource Notifications
    runs-on: ubuntu-20.04
    needs: [webserver-enumerate-all-instances]
    strategy:
      matrix:
        aws-region:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - ca-central-1
          - eu-central-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-south-1
          - eu-north-1
          - sa-east-1
          - me-south-1
          - af-south-1
          - ap-east-1
          - ap-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v2

      - name: Set up Python-based helper AWS
        working-directory: .github/workflows/helpers
        run: ./aws/setup_aws.sh

      - name: Set up Python-based helper Resources
        working-directory: .github/workflows/helpers
        run: ./resources/setup_resources.sh

      - name: Setup Python-based Notifications
        working-directory: .github/workflows/helpers
        run: ./notifications/setup_notifications.sh

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_EC2_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_EC2_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install boto3, python-dateutil and psycopg2
        run: pip install boto3 python-dateutil psycopg2-binary

      - name: Flag Old EC2 Instances and Notify in Slack if They Exist
        shell: python3 {0}
        run: |
          from notifications.slack_bot import slack_post
          from aws.resource_helpers import flag_instances

          resources = flag_instances("${{ matrix.aws-region }}")

          if resources:
            SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT }}"
            SLACK_CHANNEL = "#alerts-dev"
            BODY = "Old *Instances* in _${{ matrix.aws-region }}_:\n%s" % resources
            slack_post(slack_webhook=SLACK_WEBHOOK, channel=SLACK_CHANNEL, body=BODY)

      - name: Set DB URLs for DEV, STAGING, and PROD
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_DEVELOPER_API_KEY }}
        run: |
          DATABASE_DEV_URL=$(heroku config:get DATABASE_URL --app=fractal-dev-server)
          echo "DATABASE_DEV_URL=$DATABASE_DEV_URL" >> $GITHUB_ENV

          DATABASE_STAGING_URL=$(heroku config:get DATABASE_URL --app=fractal-staging-server)
          echo "DATABASE_STAGING_URL=$DATABASE_STAGING_URL" >> $GITHUB_ENV

          DATABASE_PROD_URL=$(heroku config:get DATABASE_URL --app=fractal-prod-server)
          echo "DATABASE_PROD_URL=$DATABASE_PROD_URL" >> $GITHUB_ENV

      - name: Identifies Hanging EC2 Instances and Notify in Slack if They Exist
        shell: python3 {0}
        run: |
          import os
          from notifications.slack_bot import slack_post
          from aws.resource_helpers import get_non_personal_development_instances
          from resources.database_helpers import get_instance_ids

          instances = get_non_personal_development_instances("${{ matrix.aws-region }}")

          db_instance_ids = set()
          db_instance_ids.update(set(get_instance_ids(os.environ['DATABASE_DEV_URL'], "${{ matrix.aws-region }}")))
          db_instance_ids.update(set(get_instance_ids(os.environ['DATABASE_STAGING_URL'], "${{ matrix.aws-region }}")))
          db_instance_ids.update(set(get_instance_ids(os.environ['DATABASE_PROD_URL'], "${{ matrix.aws-region }}")))

          def is_not_registed_in_db(instance):
            return "aws-%s" % instance[1] not in db_instance_ids

          hanging_instances = list(filter(is_not_registed_in_db, instances))

          if hanging_instances:
            SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT }}"
            SLACK_CHANNEL = "#alerts-dev"

            # Format message
            msg = ""

            for instance in hanging_instances:
              # Start at index 4 to remove prefix "aws-" from the id
              msg += f"     - `{instance[0]}` - id: `{instance[1]}`\n"

            BODY = "*Instances* in AWS but not in our databases in _${{ matrix.aws-region }}_:\n%s" % msg
            slack_post(slack_webhook=SLACK_WEBHOOK, channel=SLACK_CHANNEL, body=BODY)

      - name: List EC2 Instances that are marked as HOST_SERVICE_UNRESPONSIVE and Notify in Slack if They Exist
        shell: python3 {0}
        run: |
          import os
          from notifications.slack_bot import slack_post
          from resources.database_helpers import get_host_service_unresponsive_instances

          dev_instances = get_host_service_unresponsive_instances(os.environ['DATABASE_DEV_URL'], "${{ matrix.aws-region }}")
          staging_instances = get_host_service_unresponsive_instances(os.environ['DATABASE_STAGING_URL'], "${{ matrix.aws-region }}")
          prod_instances = get_host_service_unresponsive_instances(os.environ['DATABASE_PROD_URL'], "${{ matrix.aws-region }}")

          if dev_instances or staging_instances or prod_instances:
            SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT }}"
            SLACK_CHANNEL = "#alerts-dev"

            stages = {'dev': dev_instances, 'staging': staging_instances, 'prod': prod_instances}

            for stage in stages:
              if stages[stage]:
                # Format message
                msg = ""

                for instance in stages[stage]:
                  # Start at index 4 to remove prefix "aws-" from the id
                  msg += f"     - `{instance[0]}` - id: `{instance[1][4:]}`\n"

                BODY = "Host service unresponsive *Instances* in _%s_ _${{ matrix.aws-region }}_:\n%s" % (stage, msg)
                slack_post(slack_webhook=SLACK_WEBHOOK, channel=SLACK_CHANNEL, body=BODY)

      - name: List EC2 Instances that are considered lingering and Notify in Slack if They Exist
        shell: python3 {0}
        run: |
          import os
          from notifications.slack_bot import slack_post
          from resources.database_helpers import get_lingering_instances

          dev_instances = get_lingering_instances(os.environ['DATABASE_DEV_URL'], "${{ matrix.aws-region }}")
          staging_instances = get_lingering_instances(os.environ['DATABASE_STAGING_URL'], "${{ matrix.aws-region }}")
          prod_instances = get_lingering_instances(os.environ['DATABASE_PROD_URL'], "${{ matrix.aws-region }}")

          if dev_instances or staging_instances or prod_instances:
            SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT }}"
            SLACK_CHANNEL = "#alerts-dev"

            stages = {'dev': dev_instances, 'staging': staging_instances, 'prod': prod_instances}

            for stage in stages:
              if stages[stage]:
                # Format message
                msg = ""

                for instance in stages[stage]:
                  # Start at index 4 to remove prefix "aws-" from the id
                  msg += f"     - `{instance[0]}` - id: `{instance[1][4:]}`\n"

                BODY = "Lingering *Instances* in _%s_ _${{ matrix.aws-region }}_.\n" % stage
                BODY += "Last update is >2 mins for running and >15 mins for preconnected or, not associated with a mandelbox and >2 min draining: \n%s" % msg
                slack_post(slack_webhook=SLACK_WEBHOOK, channel=SLACK_CHANNEL, body=BODY)

  # Delete lingering Packer Builder EC2 instances, and extraneous AMI snapshots and associated
  # EBS volumes from CI and old dev/staging/prod AMIs
  # The utilies we use to clean resources run per-region, so this job is run as a matrix over our AWS regions
  webserver-cleanup-lingering-packer-builders-and-ami-resources:
    name: Delete Lingering Packer Builder Instances, AMI Snapshots & EBS Volumes
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        aws-region:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - ca-central-1
          - eu-central-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-south-1
          - eu-north-1
          - sa-east-1
          - me-south-1
          - af-south-1
          - ap-east-1
          - ap-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v2

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_EC2_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_EC2_SECRET_ACCESS_KEY }}
          aws-region: ${{ matrix.aws-region }}

      - name: Setup Python-based Notifications
        working-directory: .github/workflows/helpers
        run: ./notifications/setup_notifications.sh

      - name: Install Utilities to Delete Lingering Packer Builders & AMI Resources
        run: pip install aws-hashicorp-packer-reaper aws-amicleaner

      # Packer takes about 25-30 minutes to build new AMIs across all of our enabled regions,
      # so any Packer instance over 45 minutes old has failed to delete and should be force-deleted
      # We only run Packer Builders on us-east-1
      - name: Kill All Packer Instances Older Than 45 Minutes
        if: ${{ matrix.aws-region == 'us-east-1' }}
        run: aws-hashicorp-packer-reaper terminate --older-than 45m

      # This deletes all but the currently active deployment AMIs and the past 10 deployment AMIs,
      # in case we need to revert back
      - name: Delete All AMIs Older Than 1 Month
        run: amicleaner --full-report --keep-previous 10 --force-delete --mapping-key name --mapping-values fractal-ami

      # This deletes all the test AMIs, from `host-setup-check-pr.yml`, since we don't need to keep any of them
      - name: Delete All AMIs Older Than 1 Month
        run: amicleaner --full-report --keep-previous 0 --force-delete --mapping-key name --mapping-values fractal-test-ami

      # Orphaned EBS volumes are EBS volumes which are not attached to any EC2 instance, for
      # example if an EC2 instance gets terminated but the EBS volume doesn't get deleted
      # with it, which can happen with regular instances, Packer builders, and more. They are
      # useless (especially since we don't store user data on instances) and thus should be deleted
      - name: Delete Orphaned EBS Volumes
        run: echo "y" | amicleaner --check-orphans

      - name: Notify Slack on Job Error
        if: failure()
        shell: python3 {0}
        run: |
          from notifications.slack_bot import slack_post

          SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT }}"
          SLACK_CHANNEL = "#alerts-${{ needs.fractal-publish-build-config.outputs.branch }}"
          BODY = "@releases :rotating_light: Failed to clean lingering Packer Instances and AMI Snapshots in `webserver-cleanup-lingering-packer-builders-and-ami-resources` job, investigate immediately :rotating_light: (<https://github.com/fractal/fractal/actions/runs/${{ github.run_id }} | see logs>)"

          slack_post(slack_webhook=SLACK_WEBHOOK, channel=SLACK_CHANNEL, body=BODY)

  # Notify Slack if an error occurs in the workflow, so that it can be fixed promptly
  notify-slack-on-workflow-failure:
    name: "Notify Slack if Cloud Infrastructure Monitoring Workflow Fails"
    needs:
      [
        webserver-enumerate-all-instances,
        webserver-old-hanging-unresponsive-lingering-resource-notifications,
        webserver-cleanup-lingering-packer-builders-and-ami-resources,
      ]
    if: failure()
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v2

      - name: Setup Python-based Notifications
        working-directory: .github/workflows/helpers
        run: ./notifications/setup_notifications.sh

      - name: Notify Slack on Workflow Failure
        shell: python3 {0}
        run: |
          from notifications.slack_bot import slack_post
          SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT }}"
          SLACK_CHANNEL = "#alerts-dev"
          BODY = ":rotating_light: @releases Cloud Infrastructure Monitoring Workflow Failed, investigate immediately :rotating_light: (<https://github.com/fractal/fractal/actions/runs/${{ github.run_id }} | see logs>)"
          slack_post(slack_webhook=SLACK_WEBHOOK, channel=SLACK_CHANNEL, body=BODY)
