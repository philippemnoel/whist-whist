# workflows/mandelboxes-check-pr.yml
#
# Mandelboxes: Check PR
# Check a mandelboxes/protocol PR for Dockerfile linting and Docker images building success.

name: "Mandelboxes: Check PR"

on:
  pull_request:
    paths:
      - "pyproject.toml"
      - "pylintrc"
      - ".github/workflows/mandelboxes-check-pr.yml"
      - ".github/workflows/helpers/pylint-wrapper"
      - "mandelboxes/**"
      - "mandelboxes/scripts/requirements.txt"
      - "mandelboxes/scripts/testing/requirements.txt"
      - "!mandelboxes/README.md"
      - "!mandelboxes/scripts/run_mandelbox_image.sh"
      - "!mandelboxes/run.sh"
  workflow_dispatch:

# This guarantees that if you push many commits to the same PR, only the latest
# commit will get run (others get cancelled)
concurrency:
  group: mandelboxes-check-pr-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  # Linting
  # Checks for formatting and Dockerfile standards using Hadolint.
  mandelboxes-lint-dockerfiles:
    name: Linting
    runs-on: ubuntu-20.04
    container: hadolint/hadolint:v2.10.0-debian

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3

      - name: Register Hadolint Output Problem Matcher
        run: echo "::add-matcher::${{ github.workspace }}/.github/workflows/helpers/hadolint_matcher.json"

      # Start from top-level folder to use .hadolint.yaml config
      - name: Check if Development Dockerfiles Follow Hadolint Standards
        run: hadolint ./**/*Dockerfile

      # Start from top-level folder to use .hadolint.yaml config
      - name: Check if Mandelbox Dockerfiles Follow Hadolint Standards
        run: |
          hadolint ./mandelboxes/*/Dockerfile.20
          hadolint ./mandelboxes/*/*/Dockerfile.20

  # Formatting and testing Rust code in mandelboxes
  mandelboxes-rust-checks:
    name: Format and Test Rust Code
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3

      - name: Set up Rust Environment
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Check Formatting for Extension Native Host
        working-directory: mandelboxes/browsers/base-chromium/extension-native-host
        run: cargo fmt --check

      - name: Run Unit Tests for Extension Native Host
        working-directory: mandelboxes/browsers/base-chromium/extension-native-host
        run: cargo test

  # Linting/formatting Python code in mandelboxes
  mandelboxes-python-scripts-linting:
    name: Lint mandelboxes Python Scripts
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3

      - name: Set up Python Environment
        uses: actions/setup-python@v4.2.0
        with:
          python-version: "3.10.4"

      - name: Install requirements
        working-directory: mandelboxes
        run: pip install -r scripts/requirements.txt -r scripts/testing/requirements.txt

      - name: Add pylint-wrapper to the PATH
        run: echo "$GITHUB_WORKSPACE/.github/workflows/helpers" >> "$GITHUB_PATH"

      - name: Check if Code Matches Pylint Standards
        run: pylint-wrapper mandelboxes/scripts mandelboxes/scripts/testing

  # Docker images building
  # Checks that the Docker images build successfully.
  mandelboxes-build-images:
    name: Building
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3

      - name: Configure AWS CLI # To get and install GRID driver
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_GITHUB_ACTIONS_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_GITHUB_ACTIONS_USER_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Build all Docker images, as if we were in production
      - name: Build Mandelboxes
        working-directory: mandelboxes
        run: ./build.sh --all --prod --gpu
        env:
          DOCKER_BUILDKIT: 1
