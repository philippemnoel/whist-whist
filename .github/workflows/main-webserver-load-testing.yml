# workflows/main-webserver-load-testing.yml
#
# Main Webserver: Load Testing
# Runs a load test with `num_users` users on our staging webserver to test the load stability of
# staging every Sunday at 2am Eastern.

name: "Main Webserver: Load Testing"
on:
    schedule:
        - cron: "0 7 * * 0" # runs at 2:00am (EST/UTC+5) on Sunday
    workflow_dispatch:

jobs:
    main-webserver-load-testing:
        name: Main Webserver Load Testing
        runs-on: ubuntu-20.04

        env:
            webserver_url: "https://dev-server.fractal.co"
            heroku_app_name: "fractal-dev-server"
            num_users: "10"
            load_test_region: "us-east-1"

        steps:
            - name: Checkout Git Repository
              uses: actions/checkout@v2
              with:
                  ref: "staging" # use staging version of load testing scripts

            - name: Configure AWS CLI
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_EC2_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_EC2_SECRET_ACCESS_KEY }}
                  aws-region: us-east-1

            - name: Authenticate Heroku
              run: |
                  cat > ~/.netrc << EOF
                  machine api.heroku.com
                    login ${{ secrets.HEROKU_DEVELOPER_LOGIN_EMAIL }}
                    password ${{ secrets.HEROKU_DEVELOPER_API_KEY }}
                  machine git.heroku.com
                    login ${{ secrets.HEROKU_DEVELOPER_LOGIN_EMAIL }}
                    password ${{ secrets.HEROKU_DEVELOPER_API_KEY }}
                  EOF

            - name: Set up Python 3.8
              uses: actions/setup-python@v2
              with:
                  python-version: 3.8

            - name: Install webserver scripting dependencies
              working-directory: main-webserver
              # install webserver scripting dependencies
              run: pip install -r scripts/requirements.txt

            - name: Setup and run load test
              working-directory: main-webserver
              shell: python3 {0} # any uncaught Python error will exit the shell and fail this step
              run: |
                  # this allows us to import from `scripts`
                  import sys
                  sys.path.append(".")
                  import subprocess
                  import time

                  from scripts.misc_scripts import login  
                  from scripts.load_testing.load_test_management import (
                      upgrade_webserver,
                      downgrade_webserver,
                  )
                  from scripts.load_testing.load_test_driver import run_local_load_test

                  WEBSERVER_URL = "${{ env.webserver_url }}"
                  HEROKU_APP_NAME = "${{ env.heroku_app_name }}"
                  NUM_USERS = int("${{ env.num_users }}")
                  LOAD_TEST_REGION = "${{ env.load_test_region }}"
                  USERNAME = "${{ secrets.HEROKU_ALL_WEBSERVERS_ADMIN_USERNAME }}"
                  PASSWORD = "${{ secrets.HEROKU_ALL_WEBSERVERS_ADMIN_PASSWORD }}"

                  # use heroku to get the database url for the current app
                  ret = subprocess.run(f"heroku config:get DATABASE_URL --app {HEROKU_APP_NAME}", capture_output=True, shell=True)
                  assert ret.returncode == 0, f"Heroku DATABASE_URL retrieval failed. Stdout: {ret.stdout}, Stderr: {ret.stderr}"
                  DB_URI = ret.stdout.decode("utf-8").strip()

                  # Log in as Admin to get Bearer Token
                  TOKEN = login(WEBSERVER_URL, USERNAME, PASSWORD)["access_token"]

                  # --- Setup load test --- #
                  # Upgrade the heroku app for prod-like use
                  upgrade_webserver(HEROKU_APP_NAME)

                  try:
                    # trigger the load test; this errors out if any user does not get a container
                    run_local_load_test(WEBSERVER_URL, TOKEN, NUM_USERS, LOAD_TEST_REGION)

                  except Exception as e:
                    # we just need the finally block to run before exiting badly
                    raise e
                    
                  finally:
                    # --- Cleanup load test --- #
                    # run this always; restores webserver to its original state
                    downgrade_webserver(HEROKU_APP_NAME)

            - name: Notify Slack on success
              run: |
                  WEBSERVER_URL=${{ env.webserver_url }}

                  curl -X POST \
                  --data-urlencode "payload={\"channel\": \"#alerts-staging\", \"username\": \"Fractal Bot\", \"text\": \"Successfully load tested webserver at $WEBSERVER_URL in github workflow \`${{ github.run_id }}\`.\", \"icon_emoji\": \":fractal:\"}" \
                  ${{ secrets.SLACK_HOOKS_ENDPOINT }}

            - name: Notify Slack on failure
              if: failure()
              run: |
                  WEBSERVER_URL=${{ env.webserver_url }}

                  # Notify slack of failure.
                  curl -X POST \
                    --data-urlencode \
                    "payload={\"channel\": \"#alerts-staging\", \"username\": \"Fractal Bot\", \"text\": \"Failed load testing webserver at $WEBSERVER_URL in github workflow \`${{ github.run_id }}\`.\", \"icon_emoji\": \":fractal:\"}" \
                    ${{ secrets.SLACK_HOOKS_ENDPOINT }}
