# workflows/main-webserver-check-pr.yml
#
# Main Webserver: Check PR
# Checks a main-webserver PR for linting and unit testing success.

name: "Database Migration"

on:
    pull_request:
        branches:
            - master
            - staging
            - dev
            - project/**
        # This workflow will run when one of these files changes.
        paths:
            - "main-webserver/**"
            - "!main-webserver/README.md"
            - ".github/workflows/main-webserver-check-pr.yml"
    # workflow_dispatch:

jobs:
    main-webserver-check-pr-linting:
        name: Run Migra Diff
        runs-on: ubuntu-20.04

        services:
          postgres:
            image: postgis/postgis:10-2.5
            env:
              # must specify password for PG Docker container image,
              # see: https://registry.hub.docker.com/_/postgres?tab=description&page=1&name=10
              POSTGRES_PASSWORD: postgres
              POSTGRES_DB: your_test_db_name
              ports:
                - 5432:5432
              # needed because the postgres container does not provide a healthcheck
              options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5


        env:
          HEROKU_APP_NAME: "fractal-dev-server"
          HEROKU_CONFIG_SCRIPT: ".github/workflows/helpers/migration/db_url.py"
          CMD_SCHEMA_DUMP: "pg_dump --no-owner --no-privileges --schema-only"
          SCHEMA_MERGING: "db.sql"
          TEMP: "./temp/"


        steps:
            - name: Checkout Git Repository
              uses: actions/checkout@v2

            - name: Set up Python 3.8
              uses: actions/setup-python@v2
              with:
                  python-version: 3.8

            - name: Upgrade pip
              working-directory: main-webserver
              run: pip install --upgrade pip

            - name: Install migra
              working-directory: main-webserver
              run: pip install migra

            - name: Install requests
              working-directory: main-webserver
              run: pip install requests

            - name: Authenticate Heroku
              run: |
                  cat > ~/.netrc << EOF
                  machine api.heroku.com
                    login ${{ secrets.HEROKU_DEVELOPER_LOGIN_EMAIL }}
                    password ${{ secrets.HEROKU_DEVELOPER_API_KEY }}
                  machine git.heroku.com
                    login ${{ secrets.HEROKU_DEVELOPER_LOGIN_EMAIL }}
                    password ${{ secrets.HEROKU_DEVELOPER_API_KEY }}
                  EOF

            - name: Check that db.sql exists
              run: |
                FILE=${SCHEMA_MERGING}
                if test -f "$FILE"; then
                echo "$FILE exists."
                fi

            - name: Start PostgreSQL server
              run: pg_ctl -D /usr/local/var/postgres start


            # - name: Dump current DB schema
            #   run: |
            #     URL=$(python3 $HEROKU_CONFIG_SCRIPT)
            #     echo $(${CMD_SCHEMA_DUMP} $DB_URL) > ./temp/current_schema.sql


            # - name: Dump merging DB schmea
            #   run: |
            #     echo $(${CMD_SCHEMA_DUMP} $DB_URL) > ./temp/current_schema.sql
            #     echo $(${CMD_SCHEMA_DUMP} $) > merging_schema.sql
