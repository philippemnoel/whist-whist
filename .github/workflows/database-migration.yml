# workflows/main-webserver-check-pr.yml
#
# Main Webserver: Check PR
# Checks a main-webserver PR for linting and unit testing success.

name: "Database Migration"

on:
    pull_request:
        branches:
            - master
            - staging
            - dev
            - project/**
        # # This workflow will run when one of these files changes.
        # paths:
        #     - "db.sql"

jobs:
    main-webserver-check-pr-linting:
        name: Run Migra Diff
        runs-on: ubuntu-20.04

        env:
          HEROKU_APP_NAME: "fractal-dev-server"
          HEROKU_CONFIG_SCRIPT: ".github/workflows/helpers/migration/db_url.py"
          CMD_SCHEMA_DUMP: "pg_dump --no-owner --no-privileges --schema-only"
          NAME_DB_MERGING: "db.sql"
          PATH_SCHEMA_MERGING: "db.sql"
          PATH_SCHEMA_CURRENT: "current_schema.sql"
          POSTGRES_HOST: postgres
          POSTGRES_PORT: 5432

          # Service containers to run with `container-job`
        services:
          # Label used to access the service container
          postgres:
            # Docker Hub image
            image: postgres
            # Provide the password for postgres
            env:
              POSTGRES_PASSWORD: postgres
              # Set health checks to wait until postgres has started
              options: >-
                --health-cmd pg_isready
                --health-interval 10s
                --health-timeout 5s
                --health-retries 5

        steps:

            - name: Checkout Git Repository
              uses: actions/checkout@v2

            - name: Install Postgres and switch user
              run: |
                # Create the file repository configuration:
                sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
                wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
                sudo apt-get update
                sudo apt-get -y install postgresql
                sudo -i -u postgres

            - name: Set up Python 3.8
              uses: actions/setup-python@v2
              with:
                  python-version: 3.8

            - name: Upgrade pip
              working-directory: main-webserver
              run: pip install --upgrade pip

            - name: Install migra
              working-directory: main-webserver
              run: pip install migra

            - name: Install requests
              working-directory: main-webserver
              run: pip install requests

            - name: Authenticate Heroku
              run: |
                  cat > ~/.netrc << EOF
                  machine api.heroku.com
                    login ${{ secrets.HEROKU_DEVELOPER_LOGIN_EMAIL }}
                    password ${{ secrets.HEROKU_DEVELOPER_API_KEY }}
                  machine git.heroku.com
                    login ${{ secrets.HEROKU_DEVELOPER_LOGIN_EMAIL }}
                    password ${{ secrets.HEROKU_DEVELOPER_API_KEY }}
                  EOF

            - name: Check that db.sql exists
              run: |
                FILE=${PATH_SCHEMA_MERGING}
                if test -f "$FILE"; then
                echo "$FILE exists."
                fi

            # - name: Start postgres server
            #   run: sudo service postgresql start

            - name: New db from dq.sql schema
              run: |
                createdb ${NAME_DB_MERGING}
                psql ${NAME_DB_MERGING} -1 -f ${PATH_SCHEMA_MERGING}

            # - name: Dump current DB schema
            #   run: |
            #     postgres -D /usr/local/pgsql/data
            #     URL=$(python3 $HEROKU_CONFIG_SCRIPT)
            #     echo $(${CMD_SCHEMA_DUMP} $URL) > ${PATH_SCHEMA_CURRENT}

            # - name: Dump merging DB schmea
            #   run: |
            #     echo $(${CMD_SCHEMA_DUMP} $DB_URL) > ./temp/current_schema.sql
            #     echo $(${CMD_SCHEMA_DUMP} $) > merging_schema.sql

            - name: Remove temporary directory
              run: rm -r ${TEMP}
