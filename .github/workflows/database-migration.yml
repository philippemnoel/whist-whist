# workflows/database-migration.yml
#
# Main Webserver: Migrate Database
# Compare the schema of the live database with
# main-webserver/db-migration/schema.sql
# If schema changes are detected, perform the migration
# on PR merge

name: "Database Migration"

on:
    push:
        branches:
            - master
            - staging
            - dev
    pull_request:
        branches:
            - master
            - staging
            - dev
    workflow_dispatch:

jobs:
    run-migra-diff:
        name: Run Migra Diff
        runs-on: ubuntu-20.04

        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            GITHUB_ISSUE: ${{ github.event.number }}
            HEROKU_DB_KEY: "DATABASE_URL"
            HEROKU_API_TOKEN: ${{ secrets.HEROKU_DEVELOPER_API_KEY }}
            SERVER_DEV: "fractal-dev-server"
            SERVER_STAGING: "fractal-staging-server"
            SERVER_MASTER: "fractal-prod-server"
            SCRIPT_DIFF: "main-webserver/db_migration/schema_diff.py"
            PATH_HELPERS: ".github/workflows/helpers"
            PATH_SCRIPTS: "main-webserver/db_migration"
            PATH_CURRENT: "../temporary_db_schema.sql"
            PATH_MERGING: "main-webserver/db_migration/schema.sql"
            PATH_DIFF: "../temporary_diff_file.sql"
            TITLE_ERROR: >-
                An error occured while comparing the database schema.
            TITLE_NO_CHANGES: >-
                Schema is unchanged, no database migration needed.
            TITLE_SAFE_CHANGES: >-
                There's some changes to be made to the schema!
            TITLE_UNSAFE_CHANGES: >-
                This PR introduces destructive changes to the schema!
            TITLE_INVALID_CHANGES: >-
                This PR will not migrate successfully.
            BODY_ERROR: >-
                The diff tool `migra` exited with an error.
            BODY_NO_CHANGES: >-
                Carry on!
            BODY_SAFE_CHANGES: >-
                The SQL commands below will perform the migration.
            BODY_UNSAFE_CHANGES: >-
                The schema diff produced some unsafe commands, which can be
                dangerous to run on the database.


                Remember these will be run automatically upon merge, so be sure
                to review these changes extra carefully.


                The SQL commands below will perform the migration.
            BODY_INVALID_CHANGES: >-
                The schema diff did not pass the migration test. The following
                SQL commands will not be applied properly to the database.

        steps:
            - name: Checkout Git Repository
              uses: actions/checkout@v2

            # A non-pull_request event does not have a github.base_ref set
            # We have to dig into the event object, which has a ref string
            # such as "refs/heads/dev". We trim "refs/heads/" to get the
            # substring that is the name of the branch.
            - name: Set GITHUB_BRANCH environment variable
              run: |
                  if [ "${{ github.event_name }}" = "pull_request" ]; then
                      echo "GITHUB_BRANCH=${{ github.base_ref }}" >> $GITHUB_ENV
                  else
                      ref="${{ github.event.ref }}"
                      echo "GITHUB_BRANCH=${ref:11}" >> $GITHUB_ENV
                  fi

            - name: Log GitHub context
              shell: python3 {0}
              run: |
                  import os
                  context = """
                  GITHUB CONTEXT:
                  ${{ toJSON(github) }}
                  JOB CONTEXT:
                  ${{ toJSON(job) }}
                  STEPS CONTEXT:
                  ${{ toJSON(steps) }}
                  RUNNER CONTEXT:
                  ${{ toJSON(runner) }}
                  STRATEGY CONTEXT:
                  ${{ toJSON(strategy) }}
                  MATRIX CONTEXT:
                  ${{ toJSON(matrix) }}
                  """
                  print("GITHUB_BRANCH VARIABLE:")
                  print(os.environ.get("GITHUB_BRANCH"))
                  print(context.strip("\n"))

            - name: Set up Python 3.8
              uses: actions/setup-python@v2
              with:
                  python-version: 3.8

            - name: Upgrade pip
              working-directory: main-webserver
              run: pip install --upgrade pip

            - name: Install Python dependencies
              working-directory: main-webserver
              run: |
                  pip install docker migra pretty-errors \
                  toolz rich psycopg2 requests stopit PyGithub

            # Use the name of the branch to determine which database url
            # to use for the migration
            # github.base_ref is the name of the branch that is being
            # "merged into", so we'll use it to choose the Heroku App name
            - name: Retrieve branch database URL from Heroku
              id: db-url
              shell: python3 {0}
              run: |
                  import os
                  import sys
                  sys.path.append(os.environ["PATH_HELPERS"])
                  from resources import heroku_config

                  base_ref = os.environ["GITHUB_BRANCH"]
                  appnames = {
                      "dev":     os.environ["SERVER_DEV"],
                      "staging": os.environ["SERVER_STAGING"],
                      "master":  os.environ["SERVER_MASTER"]
                  }
                  app = appnames.get(base_ref)
                  if not app:
                    raise Exception(f"Unrecognized branch name '{app}' found as "
                                    + "value of 'github.base_ref'. Expected one of "
                                    + "'dev', 'staging', or 'master'.")

                  config = heroku_config(app)
                  db_url = config[os.environ["HEROKU_DB_KEY"]]

                  print(f"::set-output name=url::{db_url}")

            # Writing the "current" database schema to a file here,
            # as downstream steps use commands that require a file path
            - name: Dump current database schema to file
              run: |
                  DB_URL=${{ steps.db-url.outputs.url }}
                  pg_dump --no-owner --no-privileges --schema-only $DB_URL >> $PATH_CURRENT

            # The exit codes for this step will mimic the 'migra' diff tool
            # that it depends on.
            #
            # migra uses the following exit codes:
            # 0 is a successful run, producing no diff (identical schemas)
            # 1 is a error
            # 2 is a successful run, producing a diff (non-identical schemas)
            # 3 is a successful run, but producing no diff, meaning the diff is "unsafe"
            #
            # We'll introduce one exit code of our own:
            # 4 is a successful run, but producing a diff that does not result in
            #   identical databases upon application.
            - name: Diff current and merging schema files
              id: db-diff
              shell: python3 {0}
              run: |
                  import os
                  import sys
                  sys.path.append(os.environ["PATH_SCRIPTS"])
                  from schema_diff import schema_diff

                  code, diff = schema_diff(os.environ["PATH_CURRENT"],
                                           os.environ["PATH_MERGING"])

                  print(f"::set-output name=code::{code}")
                  with open(os.environ["PATH_DIFF"], "w") as f:
                    f.write(diff or "")

            # Using the workflow notifcation helpers, we'll send out
            # formatted alerts based on the error code response from the
            # previous step.
            #
            # Actual messages are defined in the environment configuration at
            # the top of this file.
            - name: Send alerts on diff result
              shell: python3 {0}
              run: |
                  import os
                  import sys

                  sys.path.append(os.environ["PATH_HELPERS"])
                  from notifications import (github_debug_once,
                                             github_info_once,
                                             github_warning_once,
                                             github_critical_once,
                                             github_error_once)

                  return_code = int(${{ steps.db-diff.outputs.code }})
                  with open(os.environ["PATH_DIFF"]) as f:
                      sql_diff = f.read().strip("\n")

                  github_issue = os.environ["GITHUB_ISSUE"]

                  identifier = "AUTOMATED_DB_MIGRATION_MESSAGE"

                  if return_code == 0:
                    github_info_once(github_issue,
                                     identifier,
                                     os.environ["BODY_NO_CHANGES"],
                                     title=os.environ["TITLE_NO_CHANGES"],
                                     code=sql_diff,
                                     lang="sql")

                  elif return_code == 2:
                    github_debug_once(github_issue,
                                      identifier,
                                      os.environ["BODY_SAFE_CHANGES"],
                                      title=os.environ["TITLE_SAFE_CHANGES"],
                                      code=sql_diff,
                                      lang="sql")

                  elif return_code == 3:
                    github_warning_once(github_issue,
                                        identifier,
                                        os.environ["BODY_UNSAFE_CHANGES"],
                                        title=os.environ["TITLE_UNSAFE_CHANGES"],
                                        code=sql_diff,
                                        lang="sql")

                  elif return_code == 4:
                    github_critical_once(github_issue,
                                         identifier,
                                         os.environ["BODY_INVALID_CHANGES"],
                                         title=os.environ["TITLE_INVALID_CHANGES"],
                                         code=sql_diff,
                                         lang="sql")
                    raise Exception(os.environ["TITLE_INVALID_CHANGES"])

                  else:
                    github_error_once(github_issue,
                                      identifier,
                                      os.environ["BODY_ERROR"],
                                      title=os.environ["TITLE_ERROR"],
                                      code=sql_diff,
                                      lang="python")
                    raise Exception(os.environ["TITLE_ERROR"])

            # Perform the database migration if this pull request is being
            # merged.
            - name: Perform database migration
              if: success() && github.event.pull_request.merged == true
              run: |
                  psql --single-transaction --file ${PATH_DIFF} \
                  ${{ steps.db-url.outputs.url }}
