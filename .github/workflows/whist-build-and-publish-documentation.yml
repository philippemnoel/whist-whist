# workflows/whist-build-and-publish-documentation.yml
#
# Whist: Build & Publish Documentation
# Build and conditionally deploy whisthq/whist monorepo documentation. Although this
# workflow is triggered by both pull requests and pushes, the steps that deploy
# the built documentation only run when the triggering event is a push.

name: "Whist: Build & Publish Documentation"

on:
  pull_request:
    branches:
      - dev
    paths:
      - ".github/workflows/whist-build-and-publish-documentation.yml"
      - "backend/services/**"
      - "protocol/**"
      - "backend/webserver/**"
  push:
    branches:
      - dev
    paths:
      - ".github/workflows/whist-build-and-publish-documentation.yml"
      - "backend/services/**"
      - "protocol/**"
      - "backend/webserver/**"
  workflow_dispatch:

jobs:
  whist-build-and-publish-documentation:
    name: Build & Publish Whist Internal Documentation to whisthq/docs
    runs-on: ubuntu-20.04
    # This is a hack. We don't want concurrency for PRs, since they do not deploy and
    # can cause spurious PR CI failure. Here, concurrency depends on the branch name
    # that triggered the action. Deploys end with "-dev" and therefore will be in the
    # same group, whereas each branch will be in a different group for CI, disabling
    # concurrency in that case.
    concurrency: whist-build-and-publish-documentation-${{ github.ref_name }}
    env:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    steps:
      ################################# CONFIG STEPS ###############################

      - name: Checkout the whisthq/whist Git Repository
        uses: actions/checkout@v2
        with:
          path: whist

      - name: Checkout the whisthq/docs Git Repository
        uses: actions/checkout@v2
        with:
          repository: whisthq/docs
          token: ${{ secrets.GHA_PERSONAL_ACCESS_TOKEN }}
          path: docs

      - name: Setup Python-based notifications
        working-directory: whist/.github/workflows/helpers
        run: ./notifications/setup_notifications.sh

      ##############################################################################
      ########################### BACKEND SERVICES STEPS ###########################

      - name: Setup Go environment
        uses: actions/setup-go@v2.1.3
        with:
          go-version: "1.17"

      - name: Build Backend Services Documentation
        working-directory: whist/backend/services
        run: make docs

      - name: Diff Old and New Documentation
        id: services-diff
        run: |
          git diff --no-index whist/backend/services/build/docs docs/backend/services && echo "No changes detected"
          echo "::set-output name=changed::$?"

      - name: Copy New Core Go Documentation into the whisthq/docs Working Tree (Only on Push/Workflow_dispatch Events)
        if: ${{ (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && steps.services-diff.outputs.changed == true }}
        run: rm -rf docs/backend/services && mkdir docs/backend && cp -r whist/backend/services/build/docs docs/backend/services

      ##############################################################################
      ################################ PROTOCOL STEPS ##############################

      # Necessary for downloading protocol libs and base Dockerfile Nvidia GRID drivers from AWS S3
      - name: Configure AWS S3 CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_GITHUB_ACTIONS_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_GITHUB_ACTIONS_USER_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Build Protocol Documentation
        working-directory: whist/protocol
        run: ./build_protocol_targets.sh docs

      - name: Diff Old and New Documentation
        id: protocol-diff
        run: |
          # Since the protocol is built inside a docker container, the folder is build-docker
          git diff --no-index whist/protocol/build-docker/docs/html docs/protocol && echo "No changes detected"
          echo "::set-output name=changed::$?"

      - name: Copy New Protocol Documentation into the whisthq/docs Working Tree (Only on Push/Workflow_dispatch Events)
        if: ${{ (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && steps.protocol-diff.outputs.changed == true }}
        run: rm -r docs/protocol && cp -r whist/protocol/build-docker/docs/html docs/protocol # Since the protocol is built inside a Docker container, the folder is build-docker

      ##############################################################################
      ################################ WEBSERVER STEPS #############################

      # Install the version of Sphinx specified in backend/webserver/requirements-test.txt
      - name: Install requirements
        run: |
          pip install $(cat whist/backend/webserver/requirements.txt)
          pip install $(cat whist/backend/webserver/requirements-test.txt)

      - name: Build the Latest Documentation
        working-directory: whist/backend/webserver/docs
        run: sphinx-apidoc --no-toc -fo . ../app && make html

      - name: Diff Old and New Documentation
        id: webserver-diff
        run: |
          git diff --no-index whist/backend/webserver/docs/_build/html docs/webserver && echo "No changes detected"
          echo "::set-output name=changed::$?"

      - name: Copy New Webserver Documentation into the whisthq/docs Working Tree (Only on Push/Workflow_dispatch Events)
        if: ${{ (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && steps.webserver-diff.outputs.changed == true }}
        run: rm -r docs/webserver && cp -r whist/backend/webserver/docs/_build/html docs/webserver

      ##############################################################################
      ################################# PUBLISH STEPS ##############################

      - name: Commit the Documentation Changes to whisthq/docs (Only on Push/Workflow_dispatch Events)
        if: ${{ (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && (steps.services-diff.outputs.changed == true || steps.protocol-diff.outputs.changed == true || steps.webserver-diff.outputs.changed == true) }}
        working-directory: docs
        run: |
          # Set the author of the commit in whisthq/docs to be the user
          # who just pushed to the dev branch of the monorepo.
          git config user.name "${{ github.event.pusher.name }}"
          git config user.email "${{ github.event.pusher.email }}"

          # Authenticate Git as Phil with GitHub
          git config credential.helper store
          git credential approve <<EOF
          protocol=https
          host=github.com
          username=phil@whist.com
          password=${{ secrets.GHA_PERSONAL_ACCESS_TOKEN }}
          EOF

          # Stage, commit, and push documentation changes
          git add services
          git commit -F - <<EOF
          Update Whist internal documentation (https://github.com/whisthq/whist/commit/${{ github.sha }})
          EOF
          git show --stat
          git push

      ##############################################################################

      - name: Notify Slack on Workflow Error (Only on Push/Workflow_dispatch Events)
        if: ${{ (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && (steps.services-diff.outputs.changed == true || steps.protocol-diff.outputs.changed == true || steps.webserver-diff.outputs.changed == true) && failure() }}
        shell: python3 {0}
        run: |
          from notifications.slack_bot import slack_post
          SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_DEV }}"
          SLACK_CHANNEL = "#alerts-dev"
          BODY = "@releases :rotating_light: Failed to deploy Whist Internal Documentation to `docs.whist.com`, investigate immediately :rotating_light: (<https://github.com/whisthq/whist/actions/runs/${{ github.run_id }} | see logs>)"
          slack_post(slack_webhook=SLACK_WEBHOOK, channel=SLACK_CHANNEL, body=BODY)

      - name: Notify Slack on Workflow Success (Only on Push/Workflow_dispatch Events)
        if: ${{ (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && (steps.services-diff.outputs.changed == true || steps.protocol-diff.outputs.changed == true || steps.webserver-diff.outputs.changed == true) && success() }}
        shell: python3 {0}
        run: |
          from notifications.slack_bot import slack_post
          SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_DEV }}"
          SLACK_CHANNEL = "#alerts-dev"
          TITLE = ":orange_book: Whist Internal Documentation Deployed :orange_book:"
          BODY = "Whist Internal Documentation Deployed to `docs.whist.com` (<https://github.com/whisthq/whist/actions/runs/${{ github.run_id }} | see logs>)"
          slack_post(slack_webhook=SLACK_WEBHOOK, channel=SLACK_CHANNEL, body=BODY, title=TITLE)
