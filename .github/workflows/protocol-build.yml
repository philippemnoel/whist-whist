# workflows/protocol-build.yml
#
# Protocol: Build and Check Protocol
# Builds the Fractal Protocol on Windows, macOS and Linux, and Run Tests

name: "Protocol: Build and Check Protocol"

on:
    pull_request:
        branches: [master, staging, dev, pipitone/protocol-ci]
    workflow_dispatch:

jobs:
    build-and-check-protocol:
        name: ${{ matrix.config.name }}
        runs-on: ${{ matrix.config.os }}

        # Platforms to build on/for
        strategy:
            matrix:
                config:
                    - name: "Build and Check Protocol on Windows (cl)"
                      os: windows-2019 # llvm, clang-tidy are pre-installed on windows-2019 GHA machines
                    - name: "Build and Check Protocol on Linux Ubuntu (gcc)"
                      os: ubuntu-18.04
                    - name: "Build and Check Protocol on macOS (clang)"
                      os: macos-10.14

        steps:
            - name: Checkout Git Repository
              uses: actions/checkout@v2
              with:
                  persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
                  token: ${{ secrets.GHA_PERSONAL_ACCESS_TOKEN }}
                  submodules: recursive

            ############################# Windows Configuration Steps START #############################

            - name: Install cppcheck, yq (for clang-tidy) via Chocolatey on Windows GHA Machine
              if: runner.os == 'Windows'
              uses: crazy-max/ghaction-chocolatey@v1
              with:
                  args: install yq cppcheck

            - name: Install CUDA on Windows GHA Machine
              if: runner.os == 'Windows'
              env:
                  visual_studio: "Visual Studio 16 2019" # Imported from env in the .ps1 script
                  cuda: "11.0.167" # Imported from env in the .ps1 script
              shell: powershell
              run: |
                  .\.github\workflows\helpers\protocol\install_cuda_windows.ps1

                  if ($?) {
                    # Set paths for subsequent steps, using $env:CUDA_PATH
                    echo "Adding CUDA to CUDA_PATH, CUDA_PATH_X_Y and PATH"
                    echo "CUDA_PATH=$env:CUDA_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
                    echo "$env:CUDA_PATH_VX_Y=$env:CUDA_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
                    echo "$env:CUDA_PATH/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
                  }

            - name: Verify that NVCC is Installed on GHA Windows Machine
              if: runner.os == 'Windows'
              shell: powershell
              run: |
                  nvcc -V
                  ls $env:CUDA_PATH
                  ls $env:CUDA_PATH\bin
                  ls $env:CUDA_PATH\include

            - name: Install cmake via Chocolatey on Windows GHA Machine
              if: runner.os == 'Windows'
              uses: crazy-max/ghaction-chocolatey@v1
              with:
                  args: install cmake --installargs 'ADD_CMAKE_TO_PATH=System'

            - name: Windows matchers
              if: runner.os == 'Windows'
              run: |
                  echo " ::add-matcher::${{ github.workspace }}/.github/workflows/helpers/protocol/msvc_matcher.json"
                  echo " ::add-matcher::${{ github.workspace }}/.github/workflows/helpers/protocol/msvc_linker_matcher.json"
            - name: Linux matchers
              if: runner.os == 'Linux'
              run: |
                  echo " ::add-matcher::${{ github.workspace }}/.github/workflows/helpers/protocol/gcc_matcher.json"
            - name: Mac matchers
              if: runner.os == 'macOS'
              run: |
                  echo " ::add-matcher::${{ github.workspace }}/.github/workflows/helpers/protocol/clang_matcher.json"
            - name: Matchers
              run: |
                  echo " ::add-matcher::${{ github.workspace }}/.github/workflows/helpers/protocol/cppcheck_matcher.json"
                  echo " ::add-matcher::${{ github.workspace }}/.github/workflows/helpers/protocol/cmake_matcher.json"

            - name: Set up Visual Studio Developer Command Prompt (for nmake) on Windows GHA Machine
              if: runner.os == 'Windows'
              uses: ilammy/msvc-dev-cmd@v1

            ############################# Windows Configuration Steps END #############################

            ############################# Unix Configuration Steps START #############################

            # cmake is already installed on GHA Machines

            - name: Install Linux Client Protocol Dependencies on Linux Ubuntu GHA Machines
              if: runner.os == 'macOS' || runner.os == 'Linux'
              shell: bash
              run: |
                  if [ "$RUNNER_OS" == "Linux" ]; then
                      ./protocol/desktop/linux-client-setup.sh

                      # install yq for clang-tidy
                      sudo snap install yq
                      sudo apt install clang-tidy coreutils perl -y # coreutils for realpath
                  else
                      # llvm for clang-tidy, coreutils for realpath
                      brew install yq llvm coreutils perl
                      ln -s "/usr/local/opt/llvm/bin/clang-format" "/usr/local/bin/clang-format"
                      ln -s "/usr/local/opt/llvm/bin/clang-tidy" "/usr/local/bin/clang-tidy"
                  fi

            ############################# Unix Configuration Steps END #############################

            - name: Build Protocol Client on Windows
              if: runner.os == 'Windows'
              shell: cmd # Acts as Visual Studio Developer Command Prompt due to ilammy/msvc-dev-cmd@v1
              run: |
                  cd protocol/
                  cmake . -DCMAKE_BUILD_TYPE=Debug -G "NMake Makefiles"
                  nmake FractalClient

            - name: Build Protocol Client on macOS/Linux Ubuntu
              if: runner.os == 'macOS' || runner.os == 'Linux'
              env:
                  FRACTAL_OSX_SYSROOT: "/Applications/Xcode_12.2.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk" # Necessary for building on macOS
              shell: bash
              run: |
                  cd protocol/
                  cmake . -DCMAKE_BUILD_TYPE=Debug
                  make FractalClient
                  cd ~

            - name: Build Protocol Server on Linux Ubuntu
              if: runner.os == 'Linux'
              shell: bash
              run: |
                  cd protocol/
                  cmake . -DCMAKE_BUILD_TYPE=Debug
                  make FractalServer
                  cd ~

            - name: Verify Build with clang-format
              if: runner.os == 'Linux'
              shell: bash
              run: |
                  cd protocol
                  make clang-format
                  git diff-index --quiet HEAD --

            - name: Verify Build with clang-tidy
              shell: bash
              run: |
                  cd protocol/
                  ./run-clang-tidy.sh -c
                  cd ~

