# workflows/main-webserver-build-and-publish-documentation.yml
#
# Main Webserver: Build & Publish Documentation
# Build and conditionally deploy webserver documentation. Although this
# workflow is triggered by both pull requests and pushes, the steps that deploy
# the built documentation only run when the triggering event is a push.

name: "Main Webserver: Build & Publish Documentation"

on:
    pull_request:
        branches:
            - dev
        paths:
            - "main-webserver/**"
            - ".github/workflows/main-webserver-build-and-publish-documentation.yml"
    push:
        branches:
            - dev
        paths:
            - "main-webserver/**"
            - ".github/workflows/main-webserver-build-and-publish-documentation.yml"
    workflow_dispatch:

jobs:
    main-webserver-build-documentation:
        name: Build & Publish Webserver Documentation to fractal/docs
        runs-on: ubuntu-20.04

        steps:
            ################################# CONFIG STEPS START ###############################

            - name: Checkout the fractal Git Repository
              uses: actions/checkout@v2
              with:
                  path: fractal

            - name: Checkout the fractal/docs Git Repository
              uses: actions/checkout@v2
              with:
                  repository: fractal/docs
                  token: ${{ secrets.GHA_PERSONAL_ACCESS_TOKEN }}
                  path: docs

            - name: Setup Python-based notifications
              working-directory: fractal/.github/workflows/helpers
              run: ./notifications/setup_notifications.sh

            # Install the version of Sphinx specified in main-webserver/requirements-test.txt
            - name: Install requirements
              run: |
                  pip install $(cat fractal/main-webserver/requirements.txt)
                  pip install $(cat fractal/main-webserver/requirements-test.txt)

            - name: Build the Latest Documentation
              working-directory: fractal/main-webserver/docs
              run: sphinx-apidoc -f -o . ../app && make html

            - name: Diff Old and New Documentation
              id: diff
              run: |
                  git diff --no-index fractal/main-webserver/docs/_build/html docs/webserver && echo "No changes detected"
                  echo "::set-output name=changed::$?"

            ###################################################################################
            ################################# PUBLISH STEPS START #############################

            - name: Copy New Documentation into the fractal/docs Working Tree (Only on Push/Workflow_dispatch Events)
              if: ${{ (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && steps.diff.outputs.changed == true}}
              run: rm -r docs/webserver && cp -r fractal/main-webserver/docs/_build/html docs/webserver

            - name: Commit the Documentation Changes to fractal/docs (Only on Push/Workflow_dispatch Events)
              if: ${{ (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && steps.diff.outputs.changed == true}}
              working-directory: docs
              run: |
                  # Set the author of the commit in fractal/docs to be the user
                  # who just pushed to the dev branch of the monorepo.
                  git config user.name "${{ github.event.pusher.name }}"
                  git config user.email "${{ github.event.pusher.email }}"

                  # Authenticate Git as Phil with GitHub
                  git config credential.helper store
                  git credential approve <<EOF
                  protocol=https
                  host=github.com
                  username=phil@fractal.co
                  password=${{ secrets.GHA_PERSONAL_ACCESS_TOKEN }}
                  EOF

                  # Stage, commit, and push documentation changes
                  git add webserver
                  git commit -F - <<EOF
                  Update webserver documentation (https://github.com/fractal/fractal/commit/${{ github.sha }})
                  EOF
                  git show --stat
                  git push

            ###################################################################################

            # Only notify Slack if there was a positive diff, so only if a new documentation publishing event was attempted
            - name: Notify Slack on Workflow Error (Only on Push/Workflow_dispatch Events)
              if: ${{ (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && steps.diff.outputs.changed == true && failure() }}
              shell: python3 {0}
              run: |
                  from notifications.slack_bot import slack_post

                  SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT }}"
                  SLACK_CHANNEL = "#alerts-prod"              
                  BODY = "@releases :rotating_light: Failed to deploy `main-webserver` Internal Documentation to `docs.fractal.co`, investigate immediately :rotating_light: (<https://github.com/fractal/fractal/actions/runs/${{ github.run_id }} | see logs>)"

                  slack_post(slack_webhook=SLACK_WEBHOOK, channel=SLACK_CHANNEL, body=BODY)

            - name: Notify Slack (Only on Push/Workflow_dispatch Events)
              if: ${{ (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && steps.diff.outputs.changed == true && success() }}
              shell: python3 {0}
              run: |
                  from notifications.slack_bot import slack_post

                  SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT }}"
                  SLACK_CHANNEL = "#alerts-prod"              
                  TITLE = ":blue_book: Main-Webserver Internal Documentation Deployed :blue_book:"
                  BODY = "Fractal `main-webserver` Internal Documentation Deployed to `docs.fractal.co` (<https://github.com/fractal/fractal/actions/runs/${{ github.run_id }} | see logs>)"

                  slack_post(slack_webhook=SLACK_WEBHOOK, channel=SLACK_CHANNEL, body=BODY, title=TITLE)
