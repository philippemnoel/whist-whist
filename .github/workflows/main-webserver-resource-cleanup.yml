# workflows/main-webserver-resource-cleanup.yml
#
# Main Webserver: Resource Cleanup
# Check for Dangling Auto-Scaling Groups and Clusters

name: "Main Webserver: Resource Cleanup"

on:
    schedule:
        - cron: "0 0 * * *" # runs at the end of each day

jobs:
    main-webserver-resource-cleanup:
        name: Main Webserver Resource Cleanup
        runs-on: ubuntu-20.04
        steps:
            - name: Checkout Git Repository
              uses: actions/checkout@v2
            - uses: actions/setup-python@v1
            - name: Configure AWS CLI
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ECS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_ECS_SECRET_ACCESS_KEY }}
                  aws-region: us-east-1

            - name: Check for Dangling Packer Instances
              working-directory: main-webserver
              run: |
                  pip install aws-hashicorp-packer-reaper
                  packer_instances=$(aws-hashicorp-packer-reaper list)
                  while IFS= read -r line 
                  do 
                    if [ "$(echo $line | sed 's/.*- //')" = "running" ]; then
                        curl -X POST \
                        --data-urlencode "payload={\"channel\": \"#alerts\", \"username\": \"Fractal Bot\", \"text\": \"Dangling Packer Instance: ${line}\", \"icon_emoji\": \":fractal:\"}" \
                        ${{ secrets.SLACK_HOOKS_ENDPOINT }}
                    fi
                  done <<< "$packer_instances"
                #   aws-hashicorp-packer-reaper terminate --older-than 1s

            - name: Check for Hanging ASGs and Clusters
              working-directory: .github/workflows
              run: |
                  regions="us-east-1 us-east-2 us-west-1 us-west-2 ca-central-1 eu-central-1 eu-west-1"
                  for region in $regions
                  do
                    echo $region
                    hanging_clusters=$(python helpers/resource_cleanup.py "clusters" $region "https://dev-database.fractal.co/v1/graphql" "https://staging-database.fractal.co/v1/graphql" "https://prod-database.fractal.co/v1/graphql" '${{ secrets.HASURA_GRAPHQL_ACCESS_KEY_DEV }}' '${{ secrets.HASURA_GRAPHQL_ACCESS_KEY_STAGING }}' '${{ secrets.HASURA_GRAPHQL_ACCESS_KEY_PROD }}' | sed 's/[][]//g')
                    echo $hanging_clusters
                    # notify slack if there are hanging ASGs
                    if [ ! -z "$hanging_clusters" ]; then
                        curl -X POST \
                        --data-urlencode "payload={\"channel\": \"#alerts\", \"username\": \"Fractal Bot\", \"text\": \"Hanging Clusters in ${region}: ${hanging_clusters}\", \"icon_emoji\": \":fractal:\"}" \
                        ${{ secrets.SLACK_HOOKS_ENDPOINT }}
                    fi

                    hanging_asgs=$(python helpers/resource_cleanup.py "asgs" $region "https://dev-database.fractal.co/v1/graphql" "https://staging-database.fractal.co/v1/graphql" "https://prod-database.fractal.co/v1/graphql" '${{ secrets.HASURA_GRAPHQL_ACCESS_KEY_DEV }}' '${{ secrets.HASURA_GRAPHQL_ACCESS_KEY_STAGING }}' '${{ secrets.HASURA_GRAPHQL_ACCESS_KEY_PROD }}' | sed 's/[][]//g')
                    echo $hanging_asgs
                    # notify slack if there are hanging ASGs
                    if [ ! -z "$hanging_asgs" ]; then
                        curl -X POST \
                        --data-urlencode "payload={\"channel\": \"#alerts\", \"username\": \"Fractal Bot\", \"text\": \"Hanging ASGs in ${region}: ${hanging_asgs}\", \"icon_emoji\": \":fractal:\"}" \
                        ${{ secrets.SLACK_HOOKS_ENDPOINT }}
                    fi
                  done
