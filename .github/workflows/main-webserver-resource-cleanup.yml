# workflows/main-webserver-hanging-resource-notification.yml
#
# Main Webserver: Hanging Resource Notification
# Checks for Dangling Auto-Scaling Groups, Clusters, and Packer Build Instances

name: "Main Webserver: Hanging Resource Notification"
on:
    push:
        branches:
            - mia/main-webserver/hanging-resource-alerts
    # schedule:
    #     - cron: "0 0 * * *" # runs at 11am each day

jobs:
    main-webserver-hanging-resource-notification:
        name: Main Webserver Hanging Resource Notification
        runs-on: ubuntu-20.04
        strategy:
            matrix:
                aws-region:
                    - us-east-1
                    - us-east-2
                    - us-west-1
                    - us-west-2
                    - ca-central-1
                    - eu-west-1
                    - eu-central-1
                resource:
                    - asgs
                    - clusters
        env:
            db_url_dev: "https://dev-database.fractal.co/v1/graphql"
            db_url_staging: "https://staging-database.fractal.co/v1/graphql"
            db_url_prod: "https://prod-database.fractal.co/v1/graphql"

        steps:
            - name: Checkout Git Repository
              uses: actions/checkout@v2

            - name: Configure AWS CLI
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ECS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_ECS_SECRET_ACCESS_KEY }}
                  aws-region: us-east-1

            - name: Check for Resources and Notify in Slack if they Exist
              working-directory: .github\workflows\helpers\aws
              run: |
                  hanging_resource=$(python resource_cleanup.py ${{ matrix.resource }} ${{ matrix.aws-region }} \
                                          ${{ env.db_url_dev}} \
                                          ${{ env.db_url_staging}} \
                                          ${{ env.db_url_prod}} \
                                          '${{ secrets.HASURA_GRAPHQL_ACCESS_KEY_DEV }}' \
                                          '${{ secrets.HASURA_GRAPHQL_ACCESS_KEY_STAGING }}' \
                                          '${{ secrets.HASURA_GRAPHQL_ACCESS_KEY_PROD }}' \
                                      | sed 's/[][]//g')
                  echo $hanging_resource

                  # notify slack if there are hanging resources
                  if [ ! -z "$hanging_resource" ]; then
                      curl -X POST \
                      --data-urlencode "payload={\"channel\": \"#alerts\", \"username\": \"Fractal Bot\", \"text\": \"Hanging ${resource} in ${region}: \'${hanging_resource}\'\", \"icon_emoji\": \":fractal:\"}" \
                      ${{ secrets.SLACK_HOOKS_ENDPOINT }}
                  fi

    main-webserver-hanging-packer-instance-notification:
        name: Main Webserver AWS Packer Instance Notification
        runs-on: ubuntu-20.04
        steps:
            - name: Checkout Git Repository
              uses: actions/checkout@v2

            - name: Set up Python 3.8
              uses: actions/setup-python@v2
              with:
                  python-version: 3.8

            - name: Configure AWS CLI
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ECS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_ECS_SECRET_ACCESS_KEY }}
                  aws-region: us-east-1

            - name: Check for Dangling Packer Instances and Notify in Slack if There Are Any
              working-directory: main-webserver
              run: |
                  pip install aws-hashicorp-packer-reaper
                  packer_instances=$(aws-hashicorp-packer-reaper list)
                  while IFS= read -r line 
                  do 
                    if [ "$(echo $line | sed 's/.*- //')" = "running" ]; then
                        curl -X POST \
                        --data-urlencode "payload={\"channel\": \"#alerts\", \"username\": \"Fractal Bot\", \"text\": \"Dangling Packer Instance: \'${line}\'\", \"icon_emoji\": \":fractal:\"}" \
                        ${{ secrets.SLACK_HOOKS_ENDPOINT }}
                    fi
                  done <<< "$packer_instances"
