# workflows/ecs-host-service-check-pr.yml
#
# ECS Host Service: Check PR
# Checks an ECS Host Service PR for linting and building success.

name: "ECS Host Service: Check PR"

on:
    pull_request:
        branches:
            - master
            - staging
            - dev
            - project/**
        paths:
            - "ecs-host-service/**"
            - "!ecs-host-service/README.md"
            - ".github/workflows/ecs-host-service-check-pr.yml"
    workflow_dispatch:

jobs:
    # Linting
    # Checks for formatting using Goimports.
    ecs-host-service-check-pr-linting:
        name: Linting
        runs-on: ubuntu-20.04

        steps:
            - name: Checkout Git Repository
              uses: actions/checkout@v2

            - name: Setup Go environment
              uses: actions/setup-go@v2.1.3

            - name: Install goimports
              working-directory: ecs-host-service
              run: go get -u golang.org/x/tools/cmd/goimports

            - name: Check if Code is Linted with goimports
              working-directory: ecs-host-service
              run: |
                  PATH=$PATH:~/go/bin
                  result=$(goimports -l *.go fractallogger/*.go fractalwebserver/*.go) # Returns nothing if all files are formatted, else returns files that need formatting
                  if [ "$result" -ne "0" ]; then
                    (echo "To pass this check please lint the code with goimports" && false)
                  else
                    (echo "Code is linted with goimports" && true)
                  fi

    # Building
    # Check that the ECS Host Service builds.
    ecs-host-service-check-pr-building:
        name: Building
        runs-on: ubuntu-20.04

        steps:
            - name: Checkout Git Repository
              uses: actions/checkout@v2

            - name: Setup Go environment
              uses: actions/setup-go@v2.1.3

            - name: Build Go project
              env:
                  WEBSERVER_AUTH_SECRET_DEV: ${{ secrets.HOST_SERVICE_AND_WEBSERVER_AUTH_SECRET_DEV }}
                  WEBSERVER_AUTH_SECRET_STAGING: ${{ secrets.HOST_SERVICE_AND_WEBSERVER_AUTH_SECRET_STAGING }}
                  WEBSERVER_AUTH_SECRET_PROD: ${{ secrets.HOST_SERVICE_AND_WEBSERVER_AUTH_SECRET_PROD }}
              working-directory: ecs-host-service
              run: make build
