# workflows/protocol-e2e-streaming-testing.yml
#
# Protocol: End-to-End Streaming Testing
# Compute the Protocol Streaming End-to-End benchmarks

name: "Protocol: End-to-End Streaming Testing"

on:
  push:
    branches:
      - dev
    paths:
      - "protocol/**"
      - "!protocol/**/README.md"
      - ".github/workflows/protocol-e2e-streaming-testing.yml"
      - "mandelboxes/helper_scripts/copy_protocol_build.sh"
  pull_request:
    paths:
      - "protocol/**"
      - "!protocol/**/README.md"
      - ".github/workflows/protocol-e2e-streaming-testing.yml"
      - "mandelboxes/helper_scripts/copy_protocol_build.sh"
  workflow_dispatch:

jobs:
  # This job runs a protocol streaming session between two Docker containers on the same
  # AWS EC2 instance to test end-to-end networking performance in a controlled environment.
  protocol-streaming-e2e-check-pr:
    name: "Protocol Streaming End-to-End Test"
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v2

      - name: Setup Python-based notifications
        working-directory: .github/workflows/helpers
        run: ./notifications/setup_notifications.sh true

      - name: Turnstyle
        uses: rpadaki/turnstyle@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS S3 CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_GITHUB_ACTIONS_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_GITHUB_ACTIONS_USER_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Load the AWS SSH keypair onto the runner, so that it can run remote commands on the AWS EC2 machine
      # running the streaming end-to-end test. This keypair is defined in AWS and stored as a GitHub Secret.
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          name: id_rsa
          key: ${{ secrets.PROTOCOL_E2E_SREAMING_TEST_INSTANCE_SSH_KEY }}
          known_hosts: unnecessary # Note, this is not secure and discouraged, but tolerable here given the instance is deleted after the test
          if_key_exists: fail

      - name: Install End-to-End Streaming Test Dependencies
        run: pip install boto3 paramiko numpy pytablewriter

      # Run the streaming end-to-end integration test. The -ssh-key-name must match the value in AWS EC2 under
      # Key Pairs, where the SSH key is defined. Other possible flags:
      # --testing_url, defaults to Big Buck Bunny video stored on our AWS S3
      # --testing_time, defaults to 126s
      # --cmake-build-type, defaults to `Metrics`
      # --region-name, defaults to `us-east-1`
      # --use-two-instances, defaults to `false`
      # --use-existing-server-instance, defaults to `` (empty string)
      # --use-existing-client-instance, defaults to `` (empty string)
      # --aws-credentials-filepath, defaults to `~/.aws/credentials`

      ### Action below will run the End-to-End Streaming Test for each new commit to a branch of a PR. ###
      - name: Run End-to-End Streaming Test (normal network conditions)
        id: e2e_streaming_test0
        working-directory: protocol/test
        run: python3 streaming_e2e_tester.py --ssh-key-name "GITHUB_ACTIONS_E2E_PERFORMANCE_TEST_SSH_KEYPAIR" --ssh-key-path "/home/runner/.ssh/id_rsa" --github-token "${{ secrets.GHA_PERSONAL_ACCESS_TOKEN }}" --use-two-instances=true --use-existing-client-instance "i-061d322780ae41d19" --use-existing-server-instance "i-0ceaa243ec8cfc667" --leave-instances-on=true

      - name: Run End-to-End Streaming Test (low bandwidth)
        id: e2e_streaming_test1
        if: ${{ always() && (steps.e2e_streaming_test0.outcome != 'skipped') && (steps.e2e_streaming_test0.outcome != 'cancelled') }}
        working-directory: protocol/test
        run: python3 streaming_e2e_tester.py --ssh-key-name "GITHUB_ACTIONS_E2E_PERFORMANCE_TEST_SSH_KEYPAIR" --ssh-key-path "/home/runner/.ssh/id_rsa" --github-token "${{ secrets.GHA_PERSONAL_ACCESS_TOKEN }}" --use-two-instances=true --use-existing-client-instance "i-061d322780ae41d19" --use-existing-server-instance "i-0ceaa243ec8cfc667" --leave-instances-on=true --skip-host-setup=true --skip-git-clone=true --network-conditions 1Mbit,none,none

      - name: Run End-to-End Streaming Test (low bandwidth + pkt drops)
        id: e2e_streaming_test2
        if: ${{ always() && (steps.e2e_streaming_test1.outcome != 'skipped') && (steps.e2e_streaming_test1.outcome != 'cancelled') }}
        working-directory: protocol/test
        run: python3 streaming_e2e_tester.py --ssh-key-name "GITHUB_ACTIONS_E2E_PERFORMANCE_TEST_SSH_KEYPAIR" --ssh-key-path "/home/runner/.ssh/id_rsa" --github-token "${{ secrets.GHA_PERSONAL_ACCESS_TOKEN }}" --use-two-instances=true --use-existing-client-instance "i-061d322780ae41d19" --use-existing-server-instance "i-0ceaa243ec8cfc667" --leave-instances-on=true --skip-host-setup=true --skip-git-clone=true --network-conditions 1Mbit,none,0.1

      - name: Run End-to-End Streaming Test (low bandwidth + pkt drops + delay)
        id: e2e_streaming_test3
        if: ${{ always() && (steps.e2e_streaming_test2.outcome != 'skipped') && (steps.e2e_streaming_test2.outcome != 'cancelled') }}
        working-directory: protocol/test
        run: python3 streaming_e2e_tester.py --ssh-key-name "GITHUB_ACTIONS_E2E_PERFORMANCE_TEST_SSH_KEYPAIR" --ssh-key-path "/home/runner/.ssh/id_rsa" --github-token "${{ secrets.GHA_PERSONAL_ACCESS_TOKEN }}" --use-two-instances=true --use-existing-client-instance "i-061d322780ae41d19" --use-existing-server-instance "i-0ceaa243ec8cfc667" --leave-instances-on=false --skip-host-setup=true --skip-git-clone=true --network-conditions 1Mbit,100,0.1

      # Steps below acknowledged to https://stackoverflow.com/questions/58033366/how-to-get-the-current-branch-within-github-actions
      - name: Get branch name (merge)
        if: ${{ always() && github.event_name != 'pull_request' }}
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Get branch name (pull request)
        if: ${{ always() && github.event_name == 'pull_request' }}
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_HEAD_REF} | tr / -)" >> $GITHUB_ENV

      # need one more section like this to ensure the S3 command works in case of failure/timeout of the Python script above
      - name: Upload logs to S3 for debugging purposes
        if: always()
        working-directory: protocol/test
        run: aws s3 cp perf_logs s3://whist-e2e-protocol-test-logs/"${{ env.BRANCH_NAME }}" --recursive

      - name: Stop or terminate leftover AWS instances
        if: ${{ always() && (steps.e2e_streaming_test3.outcome != 'success') }}
        working-directory: protocol/test
        run: python3 clean_leftover_instances.py

      # We parse the log files from the E2E performance tests above and display the results of the test.
      # We compare the performance to dev and the previous runs of the same branch, if available
      - name: Parse & Display Test Results
        if: always()
        working-directory: protocol/test
        env:
          GITHUB_GIST_TOKEN: ${{ secrets.GHA_PERSONAL_ACCESS_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ISSUE: ${{ github.event.number }}
          GITHUB_PR_URL: "https://github.com/whisthq/whist/pull/"
          SLACK_WEBHOOK: ${{ secrets.SLACK_HOOKS_ENDPOINT_DEV }}
        run: python3 ../../.github/workflows/helpers/parse_and_display_e2e_results.py --compared-branch-name "dev" "${{ env.BRANCH_NAME }}" --e2e-script-outcome "${{ steps.e2e_streaming_test0.outcome }}" "${{ steps.e2e_streaming_test1.outcome }}" "${{ steps.e2e_streaming_test2.outcome }}" "${{ steps.e2e_streaming_test3.outcome }}"

  #######################################################################################
