# workflows/protocol-check-pr.yml
#
# Protocol: Check PR
# Checks a protocol PR for building, linting, and clang standards success

name: "Protocol: Check PR"

on:
  push:
    # Trigger runs on our default branch, `dev`, to upload code coverage reports to Codecov
    branches:
      - dev
    paths:
      - "protocol/**"
      - "!protocol/**/README.md"
      - ".github/workflows/protocol-check-pr.yml"
      - "mandelboxes/helper_scripts/copy_protocol_build.sh"
  pull_request:
    paths:
      - "protocol/**"
      - "!protocol/**/README.md"
      - ".github/workflows/protocol-check-pr.yml"
      - "mandelboxes/helper_scripts/copy_protocol_build.sh"
  workflow_dispatch:

jobs:
  # Check Protocol PR on Intel X86_64 systems (via GHA runners)



  protocol-check-pr-x64:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}

    strategy:
      matrix:
        config:
          - name: "Build and Check Protocol on Windows (cl)"
            os: windows-2019 # llvm, cmake, clang-tidy are pre-installed on windows-2019+ GHA machines
            cuda: false # Set to true to CUDA-optimize the windows server executable. Note that CUDA takes 5-7min to install.
          - name: "Build and Check Protocol on Linux Ubuntu (gcc)"
            os: ubuntu-20.04 # cmake is pre-installed on ubuntu-20.04+ machines
          - name: "Build and Check Protocol on macOS X64 (clang)"
            os: macos-10.15 # cmake is pre-installed on macos-10.15+ machines

    env:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v2

      # Necessary for downloading protocol libs and base Dockerfile NVIDIA GRID drivers from AWS S3
      - name: Configure AWS S3 CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_S3_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      ############################# Windows Configuration Steps START #############################

      - name: Install Chocolatey dependencies on Windows GHA Machine
        if: runner.os == 'Windows'
        uses: crazy-max/ghaction-chocolatey@v1
        with:
          args: install cppcheck ninja

      - name: Set up Visual Studio Developer Command Prompt (for nmake) on Windows GHA Machine
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install CUDA on Windows GHA Machine
        if: runner.os == 'Windows' && matrix.config.cuda
        working-directory: .github\workflows\helpers\protocol
        env:
          visual_studio: "Visual Studio 16 2019" # Imported from env in the .ps1 script
          cuda: "11.0.167" # Imported from env in the .ps1 script, we use CUDA 11.0
        shell: powershell
        run: |
          .\install_cuda_windows.ps1

          if ($?) {
            # Set paths for subsequent steps, using $env:CUDA_PATH
            echo "Adding CUDA to CUDA_PATH, CUDA_PATH_X_Y and PATH"
            echo "CUDA_PATH=$env:CUDA_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            echo "$env:CUDA_PATH_VX_Y=$env:CUDA_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            echo "$env:CUDA_PATH/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          } else {
            exit 1
          }

      - name: Verify that NVCC is Installed on GHA Windows Machine
        if: runner.os == 'Windows' && matrix.config.cuda
        shell: powershell
        run: |
          nvcc -V
          ls $env:CUDA_PATH
          ls $env:CUDA_PATH\bin
          ls $env:CUDA_PATH\include

      - name: Register OS Compiler Matchers
        shell: bash --noprofile --norc -eo pipefail {0}
        run: |
          # OS-independent matchers
          echo " ::add-matcher::${{ github.workspace }}/.github/workflows/helpers/protocol/cppcheck_matcher.json"
          echo " ::add-matcher::${{ github.workspace }}/.github/workflows/helpers/protocol/cmake_matcher.json"

          # OS-specific matchers
          if [ "$RUNNER_OS" == "Linux" ]; then
              echo " ::add-matcher::${{ github.workspace }}/.github/workflows/helpers/protocol/gcc_matcher.json"
          elif [ "$RUNNER_OS" == "Windows" ]; then
              echo " ::add-matcher::${{ github.workspace }}/.github/workflows/helpers/protocol/msvc_matcher.json"
          elif [ "$RUNNER_OS" == "macOS" ]; then
              echo " ::add-matcher::${{ github.workspace }}/.github/workflows/helpers/protocol/clang_matcher.json"
          fi

      ############################# Windows Configuration Steps END #############################

      ############################# Unix Configuration Steps START #############################

      - name: Install macOS Client Protocol Dependencies on macOS GHA Machines
        if: runner.os == 'macOS'
        working-directory: protocol
        run: |
          # llvm for clang-tidy, coreutils for realpath, lcov for codecov
          brew install llvm coreutils perl doxygen lcov
          ln -s "/usr/local/opt/llvm/bin/clang-format" "/usr/local/bin/clang-format"
          ln -s "/usr/local/opt/llvm/bin/clang-tidy" "/usr/local/bin/clang-tidy"

      ############################# Unix Configuration Steps END #############################

      - name: Build and Test Protocol Client and Server on Windows
        if: runner.os == 'Windows'
        shell: cmd # Acts as Visual Studio Developer Command Prompt due to ilammy/msvc-dev-cmd@v1
        working-directory: protocol
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Debug -DCHECK_CI=TRUE -G "Ninja" || EXIT /B 1
          ninja FractalClient FractalClientTest || EXIT /B 1
          ninja FractalServer FractalServerTest || EXIT /B 1

      - name: Build and Test Protocol Client on macOS
        if: runner.os == 'macOS'
        working-directory: protocol
        env:
          FRACTAL_OSX_SYSROOT: "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk"
        run: |
          # Build the protocol and its test suite
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Debug -DCHECK_CI=TRUE
          make FractalClient FractalClientTest -j

      - name: Build and Test Protocol Client on Linux Ubuntu
        if: runner.os == 'Linux'
        working-directory: protocol
        run: ./build_protocol_targets.sh --cmakebuildtype=Debug --cmakesetCI FractalClient FractalClientTest

      - name: Build and Test Protocol Server on Linux Ubuntu
        if: runner.os == 'Linux'
        working-directory: protocol
        run: ./build_protocol_targets.sh --cmakebuildtype=Debug --cmakesetCI FractalServer FractalServerTest

      # Verify clang-format on Linux
      - name: Verify Builds with clang-format
        if: runner.os == 'Linux'
        working-directory: protocol
        run: |
          # Clang-matcher for clang-format, added after the main build sequence so that clang doesn't match gcc errors
          echo " ::add-matcher::${{ github.workspace }}/.github/workflows/helpers/protocol/clang_matcher.json"

          # Print clang-format version for local comparison
          clang-format --version

          ./build_protocol_targets.sh clang-format

          # Show diff in GitHub Actions logs
          git diff HEAD --

          # This will return an error if there is a non-empty diff
          git diff-index --quiet HEAD --

      - name: Verify Builds with clang-tidy on Linux Ubuntu
        if: runner.os == 'Linux'
        working-directory: protocol
        run: |
          # Clang-matcher for clang-tidy, added after the main build sequence so that clang doesn't match gcc/msvc errors
          echo " ::add-matcher::${{ github.workspace }}/.github/workflows/helpers/protocol/clang_matcher.json"

          ./build_protocol_targets.sh clang-tidy

      - name: Verify Builds with clang-tidy on macOS
        if: runner.os == 'macOS'
        working-directory: protocol
        run: |
          # Clang-matcher for clang-tidy, added after the main build sequence so that clang doesn't match gcc/msvc errors
          echo " ::add-matcher::${{ github.workspace }}/.github/workflows/helpers/protocol/clang_matcher.json"

          cd build
          make clang-tidy -j

      - name: Verify builds with clang-tidy on Windows
        if: runner.os == 'Windows'
        shell: cmd # Acts as Visual Studio Developer Command Prompt due to ilammy/msvc-dev-cmd@v1
        working-directory: protocol
        run: |
          # Clang-matcher for clang-tidy, added after the main build sequence so that clang doesn't match gcc/msvc errors
          echo " ::add-matcher::${{ github.workspace }}/.github/workflows/helpers/protocol/clang_matcher.json"

          cd build
          ninja clang-tidy || EXIT /B 1

      # This ensures that all the build files from build_protocol_targets.sh have actually been generated
      - name: Ensure that all protocol build files are present
        if: runner.os == 'Linux'
        working-directory: mandelboxes
        run: ./helper_scripts/copy_protocol_build.sh

      - name: Ensure CMake Files are Linted
        if: runner.os == 'Linux'
        working-directory: protocol
        run: pip install cmakelint && cmakelint --config=.cmakelintrc **/**/CMakeLists.txt
