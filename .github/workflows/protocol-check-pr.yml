# workflows/protocol-check-pr.yml
#
# Protocol: Check PR
# Checks a protocol PR for linting, clang standards and building success.

name: "Protocol: Check PR"

on:
    pull_request:
        branches:
            - master
            - staging
            - dev
        paths:
            - "protocol/**"
            - "!protocol/README.md"
            - ".github/workflows/protocol-check-pr.yml"
            - "container-images/helper-scripts/copy_protocol_build.sh"
    workflow_dispatch:

jobs:
    protocol-check-pr-building-linting:
        name: ${{ matrix.config.name }}
        runs-on: ${{ matrix.config.os }}

        # Platforms to build on/for
        strategy:
            matrix:
                config:
                    - name: "Build and Check Protocol on Windows (cl)"
                      os: windows-2019 # llvm, cmake, clang-tidy are pre-installed on windows-2019+ GHA machines
                      cuda: false # Set to true to CUDA-optimize the windows server executable. Note that CUDA takes 5-7min to install.
                    - name: "Build and Check Protocol on Linux Ubuntu (gcc)"
                      os: ubuntu-18.04 # cmake is pre-installed on ubuntu-18.04+ machines
                    - name: "Build and Check Protocol on macOS (clang)"
                      os: macos-10.14 # cmake is pre-installed on macos-10.14+ machines

        steps:
            - name: Checkout Git Repository
              uses: actions/checkout@v2

            # Necessary for downloading protocol libs and base Dockerfile NVIDIA GRID drivers from AWS S3
            - name: Configure AWS S3 CLI
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_S3_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}
                  aws-region: us-east-1

            ############################# Windows Configuration Steps START #############################

            - name: Install Chocolatey dependencies on Windows GHA Machine
              if: runner.os == 'Windows'
              uses: crazy-max/ghaction-chocolatey@v1
              with:
                  args: install cppcheck ninja

            - name: Set up Visual Studio Developer Command Prompt (for nmake) on Windows GHA Machine
              if: runner.os == 'Windows'
              uses: ilammy/msvc-dev-cmd@v1

            - name: Install CUDA on Windows GHA Machine
              if: runner.os == 'Windows' && matrix.config.cuda
              env:
                  visual_studio: "Visual Studio 16 2019" # Imported from env in the .ps1 script
                  cuda: "11.0.167" # Imported from env in the .ps1 script, we use CUDA 11.0
              shell: powershell
              working-directory: .github\workflows\helpers\protocol
              run: |
                  .\install_cuda_windows.ps1

                  if ($?) {
                    # Set paths for subsequent steps, using $env:CUDA_PATH
                    echo "Adding CUDA to CUDA_PATH, CUDA_PATH_X_Y and PATH"
                    echo "CUDA_PATH=$env:CUDA_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
                    echo "$env:CUDA_PATH_VX_Y=$env:CUDA_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
                    echo "$env:CUDA_PATH/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
                  } else {
                    exit 1
                  }

            - name: Verify that NVCC is Installed on GHA Windows Machine
              if: runner.os == 'Windows' && matrix.config.cuda
              shell: powershell
              run: |
                  nvcc -V
                  ls $env:CUDA_PATH
                  ls $env:CUDA_PATH\bin
                  ls $env:CUDA_PATH\include

            - name: Register OS Compiler Matchers
              shell: bash -e {0}
              run: |
                  # OS-independent matchers
                  echo " ::add-matcher::${{ github.workspace }}/.github/workflows/helpers/protocol/cppcheck_matcher.json"
                  echo " ::add-matcher::${{ github.workspace }}/.github/workflows/helpers/protocol/cmake_matcher.json"

                  # OS-specific matchers
                  if [ "$RUNNER_OS" == "Linux" ]; then
                      echo " ::add-matcher::${{ github.workspace }}/.github/workflows/helpers/protocol/gcc_matcher.json"
                  elif [ "$RUNNER_OS" == "Windows" ]; then
                      echo " ::add-matcher::${{ github.workspace }}/.github/workflows/helpers/protocol/msvc_matcher.json"
                  elif [ "$RUNNER_OS" == "macOS" ]; then
                      echo " ::add-matcher::${{ github.workspace }}/.github/workflows/helpers/protocol/clang_matcher.json"
                  fi

            ############################# Windows Configuration Steps END #############################

            ############################# Unix Configuration Steps START #############################

            - name: Install Linux/MacOS Client Protocol Dependencies on Linux/MacOS GHA Machines
              if: runner.os == 'Linux' || runner.os == 'macOS'
              shell: bash -e {0}
              working-directory: protocol
              run: |
                  if [ "$RUNNER_OS" == "Linux" ]; then
                      # update apt before installing packages to avoid package not found errors
                      sudo apt-get update

                      # install Linux protocol dependencies
                      ./setup-linux-build-environment.sh

                      # install clang-tidy, coreutils for realpath, and perl
                      sudo apt-get install -y clang-tidy coreutils perl cppcheck
                  else
                      # llvm for clang-tidy, coreutils for realpath
                      # llvm@7 is used so that clang-tidy reads "-p" argumet correctly on MacOS
                      brew install llvm@7 coreutils perl
                      ln -s "/usr/local/opt/llvm@7/bin/clang-format" "/usr/local/bin/clang-format"
                      ln -s "/usr/local/opt/llvm@7/bin/clang-tidy" "/usr/local/bin/clang-tidy"
                  fi

            ############################# Unix Configuration Steps END #############################

            - name: Build Protocol Client and Server on Windows
              if: runner.os == 'Windows'
              shell: cmd # Acts as Visual Studio Developer Command Prompt due to ilammy/msvc-dev-cmd@v1
              working-directory: protocol
              run: |
                  cmake . -DCMAKE_BUILD_TYPE=Debug -DCI=TRUE -G "Ninja" || EXIT /B 1
                  ninja FractalClient || EXIT /B 1
                  ninja FractalServer || EXIT /B 1

            - name: Build Protocol Client on Linux/MacOS
              if: runner.os == 'Linux' || runner.os == 'macOS'
              env:
                  FRACTAL_OSX_SYSROOT: "/Applications/Xcode_12.2.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk" # Necessary for building on macOS
              working-directory: protocol
              run: |
                  cmake . -DCMAKE_BUILD_TYPE=Debug -DCI=TRUE
                  make FractalClient -j

            - name: Build Protocol Server on Linux
              if: runner.os == 'Linux'
              working-directory: protocol
              run: |
                  make FractalServer -j

            # Verify clang-format on Linux
            - name: Verify Builds with clang-format
              if: runner.os == 'Linux'
              working-directory: protocol
              run: |
                  # Clang-matcher for clang-format, added after the main build sequence so that clang doesn't match gcc errors
                  echo " ::add-matcher::${{ github.workspace }}/.github/workflows/helpers/protocol/clang_matcher.json"

                  make clang-format -j

                  # Show diff in GitHub Actions logs
                  git diff HEAD --

                  # This will return an error if there is a non-empty diff
                  git diff-index --quiet HEAD --

            # Verify clang-tidy on all OS's
            - name: Verify Builds with clang-tidy
              shell: bash -e {0}
              working-directory: protocol
              run: |
                  # Clang-matcher for clang-tidy, added after the main build sequence so that clang doesn't match gcc/msvc errors
                  echo " ::add-matcher::${{ github.workspace }}/.github/workflows/helpers/protocol/clang_matcher.json"

                  ./run-clang-tidy.sh -c

            # This tests building the protocol in a container, the same way we do it in production
            - name: Build Protocol Server in Docker Container
              if: runner.os == 'Linux'
              working-directory: protocol
              run: ./build_protocol.sh release

            # This ensures that all the build files from build_protocol.sh have actually been generated
            - name: Ensure that all protocol build files are present
              if: runner.os == 'Linux'
              working-directory: container-images
              run: ./helper-scripts/copy_protocol_build.sh
