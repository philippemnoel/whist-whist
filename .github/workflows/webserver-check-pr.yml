# workflows/webserver-check-pr.yml
#
# Webserver: Check PR
# Checks a webserver PR for linting and unit/integration testing success, and
# compare the schema of the live database with webserver/db-migration/schema.sql,
# notifying the PR if schema changes are detected

name: "Webserver: Check PR"

on:
  pull_request:
    paths:
      - "!webserver/README.md"
      - "webserver/**"
      - "webserver/db_migration/schema.sql"
      - ".github/workflows/webserver-check-pr.yml"
      - pyproject.toml
      - pylintrc
  workflow_dispatch:

jobs:
  # Static analysis
  # Check for errors using Pylint. Perform static type analysis with Mypy
  webserver-check-pr-analyze:
    name: Static analysis
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v2

      - name: Set up Python 3.10.0
        uses: actions/setup-python@v2.3.0
        with:
          python-version: "3.10.0"

      - name: Install Dependencies
        working-directory: webserver
        run: pip install -r requirements.txt -r requirements-test.txt

      - name: Add pylint-wrapper to the PATH
        run: echo "$GITHUB_WORKSPACE/.github/workflows/helpers" >> "$GITHUB_PATH"

      - name: Check if Code Matches Pylint Standards
        run: pylint-wrapper webserver/app webserver/tests webserver/scripts

      - name: Perform static type analysis with mypy
        working-directory: webserver
        run: mypy --strict app scripts tests

  # Heroku Testing
  # Checks unit tests on the Heroku pipeline.
  # This step now gets run by `webserver-trigger-heroku-ci-and-upload-codecov-report.yml` to also run on
  # pushes to `dev`, to upload the Codecov report for the `dev` branch

  # Database Migration
  # Compare the schema of the live database with webserver/db-migration/schema.sql, and
  # notify the PR if schema changes are detected
  webserver-check-migra-diff:
    name: Check Migra Diff
    runs-on: ubuntu-20.04
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # needed for migra diff tool
      GITHUB_ISSUE: ${{ github.event.number }}
      GITHUB_PR_URL: "https://github.com/fractal/fractal/pull/"
      HEROKU_DB_KEY: "DATABASE_URL"
      HEROKU_API_TOKEN: ${{ secrets.HEROKU_DEVELOPER_API_KEY }} # needed to retrieve config vars from Heroku
      PATH_HELPERS: ".github/workflows/helpers"
      PATH_SCRIPTS: "webserver/db_migration"
      PATH_CURRENT: "../temporary_db_schema.sql"
      PATH_MERGING: "webserver/db_migration/schema.sql"
      PATH_DIFF: "../temporary_diff_file.sql"
      TITLE_ERROR: >-
        An error occured while comparing the database schema.
      TITLE_NO_CHANGES: >-
        Schema is unchanged, no database migration needed.
      TITLE_SAFE_CHANGES: >-
        There's some changes to be made to the schema!
      TITLE_UNSAFE_CHANGES: >-
        This PR introduces destructive changes to the schema!
      TITLE_INVALID_CHANGES: >-
        This PR will not migrate successfully.
      BODY_ERROR: >-
        The diff tool `migra` exited with an error.
      BODY_NO_CHANGES: >-
        Carry on!
      BODY_SAFE_CHANGES: >-
        The SQL commands below will perform the migration.
      BODY_UNSAFE_CHANGES: >-
        The schema diff produced some unsafe commands, which can be
        dangerous to run on the database.


        Remember these will be run automatically upon merge, so be sure
        to review these changes extra carefully.


        The SQL commands below will perform the migration.
      BODY_INVALID_CHANGES: >-
        The schema diff did not pass the migration test. The following
        SQL commands will not be applied properly to the database.

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v2

      - name: Log GitHub Context
        shell: python3 {0}
        run: |
          import os
          context = """
          GITHUB CONTEXT:
          ${{ toJSON(github) }}
          JOB CONTEXT:
          ${{ toJSON(job) }}
          STEPS CONTEXT:
          ${{ toJSON(steps) }}
          RUNNER CONTEXT:
          ${{ toJSON(runner) }}
          STRATEGY CONTEXT:
          ${{ toJSON(strategy) }}
          MATRIX CONTEXT:
          ${{ toJSON(matrix) }}
          """

      - name: Set up Python 3.10.0
        uses: actions/setup-python@v2.3.0
        with:
          python-version: "3.10.0"

      - name: Determine heroku app name
        run: |
          if [[ ${GITHUB_BASE_REF} == dev ]]; then
              HEROKU_APP_NAME=whist-dev-server
          elif [[ ${GITHUB_BASE_REF} == staging ]]; then
              HEROKU_APP_NAME=whist-staging-server
          elif [[ ${GITHUB_BASE_REF} == prod ]]; then
              HEROKU_APP_NAME=whist-prod-server
          else
              echo 'Error: Invalid branch' && false
          fi
          echo "HEROKU_APP_NAME=$HEROKU_APP_NAME" >> $GITHUB_ENV

      - name: Diff database schema with local schema.sql
        id: db-diff
        env:
          HEROKU_API_TOKEN: ${{ secrets.HEROKU_DEVELOPER_API_KEY }}
          HEROKU_APP_NAME: ${{ env.HEROKU_APP_NAME }}
        uses: ./.github/actions/db-migration

      # Need to install this dependency for the notification step.
      - name: Install Python Dependencies
        working-directory: webserver
        run: pip install PyGithub

      # Using the workflow notifcation helpers, we'll send out
      # formatted alerts based on the error code response from the
      # previous step.

      # Actual messages are defined in the environment configuration at
      # the top of this job.
      - name: Send Alerts on Diff Result
        shell: python3 {0}
        run: |
          import os
          import sys
          sys.path.append(".github/workflows/helpers")
          from notifications.github_bot import github_comment_update

          code = int(${{ steps.db-diff.outputs.code }})
          diff = """${{ steps.db-diff.outputs.diff }}"""

          print("MIGRA RETURN CODE:", code)
          print("MIGRA SQL DIFF:", diff)

          if not os.environ.get("GITHUB_ISSUE"):
            print("No GitHub Issue number! Skipping PR notification.")
            sys.exit(0)

          github_token = os.environ["GITHUB_TOKEN"]
          github_issue = int(os.environ["GITHUB_ISSUE"])
          github_repo = "fractal/fractal"

          identifier = "AUTOMATED_DB_MIGRATION_MESSAGE"

          if code == 0:
            title = os.environ["TITLE_NO_CHANGES"]
            body = os.environ["BODY_NO_CHANGES"]

          elif code == 2:
            title = ":construction:" + os.environ["TITLE_SAFE_CHANGES"] + ":construction:"
            body = os.environ["BODY_SAFE_CHANGES"]

          elif code == 3:
            title = ":exclamation:" + os.environ["TITLE_UNSAFE_CHANGES"] + ":exclamation:"
            body = os.environ["BODY_UNSAFE_CHANGES"]

          elif code == 4:
            title = ":rotating_light:" + os.environ["TITLE_INVALID_CHANGES"] + ":rotating_light:"
            body = os.environ["BODY_INVALID_CHANGES"]

          else:
            title = ":x:" + os.environ["TITLE_ERROR"] + ":x:"
            body = os.environ["BODY_ERROR"]

          github_comment_update(
            github_token,
            github_repo,
            github_issue,
            identifier,
            body,
            title=title,
            code=diff,
            lang="sql",
          )
