# workflows/fractal-deploy-sentry-releases.yml
#
# Whist: Deploy Sentry Releases
# Automatically push a new Sentry release for each of the fractal/fractal projects.

name: "Whist: Deploy Sentry Releases"

on:
  push:
    branches:
      - prod
      - staging
      - dev
    paths-ignore:
      - "README.md"
      - "**/README.md"
      - ".github/workflows/README.md"
  workflow_dispatch:

jobs:
  fractal-deploy-sentry-releases-main:
    name: "Deploy Sentry Release for: ${{ matrix.project.name }}"
    runs-on: ubuntu-20.04
    outputs:
      sentry_deploy_environment: ${{ steps.detect-environment.outputs.sentry_deploy_environment }}
      slack_webhook: ${{ steps.detect-environment.outputs.slack_webhook }}

    strategy:
      matrix:
        project:
          - name: Webserver
            sentry-project: webserver
          - name: Protocol (macOS, Windows, Linux Ubuntu)
            sentry-project: protocol
          - name: Host Service
            sentry-project: host-service
          - name: Client Applications (macOS, Windows, Linux Ubuntu)
            sentry-project: client-applications
    env:
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      SENTRY_ORG: whist
      SENTRY_PROJECT: ${{ matrix.project.sentry-project }}

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v2

      - name: Setup Python-based notifications
        working-directory: .github/workflows/helpers
        run: ./notifications/setup_notifications.sh

      - name: Set Git Repository URL to Enable sentry-cli Automatic Commit Tagging
        run: git remote set-url origin https://github.com/fractal/fractal

      - name: Set Deploy Environment Based on Git Branch
        id: detect-environment
        run: |
          if [ "${GITHUB_REF##*/}" == "prod" ]; then
              SENTRY_DEPLOY_ENVIRONMENT=prod
              SLACK_WEBHOOK=${{ secrets.SLACK_HOOKS_ENDPOINT_PROD }}
          elif [ "${GITHUB_REF##*/}" == "staging" ]; then
              SENTRY_DEPLOY_ENVIRONMENT=staging
              SLACK_WEBHOOK=${{ secrets.SLACK_HOOKS_ENDPOINT_STAGING }}
          else
              SENTRY_DEPLOY_ENVIRONMENT=dev
              SLACK_WEBHOOK=${{ secrets.SLACK_HOOKS_ENDPOINT_DEV }}
          fi

          echo "Sentry environment is set to: $SENTRY_DEPLOY_ENVIRONMENT"
          echo "::set-output name=sentry_deploy_environment::$SENTRY_DEPLOY_ENVIRONMENT"
          echo "::set-output name=slack_webhook::$SLACK_WEBHOOK"

      - name: Create New Sentry Release
        run: |
          # Install Sentry CLI
          curl -sL https://sentry.io/get-cli/ | bash

          # Create new Sentry release
          export SENTRY_RELEASE=$(sentry-cli releases propose-version)
          sentry-cli releases new $SENTRY_RELEASE --project $SENTRY_PROJECT
          sentry-cli releases set-commits --auto $SENTRY_RELEASE --log-level=debug
          sentry-cli releases finalize $SENTRY_RELEASE

          # Create new deploy for this Sentry release
          sentry-cli releases deploys $SENTRY_RELEASE new -e ${{ steps.detect-environment.outputs.sentry_deploy_environment }}

      - name: Notify Slack on Failure
        if: failure()
        shell: python3 {0}
        run: |
          from notifications.slack_bot import slack_post

          SLACK_WEBHOOK = "${{ steps.detect-environment.outputs.slack_webhook }}"
          SLACK_CHANNEL = "#alerts-${{ steps.detect-environment.outputs.sentry_deploy_environment }}"
          BODY = f"@releases :rotating_light: Failed to deploy `$SENTRY_PROJECT` Sentry release on branch: `${{ steps.detect-environment.outputs.sentry-deploy-environment }}`, investigate immediately :rotating_light: (<https://github.com/fractal/fractal/actions/runs/${{ github.run_id }} | see logs>)"

          slack_post(slack_webhook=SLACK_WEBHOOK, channel=SLACK_CHANNEL, body=BODY)

  notify-slack:
    name: Notify Slack
    runs-on: ubuntu-20.04
    needs: [fractal-deploy-sentry-releases-main]
    if: success()
    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v2

      - name: Setup Python-based notifications
        working-directory: .github/workflows/helpers
        run: ./notifications/setup_notifications.sh

      - name: Notify Slack on Success
        shell: python3 {0}
        run: |
          from notifications.slack_bot import slack_post

          SLACK_WEBHOOK = "${{ needs.fractal-deploy-sentry-releases-main.outputs.slack_webhook }}"
          SLACK_CHANNEL = "#alerts-${{ needs.fractal-deploy-sentry-releases-main.outputs.sentry_deploy_environment }}"
          TITLE = ":sentry: Sentry Releases Deployed :sentry:"
          BODY = f"Sentry Releases for Whist Sentry Projects `webserver`, `protocol`, `host-service`, and `client-applications` deployed to Sentry on branch: `${{ needs.fractal-deploy-sentry-releases-main.outputs.sentry-deploy-environment }}` (<https://github.com/fractal/fractal/actions/runs/${{ github.run_id }} | see logs>)"

          slack_post(slack_webhook=SLACK_WEBHOOK, channel=SLACK_CHANNEL, body=BODY, title=TITLE)
