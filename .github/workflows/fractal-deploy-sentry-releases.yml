# workflows/fractal-deploy-sentry-releases.yml
#
# Fractal: Deploy Sentry Releases
# Automatically push a new Sentry release for each of the fractal/fractal projects.

name: "Fractal: Deploy Sentry Releases"

on:
    push:
        branches:
            - prod
            - staging
            - dev
        paths-ignore:
            - "README.md"
            - "**/README.md"
            - ".github/workflows/README.md"
    workflow_dispatch:

jobs:
    fractal-deploy-sentry-releases-main:
        name: "Deploy Sentry Release for: ${{ matrix.project.name }}"
        runs-on: ubuntu-20.04
        outputs:
            sentry-deploy-environment: ${{ steps.detect-sentry-environment.outputs.sentry-deploy-environment }}

        strategy:
            matrix:
                project:
                    - name: Main Webserver
                      sentry-project: main-webserver
                    - name: Protocol (macOS, Windows, Linux Ubuntu)
                      sentry-project: desktop-protocol
                    - name: ECS Host Service
                      sentry-project: ecs-host-service
                    - name: Client Applications (macOS, Windows, Linux Ubuntu)
                      sentry-project: desktop-client
        env:
            SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
            SENTRY_ORG: tryfractal
            SENTRY_PROJECT: ${{ matrix.project.sentry-project }}

        steps:
            - name: Checkout Git Repository
              uses: actions/checkout@v2

            - name: Setup Python-based notifications
              working-directory: .github/workflows/helpers
              run: |
                  pip install -r notifications/requirements.txt
                  # allows us to import from notifications package anywhere in this job
                  echo "PYTHONPATH=$PYTHONPATH:$(pwd)" >> $GITHUB_ENV

            - name: Set Git Repository URL to Enable sentry-cli Automatic Commit Tagging
              run: git remote set-url origin https://github.com/fractal/fractal

            - name: Set SENTRY_DEPLOY_ENVIRONMENT Environment Variable Based on Git Branch
              id: detect-sentry-environment
              run: |
                  if [ "${GITHUB_REF##*/}" == "prod" ]; then
                      echo "SENTRY_DEPLOY_ENVIRONMENT=prod" >> $GITHUB_ENV
                  elif [ "${GITHUB_REF##*/}" == "staging" ]; then
                      echo "SENTRY_DEPLOY_ENVIRONMENT=staging" >> $GITHUB_ENV
                  else
                      echo "SENTRY_DEPLOY_ENVIRONMENT=dev" >> $GITHUB_ENV
                  fi
                  echo "SENTRY_DEPLOY_ENVIRONMENT=test" >> $GITHUB_ENV # TODO: remove

            # - name: Create New Sentry Release
            #   run: |
            #       # Install Sentry CLI
            #       curl -sL https://sentry.io/get-cli/ | bash

            #       # Create new Sentry release
            #       export SENTRY_RELEASE=$(sentry-cli releases propose-version)
            #       sentry-cli releases new $SENTRY_RELEASE --project $SENTRY_PROJECT
            #       sentry-cli releases set-commits --auto $SENTRY_RELEASE --log-level=debug
            #       sentry-cli releases finalize $SENTRY_RELEASE

            #       # Create new deploy for this Sentry release
            #       sentry-cli releases deploys $SENTRY_RELEASE new -e $SENTRY_DEPLOY_ENVIRONMENT

            - name: fail specific
              shell: python3 {0}
              run: |
                import os
                assert os.environ["SENTRY_PROJECT"] != "main-webserver"

            - name: Notify Slack on failure
              if: failure()
              shell: python3 {0}
              run: |
                  import os
                  from notifications import slack_post

                  SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT }}"
                  SENTRY_DEPLOY_ENVIRONMENT = os.environ["SENTRY_DEPLOY_ENVIRONMENT"]
                  SLACK_CHANNEL = f"#alerts-{SENTRY_DEPLOY_ENVIRONMENT}"
                  BODY = f"@channel Failed to deploy Fractal Sentry Releases for Environment `{SENTRY_DEPLOY_ENVIRONMENT}`."

                  print("channel", SLACK_CHANNEL)
                  print("body", BODY)
                  slack_post(slack_webhook=SLACK_WEBHOOK, channel=SLACK_CHANNEL, body=BODY)

    notify-slack:
        name: Notify Slack
        runs-on: ubuntu-20.04
        needs: [fractal-deploy-sentry-releases-main]
        if: success()
        steps:
            - name: Checkout Git Repository
              uses: actions/checkout@v2

            - name: Setup Python-based notifications
              working-directory: .github/workflows/helpers
              run: |
                  pip install -r notifications/requirements.txt
                  # allows us to import from notifications package anywhere in this job
                  echo "PYTHONPATH=$PYTHONPATH:$(pwd)" >> $GITHUB_ENV

            - name: Notify Slack on success
              shell: python3 {0}
              run: |
                  from notifications import slack_post

                  SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT }}"
                  SLACK_CHANNEL = "#alerts-${{ needs.fractal-deploy-sentry-releases-main.outputs.sentry-deploy-environment }}"
                  BODY = "Fractal Sentry Releases for Environment `${{ needs.fractal-deploy-sentry-releases-main.outputs.sentry-deploy-environment }}` Deployed to Sentry."

                  slack_post(slack_webhook=SLACK_WEBHOOK, channel=SLACK_CHANNEL, body=BODY)
