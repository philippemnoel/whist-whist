# workflows/whist-deploy-sentry-releases.yml
#
# Whist: Deploy Sentry Releases
# Automatically push a new Sentry release for each of the whisthq/whist projects.

name: "Whist: Deploy Sentry Releases"

on:
  push:
    branches:
      - prod
      - staging
      - dev
    paths-ignore:
      - "README.md"
      - "**/README.md"
      - ".github/workflows/README.md"
  workflow_dispatch:

# This guarantees that if you push many commits to the same PR, only the latest
# commit will get run (others get cancelled)
concurrency:
  group: whist-deploy-sentry-releases-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  whist-deploy-sentry-releases-main:
    name: "Deploy Sentry Release for: ${{ matrix.project.name }}"
    runs-on: ubuntu-20.04
    outputs:
      sentry-deploy-environment: ${{ steps.set-deploy-environment.outputs.environment }}

    strategy:
      matrix:
        project:
          - name: Client Applications (macOS, Windows, Linux)
            sentry-project: client-applications
          - name: Host Service
            sentry-project: host-service
          - name: Mandelboxes
            sentry-project: mandelboxes
          - name: Protocol (macOS, Windows, Linux)
            sentry-project: protocol
          - name: Scaling Service
            sentry-project: scaling-service
          - name: Website
            sentry-project: website

    env:
      SENTRY_ORG: whist
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3

      - name: Set Deploy Environment
        id: set-deploy-environment
        uses: ./.github/actions/set-environment
        with:
          ref: ${{ github.ref }}

      - name: Setup Python-based notifications
        working-directory: .github/workflows/helpers
        run: ./notifications/setup_notifications.sh

      - name: Set Git Repository URL to Enable sentry-cli Automatic Commit Tagging
        run: git remote set-url origin https://github.com/whisthq/whist

      - name: Create New Sentry Release
        env:
          SENTRY_DEPLOY_ENVIRONMENT: ${{ steps.set-deploy-environment.outputs.environment }}
        run: |
          # Install Sentry CLI
          curl -sL https://sentry.io/get-cli/ | bash

          # Create new Sentry release
          export SENTRY_RELEASE=$(sentry-cli releases propose-version)
          sentry-cli releases new $SENTRY_RELEASE --project ${{ matrix.project.sentry-project }}
          sentry-cli releases set-commits --auto $SENTRY_RELEASE --log-level=debug
          sentry-cli releases finalize $SENTRY_RELEASE

          # Create new deploy for this Sentry release
          sentry-cli releases deploys $SENTRY_RELEASE new -e $SENTRY_DEPLOY_ENVIRONMENT

      - name: Notify Slack on Failure
        if: failure()
        shell: python3 {0}
        run: |
          # Retrieve Slack webhook
          if "prod" in "${{ steps.set-deploy-environment.outputs.environment }}":
            SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_PROD }}"
          elif "staging" in "${{ steps.set-deploy-environment.outputs.environment }}":
            SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_STAGING }}"
          else:
            SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_DEV }}"

          from notifications.slack_bot import slack_post
          BODY = f"@releases :rotating_light: Failed to deploy `${{ matrix.project.sentry-project }}` Sentry release on branch: `${{ steps.set-deploy-environment.outputs.environment }}`, investigate immediately :rotating_light: (<https://github.com/whisthq/whist/actions/runs/${{ github.run_id }} | see logs>)"
          slack_post(slack_webhook=SLACK_WEBHOOK, body=BODY)

  notify-slack:
    name: Notify Slack
    runs-on: ubuntu-20.04
    needs: [whist-deploy-sentry-releases-main]
    if: success()
    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3

      - name: Setup Python-based notifications
        working-directory: .github/workflows/helpers
        run: ./notifications/setup_notifications.sh

      - name: Notify Slack on Success
        shell: python3 {0}
        run: |
          # Retrieve Slack webhook
          if "prod" in "${{ needs.whist-deploy-sentry-releases-main.outputs.sentry-deploy-environment }}":
            SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_PROD }}"
          elif "staging" in "${{ needs.whist-deploy-sentry-releases-main.outputs.sentry-deploy-environment }}":
            SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_STAGING }}"
          else:
            SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_DEV }}"

          from notifications.slack_bot import slack_post
          TITLE = ":sentry: Sentry Releases Deployed :sentry:"
          BODY = f"Sentry Releases for Whist Sentry Projects  `client-applications`, `host-service`, `mandelboxes`, `protocol`, `scaling-service`, and `website` deployed to Sentry on branch: `${{ needs.whist-deploy-sentry-releases-main.outputs.sentry-deploy-environment }}` (<https://github.com/whisthq/whist/actions/runs/${{ github.run_id }} | see logs>)"
          slack_post(slack_webhook=SLACK_WEBHOOK, body=BODY, title=TITLE)
