# workflows/website-linting.yml
#
# Website: Check PR
# Checks a website PR for linting and building success.

name: "Website: Check PR"

on:
  pull_request:
    paths:
      - "frontend/website/**"
      - "!frontend/website/README.md"
      - ".github/workflows/website-check-pr.yml"
      - "frontend/core-ts/**"
      - "!frontend/core-ts/README.md"
      - ".github/workflows/core-ts-check-pr.yml"
  workflow_dispatch:

# This guarantees that if you push many commits to the same PR, only the latest
# commit will get run (others get cancelled)
concurrency:
  group: website-check-pr-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  # Linting
  # Checks for formatting using ESlint.
  website-linting-check-pr-linting:
    name: Linting
    runs-on: ubuntu-20.04

    env:
      CI: true
      NPM_TOKEN: ${{ secrets.GHA_PERSONAL_ACCESS_TOKEN }}

    steps:
      - name: Check out Git Repository
        uses: actions/checkout@v3

      - name: Set up NodeJS Environment
        uses: actions/setup-node@v3.1.1
        with:
          node-version: "16"

      - name: Run yarn install
        working-directory: frontend/website
        run: yarn install

      - name: Check if code follows ESLint standards
        working-directory: frontend/website
        run: yarn run lint:check

  # Check Netlify Deploy Preview
  website-deploy-preview-netlify:
    name: "Netlify Deploy Preview"
    runs-on: ubuntu-20.04
    env:
      NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3

      - name: Install Dependencies
        working-directory: frontend/website
        run: yarn install

      - name: Configure Netlify
        working-directory: frontend/website
        run: |
          npx netlify --telemetry-disable

          if [[ ${{ github.base_ref }} == dev ]]; then
            NETLIFY_APP_NAME=whist-dev
          elif [[ ${{ github.base_ref }} == staging ]]; then
            NETLIFY_APP_NAME=whist-staging
          elif [[ ${{ github.base_ref }} == prod ]]; then
            NETLIFY_APP_NAME=whist-prod
          else
            NETLIFY_APP_NAME=whist-dev
          fi
          npx netlify link --name $NETLIFY_APP_NAME

      - name: Build and Deploy Netlify Website
        working-directory: frontend/website
        run: |
          npx netlify build --context deploy-preview
          npx netlify deploy --json > deploy.json

      # Need to install this dependency for the notification step.
      - name: Install Python Dependencies
        run: pip install PyGithub

      - name: Update GitHub PR Comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ISSUE: ${{ github.event.number }}
          GITHUB_PR_URL: "https://github.com/whisthq/whist/pull/"
        shell: python3 {0}
        run: |
          import os
          import json
          import sys
          sys.path.append(".github/workflows/helpers")
          from notifications.github_bot import github_comment_update

          if not os.environ.get("GITHUB_ISSUE"):
            print("No GitHub PR/Issue number! Skipping PR notification.")
            sys.exit(0)

          github_token = os.environ["GITHUB_TOKEN"]
          github_issue = int(os.environ["GITHUB_ISSUE"])
          github_repo = "whisthq/whist"

          identifier = "AUTOMATED_NETLIFY_DEPLOY_PREVIEW_MESSAGE"

          title = "Netlify Deploy Preview"
          with open("frontend/website/deploy.json") as file:
            data = json.load(file)
            body = f"Deploy preview: {data['deploy_url']}\n\nDeploy logs: {data['logs']}"

          github_comment_update(
            github_token,
            github_repo,
            github_issue,
            identifier,
            body,
            title=title,
          )
