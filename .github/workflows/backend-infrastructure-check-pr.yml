# workflows/backend-infrastructure-check-pr.yml
#
# Infrastructure: Check PR
# Check Terraform code, format, validate and output plan.

name: "Infrastructure: Check PR"
on:
  push:
    branches:
      - dev
      - staging
      - prod
    paths:
      - "backend/infrastructure/**"
  pull_request:
    paths:
      - "backend/infrastructure/**"
  workflow_dispatch:

jobs:
  terraform-validate-and-plan:
    name: Terraform validate and plan
    runs-on: ubuntu-20.04
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_GITHUB_ACTIONS_USER_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_GITHUB_ACTIONS_USER_SECRET_ACCESS_KEY }}

    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Checkout Git Repository
        uses: actions/checkout@v2

      - name: Format Terraform code
        run: terraform fmt -check

      - name: Initialize Terraform
        working-directory: backend/infrastructure
        run: cd "dev" && cd "$BRANCH_NAME" && terraform init

      - name: Validate Terraform code
        working-directory: backend/infrastructure
        run: cd "dev" && cd "$BRANCH_NAME" && terraform validate -no-color

      - name: Terraform Plan
        working-directory: backend/infrastructure
        run: cd "dev" && cd "$BRANCH_NAME" && terraform plan -no-color
      
      # Need to install this dependency for the notification step.
      - name: Install Python Dependencies
        working-directory: backend/webserver
        run: pip install PyGithub

      - name: Notify Terraform result
        shell: python3 {0}
        run: |
          import os
          import sys
          sys.path.append(".github/workflows/helpers")
          from notifications.github_bot import github_comment_update

          if not os.environ.get("GITHUB_ISSUE"):
            print("No GitHub Issue number! Skipping PR notification.")
            sys.exit(0)

          github_token = os.environ["GITHUB_TOKEN"]
          github_issue = int(os.environ["GITHUB_ISSUE"])
          github_repo = "whisthq/whist"

          identifier = "AUTOMATED_DB_MIGRATION_MESSAGE"

          body = f"""#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outputs.stdout }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*"""

          github_comment_update(
            github_token,
            github_repo,
            github_issue,
            identifier,
            body,
          )
