# workflows/client-applications-check-pr.yml
#
# Client Applications: Check PR
# Checks a client-applications PR for linting and building success.

name: "Client Applications: Check PR"

on:
    pull_request:
        branches:
            - master
            - staging
            - dev
            - project/**
        paths:
            - "client-applications/**"
            - "!client-applications/README.md"
            - ".github/workflows/client-applications-linting.yml"
    workflow_dispatch:

jobs:
    # Linting
    # Checks for formatting using ESlint.
    client-applications-check-pr-linting:
        name: Linting
        runs-on: ubuntu-20.04

        steps:
            - name: Checkout Git Repository
              uses: actions/checkout@v2

            - name: Install Node.js 12
              uses: actions/setup-node@v1
              with:
                  node-version: 12

            - name: Run yarn -i in /desktop
              working-directory: client-applications/desktop
              run: yarn -i

            - name: Check if code follows ESLint standards
              working-directory: client-applications/desktop
              run: yarn lint-check

    # Building
    # Check that the Client Applications build.
    client-applications-check-pr-building:
        name: Building on ${{ matrix.config.name }}
        runs-on: ${{ matrix.config.os }}

        strategy:
            matrix:
                config:
                    - name: Windows
                      os: windows-2016
                    - name: macOS
                      os: macos-10.14

        steps:
            - name: Checkout Git Repository
              uses: actions/checkout@v2







            ############################# Unix Configuration Steps START #############################

            - name: Install macOS Codesigning Certificates on macOS GHA Machine
              if: runner.os == 'macOS'
              uses: apple-actions/import-codesign-certs@v1
              with:
                  p12-file-base64: ${{ secrets.MACOS_SIGNING_CERTIFICATE }}
                  p12-password: ${{ secrets.MACOS_SIGNING_CERTIFICATE_PASSWORD }}

            - name: Install Linux Client Protocol Dependencies on Linux Ubuntu GHA Machines
              if: runner.os == 'Linux'
              run: ./protocol/setup-linux-build-environment.sh

            ############################# Unix Configuration Steps END #############################


            - name: Build the Windows Electron Application
              if: runner.os == 'Windows'
              shell: cmd # Acts as Visual Studio Developer Command Prompt due to ilammy/msvc-dev-cmd@v1
              working-directory: client-applications\desktop
              run: .\publish.bat -branch=master -version=1.0.0 -bucket=test -publish=false
              
              
            


            - name: Build the macOS Electron Applications
              if: runner.os == 'macOS'
              env:
                  FRACTAL_OSX_SYSROOT: "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk" # Necessary for building on macOS (protocol does NOT support 10.15+ SDKs)
              shell: bash
              working-directory: client-applications/desktop
              run: |
                  # Explicitly retrieve macOS 10.14 SDK
                  wget https://github.com/phracker/MacOSX-SDKs/releases/download/10.15/MacOSX10.14.sdk.tar.xz

                  # Untar it
                  xz -d MacOSX10.14.sdk.tar.xz
                  tar -xf MacOSX10.14.sdk.tar

                  # Move it to the right folder for building the protocol
                  mv MacOSX10.14.sdk /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs

                  # Build the Fractal protocol and package the Electron application
                  ./publish.sh --branch master --version ${{ env.desktop_app_new_version }} --bucket ${{ env.s3_bucket }} --publish true






