# workflows/client-applications-check-pr.yml
#
# Client Applications: Check PR
# Checks a client-applications PR for linting and building success

name: "Client Applications: Check PR"

on:
  pull_request:
    paths:
      - "frontend/client-applications/**"
      - "frontend/core-ts/**"
      - ".github/workflows/client-applications-check-pr.yml"
      - ".github/workflows/core-ts-check-pr.yml"
      - "!frontend/client-applications/README.md"
      - "!frontend/core-ts/README.md"
  workflow_dispatch:

# This guarantees that if you push many commits to the same PR, only the latest
# commit will get run (others get cancelled)
concurrency:
  group: client-applications-check-pr-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  # Linting
  # Check that the client-applications code is properly linted
  client-applications-check-pr-linting:
    name: Linting
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3

      - name: Set up NodeJS Environment
        uses: actions/setup-node@v3.3.0
        with:
          node-version: "16"

      - name: Run yarn install
        working-directory: frontend/client-applications
        run: |
          # We need to increase the timeout to deal with GHA's weak VMs.
          yarn config set network-timeout 600000
          yarn cache clean
          yarn install

      - name: Check if Code Follows ESLint Standards
        working-directory: frontend/client-applications
        run: yarn run lint:check

  #######################################################################################
  #######################################################################################

  # Building
  # Check that the macOS and Windows client applications build
  client-applications-check-pr-building:
    name: Building on ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}

    strategy:
      matrix:
        config:
          - name: Windows
            os: windows-2019
            arch: x86_64
          - name: macOS (x64)
            os: macos-11.0
            arch: x86_64
          - name: macOS (arm64)
            os: macos-11.0
            arch: arm64

    steps:
      ################################# CONFIG STEPS START ###############################

      # Get the whole git history. We must do this because the
      # client app calls `git describe` in order to bake the
      # version number into the React frontend.
      - name: Checkout Git Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up NodeJS Environment
        uses: actions/setup-node@v3.3.0
        with:
          node-version: "16"

      # To retrieve Whist protocol libraries from AWS S3
      - name: Configure AWS S3 CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_GITHUB_ACTIONS_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_GITHUB_ACTIONS_USER_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set Deploy Environment Based on Git Branch
        shell: bash --noprofile --norc -eo pipefail {0}
        run: |
          if [ "${GITHUB_REF##*/}" == "prod" ]; then
              echo "DEPLOY_ENVIRONMENT=prod" >> $GITHUB_ENV
          elif [ "${GITHUB_REF##*/}" == "staging" ]; then
              echo "DEPLOY_ENVIRONMENT=staging" >> $GITHUB_ENV
          else
              echo "DEPLOY_ENVIRONMENT=dev" >> $GITHUB_ENV
          fi
          echo "deploy_environment is set to: $DEPLOY_ENVIRONMENT"

      ###################################################################################
      ################################ WINDOWS STEPS START ##############################

      - name: Install cmake via Chocolatey on Windows GHA Machine
        if: runner.os == 'Windows'
        uses: crazy-max/ghaction-chocolatey@v2
        with:
          args: install cmake --pre --no-progress --installargs 'ADD_CMAKE_TO_PATH=System'

      - name: Set up Visual Studio Developer Command Prompt (for nmake)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Build the Windows Electron Application
        if: runner.os == 'Windows'
        working-directory: frontend/client-applications
        env:
          AMPLITUDE_KEY: ${{ secrets.CLIENTAPP_AMPLITUDE_KEY }}
        shell: cmd # Acts as Visual Studio Developer Command Prompt due to ilammy/msvc-dev-cmd@v1
        run: |
          REM Build the Whist protocol and package the Electron application, using a hardcoded test version
          REM We use "call" before since ancient DOS versions don't support recursively executing batch files
          REM We need to increase the timeout to deal with GHA's weak VMs.
          call yarn config set network-timeout 600000
          call yarn cache clean
          call yarn install
          call yarn package:notarize --version=1.0.0 --commit=${{ github.sha }}

      ###################################################################################
      ################################# MACOS STEPS START ###############################

      - name: Install macOS Codesigning Certificates on macOS GHA Machine
        if: runner.os == 'macOS'
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.MACOS_SIGNING_P12_CERTIFICATES_BASE64_ENCODED }}
          p12-password: ${{ secrets.MACOS_SIGNING_P12_CERTIFICATES_BASE64_ENCODED_PASSWORD }}

      # This step follows the specs in https://github.com/electron/electron-notarize#notes-on-jwt-authentication
      - name: Install macOS Notarization API Key
        if: runner.os == 'macOS'
        run: |
          mkdir -p ~/private_keys
          aws s3 cp s3://whist-dev-secrets/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8 ~/private_keys

      - name: Build the macOS Electron Application
        if: runner.os == 'macOS'
        working-directory: frontend/client-applications
        env:
          AMPLITUDE_KEY: ${{ secrets.CLIENTAPP_AMPLITUDE_KEY }}
          MACOS_ARCH: "${{ matrix.config.arch }}"
          # These two environment variables must be set as per https://www.npmjs.com/package/electron-builder-notarize#api-key
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_KEY_ISSUER_ID: ${{ secrets.APPLE_API_KEY_ISSUER_ID }}
        run: |
          # Build the Whist protocol and package the Electron application, using a hardcoded test version
          # We need to increase the timeout to deal with GHA's weak VMs.
          yarn config set network-timeout 600000
          yarn cache clean
          yarn install
          yarn package:notarize --version 1.0.0 --commit ${{ github.sha }}
