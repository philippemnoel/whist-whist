# workflows/client-applications-check-pr.yml
#
# Client Applications: Check PR
# Checks a client-applications PR for linting and building success.

name: "Client Applications: Check PR"

on:
    pull_request:
        branches:
            - prod
            - staging
            - dev
        paths:
            - "client-applications/**"
            - "!client-applications/README.md"
            - ".github/workflows/client-applications-check-pr.yml"
            - "core-ts/**"
            - "!core-ts/README.md"
            - ".github/workflows/core-ts-check-pr.yml"
    workflow_dispatch:

jobs:
    # Linting
    # Checks for formatting using ESlint.
    client-applications-check-pr-linting:
        name: Linting
        runs-on: ubuntu-20.04

        steps:
            - name: Checkout Git Repository
              uses: actions/checkout@v2

            - name: Install Node.js 14
              uses: actions/setup-node@v2.1.5
              with:
                  node-version: 14

            - name: Run yarn install in /desktop
              working-directory: client-applications/desktop
              run: |
                  # We need to increase the timeout to deal with GHA's weak VMs.
                  yarn config set network-timeout 600000
                  yarn cache clean
                  yarn install

            - name: Check if Code Follows ESLint Standards
              working-directory: client-applications/desktop
              run: yarn lint:check

    # Building
    # Check that the Client Applications build.
    client-applications-check-pr-building:
        name: Building on ${{ matrix.config.name }}
        runs-on: ${{ matrix.config.os }}

        strategy:
            matrix:
                config:
                    - name: Windows
                      os: windows-2016
                    - name: macOS
                      os: macos-10.14

        steps:
            - name: Checkout Git Repository
              uses: actions/checkout@v2
              with:
                  # Get the whole git history. We must do this because the
                  # client app calls `git describe` in order to bake the
                  # version number into the react frontend.
                  fetch-depth: 0

            # To retrieve Fractal protocol libraries from AWS S3
            - name: Configure AWS S3 CLI
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_S3_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}
                  aws-region: us-east-1

            - name: Set Deploy Environment Based on Git Branch
              shell: bash
              run: |
                  if [ "${GITHUB_REF##*/}" == "prod" ]; then
                      echo "DEPLOY_ENVIRONMENT=prod" >> $GITHUB_ENV
                  elif [ "${GITHUB_REF##*/}" == "staging" ]; then
                      echo "DEPLOY_ENVIRONMENT=staging" >> $GITHUB_ENV
                  else
                      echo "DEPLOY_ENVIRONMENT=dev" >> $GITHUB_ENV
                  fi
                  echo "deploy_environment is set to: $DEPLOY_ENVIRONMENT"

            ############################# Windows Configuration Steps START #############################

            - name: Install cmake via Chocolatey on Windows GHA Machine
              if: runner.os == 'Windows'
              uses: crazy-max/ghaction-chocolatey@v1
              with:
                  args: install cmake --no-progress --installargs 'ADD_CMAKE_TO_PATH=System'

            - name: Set up Visual Studio Developer Command Prompt (for nmake)
              if: runner.os == 'Windows'
              uses: ilammy/msvc-dev-cmd@v1

            ############################# Windows Configuration Steps END #############################

            ############################# Unix Configuration Steps START #############################

            - name: Install macOS Codesigning Certificates on macOS GHA Machine
              if: runner.os == 'macOS'
              uses: apple-actions/import-codesign-certs@v1
              with:
                  p12-file-base64: ${{ secrets.MACOS_SIGNING_CERTIFICATE }}
                  p12-password: ${{ secrets.MACOS_SIGNING_CERTIFICATE_PASSWORD }}

            # This step follows the specs in https://github.com/electron/electron-notarize#notes-on-jwt-authentication
            - name: Install macOS Notarization API Key
              if: runner.os == 'macOS'
              run: |
                  mkdir -p ~/private_keys
                  aws s3 cp s3://fractal-dev-secrets/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8 ~/private_keys

            - name: Install Linux Client Protocol Dependencies on Linux Ubuntu GHA Machines
              if: runner.os == 'Linux'
              working-directory: protocol
              run: ./setup-linux-build-environment.sh

            ############################# Unix Configuration Steps END #############################

            - name: Build the Windows Electron Application
              if: runner.os == 'Windows'
              shell: cmd # Acts as Visual Studio Developer Command Prompt due to ilammy/msvc-dev-cmd@v1
              env:
                  AWS_ACCESS_KEY: ${{ secrets.CLIENTAPP_AWS_ACCESS_KEY }}
                  AWS_SECRET_KEY: ${{ secrets.CLIENTAPP_AWS_SECRET_KEY }}
                  AMPLITUDE_KEY: ${{ secrets.CLIENTAPP_AMPLITUDE_KEY }}
              working-directory: client-applications\desktop
              run: |
                  REM Build the Fractal protocol and package the Electron application, using a hardcoded test version
                  REM We need to increase the timeout to deal with GHA's weak VMs.
                  yarn config set network-timeout 600000
                  yarn cache clean
                  yarn install
                  yarn package:notarize --version 1.0.0

            - name: Build the macOS Electron Application
              if: runner.os == 'macOS'
              env:
                  AWS_ACCESS_KEY: ${{ secrets.CLIENTAPP_AWS_ACCESS_KEY }}
                  AWS_SECRET_KEY: ${{ secrets.CLIENTAPP_AWS_SECRET_KEY }}
                  AMPLITUDE_KEY: ${{ secrets.CLIENTAPP_AMPLITUDE_KEY }}
                  FRACTAL_OSX_SYSROOT: "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk" # Necessary for building on macOS (protocol does NOT support 10.15+ SDKs)

                  # These two environment variables must be set as per https://www.npmjs.com/package/electron-builder-notarize#api-key
                  APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
                  APPLE_API_KEY_ISSUER_ID: ${{ secrets.APPLE_API_KEY_ISSUER_ID }}

              working-directory: client-applications/desktop
              run: |
                  # Explicitly retrieve macOS 10.14 SDK
                  wget -nv https://github.com/phracker/MacOSX-SDKs/releases/download/10.15/MacOSX10.14.sdk.tar.xz

                  # Untar it
                  xz -d MacOSX10.14.sdk.tar.xz
                  tar -xf MacOSX10.14.sdk.tar

                  # Move it to the right folder for building the protocol
                  mv MacOSX10.14.sdk /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs

                  # Build the Fractal protocol and package the Electron application, using a hardcoded test version
                  # We need to increase the timeout to deal with GHA's weak VMs.
                  yarn config set network-timeout 600000
                  yarn cache clean
                  yarn install
                  yarn package:notarize --version 1.0.0
