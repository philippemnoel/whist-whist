# workflows/main-webserver-check-pr.yml
#
# Main Webserver: Check PR
# Checks a main-webserver PR for linting and unit/integration testing success, and
# compare the schema of the live database with main-webserver/db-migration/schema.sql,
# notifying the PR if schema changes are detected

name: "Main Webserver: Check PR"

on:
    pull_request:
        paths:
            - "!main-webserver/README.md"
            - "main-webserver/**"
            - "main-webserver/db_migration/schema.sql"
            - ".github/workflows/main-webserver-check-pr.yml"
    workflow_dispatch:

jobs:
    # Linting
    # Checks for formatting using Black and Pylint.
    main-webserver-check-pr-linting:
        name: Linting
        runs-on: ubuntu-20.04

        steps:
            - name: Checkout Git Repository
              uses: actions/checkout@v2

            - name: Set up Python 3.8
              uses: actions/setup-python@v2
              with:
                  python-version: 3.8

            - name: Install Dependencies
              working-directory: main-webserver
              run: pip install -r requirements.txt -r requirements-test.txt

            - name: Check if Code is Linted with Python Black
              working-directory: main-webserver
              run: |
                  result=$(black . --check) # Returns 0 if the code is already linted
                  if [ "$result" -ne "0" ]; then
                    (echo "To pass this check please lint the code with Python Black" && false)
                  else
                    (echo "Code is linted with Python Black" && true)
                  fi

            - name: Check if Code Matches Pylint Standards
              working-directory: main-webserver
              run: |
                  # Global pylintrc for fractal/fractal
                  ln -sf ../pylintrc ./pylintrc              
                  pylint -j 0 app # Returns 0 if and only if code is linted

    # Heroku Testing
    # Checks unit tests on the Heroku pipeline.
    main-webserver-check-pr-testing-heroku:
        name: Heroku Testing
        runs-on: ubuntu-20.04

        steps:
            - name: Checkout Git Repository
              uses: actions/checkout@v2
              with:
                  ref: ${{ github.event.pull_request.head.ref }} # must checkout the branch, not just the commit, for Heroku CI to work

            - name: Set up Python 3.8
              uses: actions/setup-python@v2
              with:
                  python-version: 3.8

            - name: Set the workflow's environment parameters
              id: set-environment
              uses: ./.github/actions/set-environment
              with:
                  ref: ${{ github.base_ref }} # The git ref of the target branch

            - name: Obtain a Fractal access token
              id: get-token
              if: ${{ steps.set-environment.outputs.environment == 'dev' }}
              uses: ./.github/actions/generate-auth0-token
              with:
                  domain: ${{ steps.set-environment.outputs.auth0-domain }}
                  client-id: ${{ steps.set-environment.outputs.auth0-client-id }}
                  client-secret: ${{ secrets[steps.set-environment.outputs.auth0-client-secret-key] }}

            - name: Install webserver scripting dependencies
              if: ${{ steps.set-environment.outputs.environment == 'dev' }}
              working-directory: main-webserver
              run: pip install -r scripts/requirements.txt

            - name: Start Local Deploy And Confirm Webserver Runs #ensures we don't crash on startup
              id: local-deploy
              if: ${{ steps.set-environment.outputs.environment == 'dev' }}
              working-directory: main-webserver
              env:
                  HEROKU_API_KEY: ${{ secrets.HEROKU_DEVELOPER_API_KEY }}
              run: |
                  bash docker/retrieve_config.sh
                  bash docker/local_deploy.sh

                  # Wait for the web server to finish deploying
                  sleep 5

            - name: Print debug info on failure
              working-directory: main-webserver
              if: always() && steps.local-deploy.outcome == 'failure'
              shell: bash -e {0}
              run: |
                  # print logs for us to see what happened
                  echo "------ WEB LOGS ------"
                  docker logs docker_web_1

                  echo "------ CELERY LOGS ------"
                  docker logs docker_celery_1

            - name: End Local Deploy
              if: ${{ steps.set-environment.outputs.environment == 'dev' }}
              working-directory: main-webserver
              env:
                  HEROKU_API_KEY: ${{ secrets.HEROKU_DEVELOPER_API_KEY }}
              run: bash docker/local_deploy.sh --down

            - name: Run Tests on Heroku via pytest
              working-directory: main-webserver
              env:
                  HEROKU_API_KEY: ${{ secrets.HEROKU_DEVELOPER_API_KEY }}
              run: heroku ci:run --pipeline ${{ secrets.HEROKU_PIPELINE_NAME }}

    # Database Migration
    # Compare the schema of the live database with main-webserver/db-migration/schema.sql, and
    # notify the PR if schema changes are detected
    main-webserver-check-migra-diff:
        name: Check Migra Diff
        runs-on: ubuntu-20.04
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # needed for migra diff tool
            GITHUB_ISSUE: ${{ github.event.number }}
            GITHUB_PR_URL: "https://github.com/fractal/fractal/pull/"
            HEROKU_DB_KEY: "DATABASE_URL"
            HEROKU_API_TOKEN: ${{ secrets.HEROKU_DEVELOPER_API_KEY }} # needed to retrieve config vars from Heroku
            SERVER_DEV: "fractal-dev-server"
            SERVER_STAGING: "fractal-staging-server"
            SERVER_PROD: "fractal-prod-server"
            PATH_HELPERS: ".github/workflows/helpers"
            PATH_SCRIPTS: "main-webserver/db_migration"
            PATH_CURRENT: "../temporary_db_schema.sql"
            PATH_MERGING: "main-webserver/db_migration/schema.sql"
            PATH_DIFF: "../temporary_diff_file.sql"
            TITLE_ERROR: >-
                An error occured while comparing the database schema.
            TITLE_NO_CHANGES: >-
                Schema is unchanged, no database migration needed.
            TITLE_SAFE_CHANGES: >-
                There's some changes to be made to the schema!
            TITLE_UNSAFE_CHANGES: >-
                This PR introduces destructive changes to the schema!
            TITLE_INVALID_CHANGES: >-
                This PR will not migrate successfully.
            BODY_ERROR: >-
                The diff tool `migra` exited with an error.
            BODY_NO_CHANGES: >-
                Carry on!
            BODY_SAFE_CHANGES: >-
                The SQL commands below will perform the migration.
            BODY_UNSAFE_CHANGES: >-
                The schema diff produced some unsafe commands, which can be
                dangerous to run on the database.


                Remember these will be run automatically upon merge, so be sure
                to review these changes extra carefully.


                The SQL commands below will perform the migration.
            BODY_INVALID_CHANGES: >-
                The schema diff did not pass the migration test. The following
                SQL commands will not be applied properly to the database.

        steps:
            - name: Checkout Git Repository
              uses: actions/checkout@v2

            - name: Log GitHub Context
              shell: python3 {0}
              run: |
                  import os
                  context = """
                  GITHUB CONTEXT:
                  ${{ toJSON(github) }}
                  JOB CONTEXT:
                  ${{ toJSON(job) }}
                  STEPS CONTEXT:
                  ${{ toJSON(steps) }}
                  RUNNER CONTEXT:
                  ${{ toJSON(runner) }}
                  STRATEGY CONTEXT:
                  ${{ toJSON(strategy) }}
                  MATRIX CONTEXT:
                  ${{ toJSON(matrix) }}
                  """

            - name: Set up Python 3.8
              uses: actions/setup-python@v2
              with:
                  python-version: 3.8

            - name: Diff database schema with local schema.sql
              id: db-diff
              uses: ./.github/actions/db-migration

            # Need to install this dependency for the notification step.
            - name: Install Python Dependencies
              working-directory: main-webserver
              run: pip install PyGithub

            # Using the workflow notifcation helpers, we'll send out
            # formatted alerts based on the error code response from the
            # previous step.

            # Actual messages are defined in the environment configuration at
            # the top of this job.
            - name: Send Alerts on Diff Result
              shell: python3 {0}
              run: |
                  import os
                  import sys
                  sys.path.append(".github/workflows/helpers")
                  from notifications.github_bot import github_comment_update

                  code = int(${{ steps.db-diff.outputs.code }})
                  diff = """${{ steps.db-diff.outputs.diff }}"""

                  print("MIGRA RETURN CODE:", code)
                  print("MIGRA SQL DIFF:", diff)

                  if not os.environ.get("GITHUB_ISSUE"):
                    print("No GitHub Issue number! Skipping PR notification.")
                    sys.exit(0)

                  github_token = os.environ["GITHUB_TOKEN"]
                  github_issue = int(os.environ["GITHUB_ISSUE"])
                  github_repo = "fractal/fractal"

                  identifier = "AUTOMATED_DB_MIGRATION_MESSAGE"

                  if code == 0:
                    title = os.environ["TITLE_NO_CHANGES"]
                    body = os.environ["BODY_NO_CHANGES"]

                  elif code == 2:
                    title = ":construction:" + os.environ["TITLE_SAFE_CHANGES"] + ":construction:"
                    body = os.environ["BODY_SAFE_CHANGES"]

                  elif code == 3:
                    title = ":exclamation:" + os.environ["TITLE_UNSAFE_CHANGES"] + ":exclamation:"
                    body = os.environ["BODY_UNSAFE_CHANGES"]

                  elif code == 4:
                    title = ":rotating_light:" + os.environ["TITLE_INVALID_CHANGES"] + ":rotating_light:"
                    body = os.environ["BODY_INVALID_CHANGES"]

                  else:
                    title = ":x:" + os.environ["TITLE_ERROR"] + ":x:"
                    body = os.environ["BODY_ERROR"]

                  github_comment_update(
                    github_token,
                    github_repo,
                    github_issue,
                    identifier,
                    body,
                    title=title,
                    code=diff,
                    lang="sql",
                  )
