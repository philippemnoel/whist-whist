# workflows/fractal-publish-ami.yml
#
# Fractal: Build & Publish AMI
# Build and publish Linux AMI to all AWS regions.

name: "Fractal: Build & Publish AMI"

on:
    push:
        branches:
            - master
            - staging
            - dev
            - mia/packer-ami
        # TODO: CHANGE AFTER TESTING
    workflow_dispatch:

jobs:
  fractal-build-and-publish-ami-main:
      name: Build & Publish AMIs
      runs-on: ubuntu-20.04

      strategy:
          matrix:
              aws-region:
                  # - us-east-1
                  # - us-east-2
                  # - us-west-1
                  # - us-west-2
                  # - ca-central-1
                  # - eu-west-1
                  - eu-central-1

      env:
          aws_source_region: us-east-1

      steps:
          - name: Checkout Git Repository
            uses: actions/checkout@v2

          - name: Configure AWS CLI
            uses: aws-actions/configure-aws-credentials@v1
            with:
                aws-access-key-id: ${{ secrets.AWS_EC2_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_EC2_SECRET_ACCESS_KEY }}
                aws-region: ${{ matrix.aws-region }}

          - name: Retrieve Branch HEAD Git Hash as Env Variable
            run: echo "commit_sha=$(git rev-parse HEAD)" >> $GITHUB_ENV

          - name: Set Appropriate GraphQL URL and Access Key (prod, staging, dev) Based on Git Branch (master, staging, dev)
            run: |
              if [ "${GITHUB_REF##*/}" == "master" ]; then
                echo "graphql_db_url=https://prod-database.fractal.co/v1/graphql" >> $GITHUB_ENV
                echo "hasura_graphql_access_key=${{ secrets.HASURA_GRAPHQL_ACCESS_KEY_PROD }}" >> $GITHUB_ENV
              elif [ "${GITHUB_REF##*/}" == "staging" ]; then
                echo "graphql_db_url=https://staging-database.fractal.co/v1/graphql" >> $GITHUB_ENV
                echo "hasura_graphql_access_key=${{ secrets.HASURA_GRAPHQL_ACCESS_KEY_STAGING }}" >> $GITHUB_ENV
              else
                echo "graphql_db_url=https://dev-database.fractal.co/v1/graphql" >> $GITHUB_ENV
                echo "hasura_graphql_access_key=${{ secrets.HASURA_GRAPHQL_ACCESS_KEY_DEV }}" >> $GITHUB_ENV
              fi

          # This AMI is used as a source AMI for building the new AMI
          - name: Retrieve Current aws_source_region AMI ID from Appropriate Database (prod, staging, dev)
            working-directory: ecs-host-setup
            run: |
                # curl GraphQL API to retrieve version number from config database
                SOURCE_AMI=$(curl -X POST \
                             -H "Content-Type: application/json" \
                             -H "X-Hasura-Admin-Secret: ${{ env.hasura_graphql_access_key }}" \
                             --data "{ \"query\": \"query { hardware_region_to_ami(where: { region_name: { _eq: \\\"${{ env.aws_source_region }}\\\" } }) { ami_id } }\" }" \
                             ${{ env.graphql_db_url }} | grep -oE 'ami-[0-9a-z]+')
                
                # save to GitHub Environment
                echo "source_ami=${SOURCE_AMI}" >> $GITHUB_ENV

          - name: Modify the Packer ami_config.json via jq to the Right Values for Building New AMI
            working-directory: ecs-host-setup
            run: |
                cat ami_config.json | jq ".builders[0].secret_key |= ${{ secrets.AWS_EC2_SECRET_ACCESS_KEY }}"
                cat ami_config.json | jq ".builders[0].access_key |= ${{ secrets.AWS_EC2_ACCESS_KEY_ID }}"
                cat ami_config.json | jq ".builders[0].ami_name |= ami-us-east-1-${{ env.commit_sha }}"
                cat ami_config.json | jq ".builders[0].source_ami |= ${{ env.source_ami }}"

          # This spins up an AWS EC2 instance to create the AMI, and then deletes it
          # It *could* fail if we are maxed-out in number AWS vCPUs allowed in AWS Source Region
          - name: Create New AMI in aws_source_region via Packer and Update Appropriate Database (prod, staging, dev)
            working-directory: ecs-host-setup
            run: |
                # create new AMI for aws_source_region
                echo "new_ami=$(grep -oE 'ami-[0-9a-z]+' <<< $(packer build ami_config.json)" >> $GITHUB_ENV

                # update AMI for aws_source_region in appropriate database
                curl -X POST \
                -H "Content-Type: application/json" \
                -H "X-Hasura-Admin-Secret: ${{ env.hasura_graphql_access_key }}" \




              # here's an example of mutation that works to help you
              # --data "{ \"query\": \"mutation { update_desktop_app_version_by_pk(pk_columns: {id: 1}, _set: {micro: ${{ env.new_micro_version }}, commit_hash: \\\"${{ env.commit_hash }}\\\"}) { id } }\" }" \
              # https://config-database.fractal.co/v1/graphql



                Q1='{"query":"mutation NewAMI($ami_id: String = \"'
                Q2='\", $_eq: String = \"'
                Q3='\") {\n  update_hardware_region_to_ami(where: {region_name: {_eq: $_eq}}, _set: {ami_id: $ami_id}) {\n    returning {\n      region_name\n      ami_id\n    }\n  }\n}","variables":{}}'
                
                # TODO: change after testing
                # QUERY="${Q1}${{ env.new_ami }}$Q2${{ env.aws_source_region }}${Q3}"
                QUERY="$Q1${{ env.new_ami }}$Q2 test-region $Q3"

                curl --location --request POST "${{ env.db_url }}" \
                    --header 'Content-Type: application/json' \
                    --header 'x-hasura-admin-secret: ${{ secrets.HASURA_GRAPHQL_ACCESS_KEY }}' \
                    --data-raw "$QUERY"




          # TODO
          - name: Copy AMI to all regions
            working-directory: ecs-host-setup
            run: |
              REGION=${{ matrix.aws-region }}
              AMI=$(grep -oE 'ami-[0-9a-z]+' <<< $(aws ec2 copy-image --source-image-id ${{ env.new_ami }} --source-region ${{ env.aws_source_region }} --region $REGION --name 'ami-$REGION-${{ env.commit_sha }}'))

              Q1='{"query":"mutation NewAMI($ami_id: String = \"'
              Q2='\", $_eq: String = \"'
              Q3='\") {\n  update_hardware_region_to_ami(where: {region_name: {_eq: $_eq}}, _set: {ami_id: $ami_id}) {\n    returning {\n      region_name\n      ami_id\n    }\n  }\n}","variables":{}}'
              QUERY="$Q1$AMI$Q2$REGION$Q3"

              curl --location --request POST "${{ env.db_url }}" \
                   --header 'Content-Type: application/json' \
                   --header 'x-hasura-admin-secret: ${{ secrets.HASURA_GRAPHQL_ACCESS_KEY }}' \
                   --data-raw "$QUERY"










  notify-slack:
      name: Notify Slack
      needs: [fractal-build-and-publish-ami-main]
      if: success()
      runs-on: ubuntu-20.04

      steps:
          - name: Notify Slack
            run: |
                if [ "${GITHUB_REF##*/}" == "master" ]; then
                    curl -X POST \
                    --data-urlencode "payload={\"channel\": \"#alerts\", \"username\": \"Fractal Bot\", \"text\": \"New Production AMIs Deployed to AWS from `master`.\", \"icon_emoji\": \":fractal:\"}" \
                    ${{ secrets.SLACK_HOOKS_ENDPOINT }}
                elif [ "${GITHUB_REF##*/}" == "staging" ]; then
                    curl -X POST \
                    --data-urlencode "payload={\"channel\": \"#alerts\", \"username\": \"Fractal Bot\", \"text\": \"New Staging AMIs Deployed to AWS from `staging`.\", \"icon_emoji\": \":fractal:\"}" \
                    ${{ secrets.SLACK_HOOKS_ENDPOINT }}
                else
                    curl -X POST \
                    --data-urlencode "payload={\"channel\": \"#alerts\", \"username\": \"Fractal Bot\", \"text\": \"New Development AMIs Deployed to AWS from `dev`.\", \"icon_emoji\": \":fractal:\"}" \
                    ${{ secrets.SLACK_HOOKS_ENDPOINT }}
                fi
