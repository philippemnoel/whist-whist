# workflows/fractal-publish-ami.yml
#
# Fractal: Build & Publish AMI
# Build and publish Linux AMI to all AWS regions.

name: "Fractal: Build & Publish AMI"

on:
    push:
        branches:
            - master
            - staging
            - dev
            - mia/packer-ami # TODO: remove after testing
    workflow_dispatch:

jobs:
    fractal-build-and-publish-ami-main:
        name: Build & Publish AMIs
        runs-on: ubuntu-20.04

        env:
            aws_new_ami_source_region: us-east-1 # The AWS region our new AMI gets built in, our initial AWS supported region
            aws_new_ami_instance_type: g3.4xlarge # The AWS EC2 instance type our new AMI gets built on (must be the EC2 instance type we run in production)
            aws_new_ami_subnet_id: subnet-3341731d # The subnetwork, within the VPC, within which the EC2 instance building our new AMI runs
            aws_new_ami_vpc_id: vpc-34aded4e # The ID of the Fractal-created VPC the EC2 instance building the AMI is part of
            aws_source_ami_id: ami-0885b1f6bd170450c # The base AWS-provided AMI we build our AMI from: AWS Ubuntu Server 20.04 LTS

        steps:
            - name: Checkout Git Repository
              uses: actions/checkout@v2

            # The regions our new AMI gets cloned to (should be all our other supported AWS regions)
            # We define them as a Bash environment variable array directly since it is not supported in the GHA env context
            - name: Define Supported AWS Regions (in addition to aws_new_ami_source_region, defined above)
              run: echo "aws_additional_supported_regions=us-east-2 us-west-1 us-west-2 ca-central-1 eu-west-1 eu-central-1" >> $GITHUB_ENV

            - name: Retrieve Current Git Hash as Environment Variable
              run: echo "commit_sha=$(git rev-parse HEAD)" >> $GITHUB_ENV

            - name: Configure AWS CLI
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_EC2_S3_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_EC2_S3_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.aws_new_ami_source_region }}

            - name: Set Appropriate GraphQL URL and Access Key (prod, staging, dev) Based on Git Branch (master, staging, dev)
              run: |
                  if [ "${GITHUB_REF##*/}" == "master" ]; then
                    echo "graphql_db_url=https://prod-database.fractal.co/v1/graphql" >> $GITHUB_ENV
                    echo "hasura_graphql_access_key=${{ secrets.HASURA_GRAPHQL_ACCESS_KEY_PROD }}" >> $GITHUB_ENV
                  elif [ "${GITHUB_REF##*/}" == "staging" ]; then
                    echo "graphql_db_url=https://staging-database.fractal.co/v1/graphql" >> $GITHUB_ENV
                    echo "hasura_graphql_access_key=${{ secrets.HASURA_GRAPHQL_ACCESS_KEY_STAGING }}" >> $GITHUB_ENV
                  else
                    echo "graphql_db_url=https://dev-database.fractal.co/v1/graphql" >> $GITHUB_ENV
                    echo "hasura_graphql_access_key=${{ secrets.HASURA_GRAPHQL_ACCESS_KEY_DEV }}" >> $GITHUB_ENV
                  fi

            - name: Install Latest Packer version
              run: |
                  # delete current Packer installation
                  sudo rm -rf /usr/local/bin/packer

                  # reinstall Packer to latest version
                  PACKER_VERSION=$(curl -s https://checkpoint-api.hashicorp.com/v1/check/packer | jq -r .current_version)
                  curl -LO "https://releases.hashicorp.com/packer/${PACKER_VERSION}/packer_${PACKER_VERSION}_linux_amd64.zip"
                  sudo unzip "packer_${PACKER_VERSION}_linux_amd64.zip" -d /usr/local/bin
                  rm -f "packer_${PACKER_VERSION}_linux_amd64.zip"

                  # confirm Packer version
                  packer --version

            - name: Generate ami_config.json Packer Config File for Building New AMI
              working-directory: ecs-host-setup
              run: >
                  cat ami_config.json
                  | jq -c ".builders[0].secret_key = \"${{ secrets.AWS_EC2_SECRET_ACCESS_KEY}}\""
                  | jq -c ".builders[0].access_key = \"${{ secrets.AWS_EC2_ACCESS_KEY_ID }}\""
                  | jq -c ".builders[0].ami_name = \"ami-us-east-1-${{ env.commit_sha }}\""
                  | jq -c ".builders[0].region = \"${{ env.aws_new_ami_source_region }}\""
                  | jq -c ".builders[0].instance_type = \"${{ env.aws_new_ami_instance_type }}\""
                  | jq -c ".builders[0].subnet_id = \"${{ env.aws_new_ami_subnet_id }}\""
                  | jq -c ".builders[0].vpc_id = \"${{ env.aws_new_ami_vpc_id }}\""
                  | jq -c ".builders[0].source_ami = \"${{ env.aws_source_ami_id }}\""
                  > ami_config_tmp.json
                  && mv ami_config_tmp.json ami_config.json

            # This spins up an AWS EC2 instance to create the AMI, and then deletes it
            # It *could* fail if we are maxed-out in number AWS vCPUs allowed in aws_new_ami_source_region
            - name: Create New AMI in aws_new_ami_source_region via Packer and Update Appropriate Database (prod, staging, dev)
              working-directory: ecs-host-setup
              run: |
                  # create the new AMI in aws_new_ami_source_region (region set in previous step)
                  packer -machine-readable build ami_config.json
                  echo "new_ami_id=$(cat manifest.json | jq ".builds[0].artifact_id" | grep -oE 'ami-[0-9a-z]+')" >> $GITHUB_ENV

                  # update AMI ID for aws_source_region in appropriate database to new AMI ID
                  curl -X POST \
                  -H "Content-Type: application/json" \
                  -H "X-Hasura-Admin-Secret: ${{ env.hasura_graphql_access_key }}" \
                  --data "{ \"query\": \"mutation { update_hardware_region_to_ami(_set: { ami_id: \\\"${{ env.new_ami_id }}\\\" }, where: { region_name: { _eq: \\\"${{ env.aws_new_ami_source_region }}\\\" } }) { returning { ami_id } } }\" }" \
                  ${{ env.graphql_db_url }}

            - name: Copy New AMI to All Supported AWS Regions
              working-directory: ecs-host-setup
              run: |
                  for aws_region in ${{ env.aws_additional_supported_regions }}
                  do
                    # retrieve new AMI ID for aws_region, from the new AMI ID in aws_source_region
                    region_new_ami_id=$(grep -oE 'ami-[0-9a-z]+' <<< $(aws ec2 copy-image --source-image-id ${{ env.new_ami_id }} --source-region ${{ env.aws_new_ami_source_region }} --region $aws_region --name "ami-$aws_region-${{ env.commit_sha }}"))

                    # update AMI for aws_region in appropriate database to the new AMI ID
                    curl -X POST \
                    -H "Content-Type: application/json" \
                    -H "X-Hasura-Admin-Secret: ${{ env.hasura_graphql_access_key }}" \
                    --data "{ \"query\": \"mutation { update_hardware_region_to_ami(_set: { ami_id: \\\"${{ env.region_new_ami_id }}\\\" }, where: { region_name: { _eq: \\\"${aws_region}\\\" } }) { returning { ami_id } } }\" }" \
                    ${{ env.graphql_db_url }}
                  done

    notify-slack:
        name: Notify Slack
        needs: [fractal-build-and-publish-ami-main]
        if: success()
        runs-on: ubuntu-20.04

        steps:
            - name: Notify Slack
              run: |
                  if [ "${GITHUB_REF##*/}" == "master" ]; then
                      curl -X POST \
                      --data-urlencode "payload={\"channel\": \"#alerts\", \"username\": \"Fractal Bot\", \"text\": \"New Production AMIs Deployed to All Supported AWS Regions from fractal/fractal \`master\` branch.\", \"icon_emoji\": \":fractal:\"}" \
                      ${{ secrets.SLACK_HOOKS_ENDPOINT }}
                  elif [ "${GITHUB_REF##*/}" == "staging" ]; then
                      curl -X POST \
                      --data-urlencode "payload={\"channel\": \"#alerts\", \"username\": \"Fractal Bot\", \"text\": \"New Staging AMIs Deployed to All Supported AWS Regions from fractal/fractal \`staging\` branch.\", \"icon_emoji\": \":fractal:\"}" \
                      ${{ secrets.SLACK_HOOKS_ENDPOINT }}
                  else
                      curl -X POST \
                      --data-urlencode "payload={\"channel\": \"#alerts\", \"username\": \"Fractal Bot\", \"text\": \"New Development AMIs Deployed to All Supported AWS Regions from fractal/fractal \`dev\` branch.\", \"icon_emoji\": \":fractal:\"}" \
                      ${{ secrets.SLACK_HOOKS_ENDPOINT }}
                  fi
