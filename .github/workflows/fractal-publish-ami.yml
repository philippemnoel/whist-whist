# workflows/fractal-publish-ami.yml
#
# Fractal: Build & Publish AMI
# Build and publish Linux AMI to all AWS regions.

name: "Fractal: Build & Publish AMI"

on:
    push:
        branches:
            - master
            - staging
            - dev
            - mia-packer-ami
        # TODO: CHANGE AFTER TESTING
    workflow_dispatch:

jobs:
  fractal-build-and-publish-ami-main:
      name: Build & Publish AMIs
      runs-on: ubuntu-20.04

      strategy:
          matrix:
              aws-region:
                  # - us-east-1
                  # - us-east-2
                  # - us-west-1
                  # - us-west-2
                  # - ca-central-1
                  # - eu-west-1
                  - eu-central-1

      steps:
          - name: Checkout Git repository
            uses: actions/checkout@v2

          - name: Configure AWS CLI
            uses: aws-actions/configure-aws-credentials@v1
            with:
                aws-access-key-id: ${{ secrets.AWS_EC2_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_EC2_SECRET_ACCESS_KEY }}
                aws-region: ${{ matrix.aws-region }}

          - name: Retrieve master git hash as env variable
            run: echo "commit_sha=$(git rev-parse HEAD)" >> $GITHUB_ENV

          - name: Define source region
            run: echo "source_region=us-east-1" >> $GITHUB_ENV

          - name: Find database URL
            run: |
              if [ "${GITHUB_REF##*/}" == "master" ]; then
                echo "db_url=http://prod-database.fractal.co/v1/graphql" >> $GITHUB_ENV
              elif [ "${GITHUB_REF##*/}" == "staging" ]; then
                echo "db_url=http://staging-database.fractal.co/v1/graphql" >> $GITHUB_ENV
              else
                echo "db_url='http://dev-database.fractal.co/v1/graphql'" >> $GITHUB_ENV
              fi

          - name: Pull latest AMI from specified DB
            working-directory: ecs-host-setup
            run: |
              Q1='{"query":"query get_orig_ami {hardware_region_to_ami(where: {region_name: {_eq: \"'
              Q2='\"}}) {ami_id}}","variables":{}}'
              QUERY=${Q1}${{ env.source_region }}${Q2}
              SOURCE_AMI=$(curl --location --request POST ${{ env.db_url }}\
                              --header 'Content-Type: application/json' \
                              --header "x-hasura-admin-secret: ${{ secrets.HASURA_GRAPHQL_ACCESS_KEY }}" \
                              --data-raw "${QUERY}")
              echo "source_ami=${SOURCE_AMI}" >> $GITHUB_ENV
          
          # - name: Pull latest AMI from specified DB
          #   working-directory: ecs-host-setup
          #   run: |
          #     echo "SOURCE_AMI=$(grep -oE 'ami-[0-9a-z]+' <<< $(bash build_query.sh '${{ env.source_region }}' ${{ env.db_url }} '${{ secrets.HASURA_GRAPHQL_ACCESS_KEY }}'))" >> $GITHUB_ENV

          - name: Modify the ami_config.json with jq to the right values
            working-directory: ecs-host-setup
            run: |
                cat ami_config.json | jq ".builders[0].secret_key |= ${{ secrets.AWS_EC2_SECRET_ACCESS_KEY }}"
                cat ami_config.json | jq ".builders[0].access_key |= ${{ secrets.AWS_ECS_ACCESS_KEY_ID }}"
                cat ami_config.json | jq ".builders[0].ami_name |= ami-us-east-1-${{ env.commit_sha }}"
                cat ami_config.json | jq ".builders[0].source_ami |= ${{ env.source_ami }}"

          - name: Run the AMI creation
            working-directory: ecs-host-setup
            run: |
              echo "new_ami=$(grep -oE 'ami-[0-9a-z]+' <<< $(packer build ami_config.json)" >> $GITHUB_ENV

              Q1='{"query":"mutation NewAMI($ami_id: String = \"'
              Q2='\", $_eq: String = \"'
              Q3='\") {\n  update_hardware_region_to_ami(where: {region_name: {_eq: $_eq}}, _set: {ami_id: $ami_id}) {\n    returning {\n      region_name\n      ami_id\n    }\n  }\n}","variables":{}}'
              
              # TODO: change after testing
              # QUERY="${Q1}${{ env.new_ami }}$Q2${{ env.source_region }}${Q3}"
              QUERY="$Q1${{ env.new_ami }}$Q2 test-region $Q3"

              curl --location --request POST "${{ env.db_url }}" \
                   --header 'Content-Type: application/json' \
                   --header 'x-hasura-admin-secret: ${{ secrets.HASURA_GRAPHQL_ACCESS_KEY }}' \
                   --data-raw "$QUERY"

          - name: Copy AMI to all regions
            working-directory: ecs-host-setup
            run: |
              REGION=${{ matrix.aws-region }}
              AMI=$(grep -oE 'ami-[0-9a-z]+' <<< $(aws ec2 copy-image --source-image-id ${{ env.new_ami }} --source-region ${{ env.source_region }} --region $REGION --name 'ami-$REGION-${{ env.commit_sha }}'))

              Q1='{"query":"mutation NewAMI($ami_id: String = \"'
              Q2='\", $_eq: String = \"'
              Q3='\") {\n  update_hardware_region_to_ami(where: {region_name: {_eq: $_eq}}, _set: {ami_id: $ami_id}) {\n    returning {\n      region_name\n      ami_id\n    }\n  }\n}","variables":{}}'
              QUERY="$Q1$AMI$Q2$REGION$Q3"

              curl --location --request POST "${{ env.db_url }}" \
                   --header 'Content-Type: application/json' \
                   --header 'x-hasura-admin-secret: ${{ secrets.HASURA_GRAPHQL_ACCESS_KEY }}' \
                   --data-raw "$QUERY"
  notify-slack:
      name: Notify Slack
      needs: [fractal-build-and-publish-ami-main]
      if: success()
      runs-on: ubuntu-20.04
      steps:
          - name: Notify Slack
            run: |
                if [ "${GITHUB_REF##*/}" == "master" ]; then
                    curl -X POST \
                    --data-urlencode "payload={\"channel\": \"#alerts\", \"username\": \"Fractal Bot\", \"text\": \"New AMIs Deployed to Production via Update to `master`.\", \"icon_emoji\": \":fractal:\"}" \
                    ${{ secrets.SLACK_HOOKS_ENDPOINT }}
                elif [ "${GITHUB_REF##*/}" == "staging" ]; then
                    curl -X POST \
                    --data-urlencode "payload={\"channel\": \"#alerts\", \"username\": \"Fractal Bot\", \"text\": \"New AMIs Deployed to Staging via Update to `staging`.\", \"icon_emoji\": \":fractal:\"}" \
                    ${{ secrets.SLACK_HOOKS_ENDPOINT }}
                else
                    curl -X POST \
                    --data-urlencode "payload={\"channel\": \"#alerts\", \"username\": \"Fractal Bot\", \"text\": \"New AMIs Deployed to Development via Update to `dev`.\", \"icon_emoji\": \":fractal:\"}" \
                    ${{ secrets.SLACK_HOOKS_ENDPOINT }}
                fi