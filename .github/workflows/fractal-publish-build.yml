# workflows/fractal-publish-build.yml
#
# Fractal: Build & Publish
# Build and publish each of the relevant Fractal projects.

name: "Fractal: Build & Publish"

on:
    pull_request:
        branches:
            - master
            - staging
            - dev
            - project/**
        paths-ignore:
            - "README.md"
            - "**/README.md"
            - ".github/workflows/README.md"
    workflow_dispatch:

jobs:
    # Configure Jobs
    # Detect the branch using regex matching and store as an output to regulate downstream actions.
    # Access branch with `fractal-publish-build-config.outputs.branch`.

    fractal-publish-build-config:
        name: "Configure Jobs"
        runs-on: ubuntu-20.04
        outputs:
            branch: ${{ steps.detect-branch.outputs.branch }}
        steps:
            - name: Detect Branch
              id: detect-branch
              run: |
                  if [[ ${{ github.ref }} =~ ^refs/heads/master$ ]]; then
                      BRANCH_NAME=master
                  elif [[ ${{ github.ref }} =~ ^refs/heads/staging$ ]]; then
                      BRANCH_NAME=staging
                  elif [[ ${{ github.ref }} =~ ^refs/heads/dev$ ]]; then
                      BRANCH_NAME=dev
                  elif [[ ${{ github.ref }} =~ ^refs/heads/project/.*$ ]]; then
                      BRANCH_NAME=project
                  else
                      BRANCH_NAME=null
                  fi
                  echo "branch is $BRANCH_NAME"
                  echo "::set-output name=branch::$BRANCH_NAME"

    # Container Images: Build & Publish to GitHub Container Registry
    # Build and publish the container images to a GitHub Container Registry repository
    # Runs if config succeeds and branch is in ["master"].

    # ECS Host Service: Build & Publish to AWS S3
    # Build and publish the ECS host service to an S3 bucket from which EC2 hosts pull.
    # Runs if config succeeds and branch is in ["master"] and publish-images-ghcr succeeds.

    ecs-host-service-publish-build-s3:
        name: "ECS Host Service: Build & Publish to AWS S3"
        runs-on: ubuntu-20.04
        needs:
            [fractal-publish-build-config, container-images-publish-images-ghcr]
        if: contains(fromJSON('["master"]'), needs.fractal-publish-build-config.outputs.branch)
        env:
            binary-location: ecs-host-service/build
            binary-name: ecs-host-service
            s3-bucket-region: us-east-1 # eventually, we should replicate s3 per region
            s3-bucket-uri: s3://fractal-ecs-host-service

        steps:
            - name: Checkout Git Repository
              uses: actions/checkout@v2
              with:
                  persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
                  fetch-depth: 0 # otherwise, you will fail to push refs to dest repo

            - name: Setup Go environment
              uses: actions/setup-go@v2.1.3

            - name: Configure AWS CLI
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_S3_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.s3-bucket-region }}

            - name: Install Go dependencies
              run: cd ecs-host-service && make deps

            - name: Build Go project
              env:
                  WEBSERVER_AUTH_SECRET_DEV: ${{ secrets.HOST_SERVICE_AND_WEBSERVER_AUTH_SECRET_DEV }}
                  WEBSERVER_AUTH_SECRET_STAGING: ${{ secrets.HOST_SERVICE_AND_WEBSERVER_AUTH_SECRET_STAGING }}
                  WEBSERVER_AUTH_SECRET_PROD: ${{ secrets.HOST_SERVICE_AND_WEBSERVER_AUTH_SECRET_PROD }}
              run: cd ecs-host-service && make build

            - name: Upload binary to S3
              run: aws s3 cp ${{ env.binary-location }}/${{ env.binary-name }} ${{ env.s3-bucket-uri }}/${{ env.binary-name }}

            - name: Notify Slack
              run: |
                  curl -X POST \
                  --data-urlencode "payload={\"channel\": \"#alerts\", \"username\": \"Fractal Bot\", \"text\": \":athletic_shoe: ECS Host Service build pushed to production via S3 upload :bezos:\", \"icon_emoji\": \":fractal:\"}" \
                  ${{ secrets.SLACK_HOOKS_ENDPOINT }}


    # Main Webserver: Deploy to Heroku
    # Push the main-webserver subtree to the appropriate Heroku app.
    # Runs if config succeeds and branch is in ["master"] and publish-images-ghcr succeeds, or unconditionally if branch is in ["dev"] (since other workflows won't run then)

    main-webserver-deploy-heroku:
        name: "Main Webserver: Deploy to Heroku"
        needs:
            [fractal-publish-build-config, container-images-publish-images-ghcr]
        if: |
            (
                contains(
                    fromJSON('["master"]'),
                    needs.fractal-publish-build-config.outputs.branch
                ) && success()
            ) ||
            (
                contains(
                    fromJSON('["staging"]'),
                    needs.fractal-publish-build-config.outputs.branch
                ) && always()
            ) ||
            (
                contains(
                    fromJSON('["dev"]'),
                    needs.fractal-publish-build-config.outputs.branch
                ) && always()
            )
        runs-on: ubuntu-20.04
        steps:
            - name: Checkout Git Repository
              uses: actions/checkout@v2
              with:
                  persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
                  fetch-depth: 0 # otherwise, you will fail to push refs to dest repo

            - name: Authenticate Heroku
              run: |
                  cat > ~/.netrc << EOF
                  machine api.heroku.com
                    login ${{ secrets.HEROKU_DEVELOPER_LOGIN_EMAIL }}
                    password ${{ secrets.HEROKU_DEVELOPER_API_KEY }}
                  machine git.heroku.com
                    login ${{ secrets.HEROKU_DEVELOPER_LOGIN_EMAIL }}
                    password ${{ secrets.HEROKU_DEVELOPER_API_KEY }}
                  EOF

            - name: Add Heroku Remote
              run: |
                  if [[ ${{ needs.fractal-publish-build-config.outputs.branch }} == dev ]]; then
                      HEROKU_APP_NAME=fractal-dev-server
                  elif [[ ${{ needs.fractal-publish-build-config.outputs.branch }} == staging ]]; then
                      HEROKU_APP_NAME=fractal-staging-server
                  elif [[ ${{ needs.fractal-publish-build-config.outputs.branch }} == master ]]; then
                      HEROKU_APP_NAME=fractal-prod-server
                  else
                      echo 'Error: Invalid branch' && false
                  fi
                  echo "HEROKU_APP_NAME=$HEROKU_APP_NAME" >> $GITHUB_ENV

                  heroku git:remote --app $HEROKU_APP_NAME --remote heroku-fractal-server
              env:
                  HEROKU_API_KEY: ${{ secrets.HEROKU_DEVELOPER_API_KEY }}

            - name: Split off and checkout main-webserver subtree
              run: |
                  git subtree split --prefix main-webserver -b workflows-private/main-webserver
                  git checkout workflows-private/main-webserver

            - name: Push to Heroku remote, deploying the app # force push is only necessary for the transition period, then should be removed
              run: |
                  git push -f heroku-fractal-server workflows-private/main-webserver:master

            - name: Notify Slack
              run: |
                  curl -X POST \
                  --data-urlencode "payload={\"channel\": \"#alerts\", \"username\": \"Fractal Bot\", \"text\": \":rocket: Webserver for branch \`${{ needs.fractal-publish-build-config.outputs.branch }}\` deployed to Heroku app \`$HEROKU_APP_NAME\` :heroku:\", \"icon_emoji\": \":fractal:\"}" \
                  ${{ secrets.SLACK_HOOKS_ENDPOINT }}
