# workflows/fractal-publish-build.yml
#
# Fractal: Build & Publish
# Build and publish each of the relevant Fractal projects.

name: "Fractal: Build & Publish"

on:
    push:
        pull_request:
            - dev
        paths-ignore:
            - "README.md"
            - "**/README.md"
            - ".github/workflows/README.md"
    workflow_dispatch:

jobs:
    ecs-host-service-publish-build-s3:
        name: "ECS Host Service: Build & Publish to AWS S3"
        runs-on: ubuntu-20.04
        env:
            binary-location: ecs-host-service/build
            binary-name: ecs-host-service
            s3-bucket-region: us-east-1 # eventually, we should replicate s3 per region
            s3-bucket-uri: s3://fractal-ecs-host-service

        steps:
            - name: Checkout Git Repository
              uses: actions/checkout@v2
              with:
                  persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
                  fetch-depth: 0 # otherwise, you will fail to push refs to dest repo

            - name: Setup Go environment
              uses: actions/setup-go@v2.1.3

            - name: Configure AWS CLI
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_S3_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.s3-bucket-region }}

            - name: Install Go dependencies
              run: cd ecs-host-service && make deps

            - name: Build Go project
              env:
                  WEBSERVER_AUTH_SECRET_DEV: ${{ secrets.HOST_SERVICE_AND_WEBSERVER_AUTH_SECRET_DEV }}
                  WEBSERVER_AUTH_SECRET_STAGING: ${{ secrets.HOST_SERVICE_AND_WEBSERVER_AUTH_SECRET_STAGING }}
                  WEBSERVER_AUTH_SECRET_PROD: ${{ secrets.HOST_SERVICE_AND_WEBSERVER_AUTH_SECRET_PROD }}
              run: cd ecs-host-service && make build

            - name: Upload binary to S3
              run: aws s3 cp ${{ env.binary-location }}/${{ env.binary-name }} ${{ env.s3-bucket-uri }}/${{ env.binary-name }}

            - name: Notify Slack
              run: |
                  curl -X POST \
                  --data-urlencode "payload={\"channel\": \"#alerts\", \"username\": \"Fractal Bot\", \"text\": \":athletic_shoe: ECS Host Service build pushed to production via S3 upload :bezos:\", \"icon_emoji\": \":fractal:\"}" \
                  ${{ secrets.SLACK_HOOKS_ENDPOINT }}
