# workflows/protocol-build-depdendencies.yml
#
# Build & Publish Fractal protocol dependencies
# Build and publish Fractal version-compatible builds of the Fractal protocol dependencies to AWS S3
# This workflow only builds non-forked dependencies. Forked dependencies, i.e. SDL, are forked as
# fractal/<dependency> (i.e. fractal/SDL) and published directly from the forked repository

name: "Protocol: Build Dependencies"

# We deploy new dependencies on modifications to this file (i.e. building a new version) or
# manual dispatch on our default repository branch, which is `dev`
on:
    pull_request:
        branches:
            - dev
        paths:
            - ".github/workflows/protocol-build-dependencies.yml"
    push:
        branches:
            - dev
        paths:
            - ".github/workflows/protocol-build-dependencies.yml"
    workflow_dispatch:

jobs:
    build-and-publish-openssl:
        name: ${{ matrix.config.name }}
        runs-on: ${{ matrix.config.os }}

        # Platforms to build on/for
        strategy:
            matrix:
                config:
                    - name: "OpenSSL (Windows)"
                      os: windows-2016
                    - name: "OpenSSL (macOS)"
                      os: macos-10.14
                    - name: "OpenSSL (Linux Ubuntu)"
                      os: ubuntu-18.04

        env:
            windows-tar-name: fractal-windows-libcrypto-static-lib.tar.gz
            macos-tar-name: fractal-macos-libcrypto-static-lib.tar.gz
            linux-tar-name: fractal-linux-libcrypto-static-lib.tar.gz
            headers-tar-name: fractal-libcrypto-headers.tar.gz
            s3-bucket-uri: s3://fractal-protocol-shared-libs
            s3-bucket-region: us-east-1

        steps:
            ################################# CONFIG STEPS START ###############################

            - name: Checkout OpenSSL Git Repository
              uses: actions/checkout@v2
              with:
                  repository: openssl/openssl
                  ref: OpenSSL_1_1_1k # GitHub Tag of latest stable OpenSSL release

            # To publish OpenSSL libcrypto.a/libcrypto.lib to AWS S3
            - name: Configure AWS S3 CLI
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_S3_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.s3-bucket-region }}

            ###################################################################################
            ################################ WINDOWS STEPS START ##############################

            - name: On Windows, Set up Visual Studio Developer Command Prompt (for nmake)
              if: runner.os == 'Windows'
              uses: ilammy/msvc-dev-cmd@v1

            - name: On Windows, Set up NASM
              if: runner.os == 'Windows'
              uses: ilammy/setup-nasm@v1

            - name: Build Fractal OpenSSL on Windows
              if: runner.os == 'Windows'
              shell: cmd
              run: |
                  REM configure and build OpenSSL for Windows on the GitHub Actions Windows OS Version, with O3 flag
                  perl Configure VC-WIN64A --release
                  nmake

            ###################################################################################
            ################################# MACOS STEPS START ###############################

            - name: Build Fractal OpenSSL on macOS
              if: runner.os == 'macOS'
              shell: bash
              env:
                  FRACTAL_OSX_SYSROOT: "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk" # Necessary for building on macOS (protocol does NOT support 10.15+ SDKs)
              run: |
                  # Explicitly retrieve macOS 10.14 SDK
                  wget https://github.com/phracker/MacOSX-SDKs/releases/download/10.15/MacOSX10.14.sdk.tar.xz

                  # Untar it
                  xz -d MacOSX10.14.sdk.tar.xz
                  tar -xf MacOSX10.14.sdk.tar

                  # Move it to the right folder for building SDL
                  mv MacOSX10.14.sdk /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs

                  # configure and build OpenSSL with O3 flag
                  ./config --release
                  make

            ###################################################################################
            ############################# LINUX UBUNTU STEPS START ############################

            - name: Build Fractal OpenSSL on Linux Ubuntu
              if: runner.os == 'Linux'
              shell: bash
              run: |
                  # configure and build OpenSSL with O3 flag
                  ./config --release
                  make

            ###################################################################################
            ################################# PUBLISH STEPS START #############################

            # Only publish to AWS S3 on Push events (code merged into `dev`), PRs only build to test
            - name: Tar libcrypto and Upload to AWS S3
              if: ${{ github.event_name == 'push' }}
              shell: bash
              run: |
                  if [ "$RUNNER_OS" == "Linux" ]; then
                      tar -zcvf ${{ env.linux-tar-name }} libcrypto.a
                      aws s3 cp ${{ env.linux-tar-name }} ${{ env.s3-bucket-uri }}/${{ env.linux-tar-name }}
                  elif [ "$RUNNER_OS" == "Windows" ]; then
                      tar -zcvf ${{ env.windows-tar-name }} libcrypto-1_1-x64.dll libcrypto.lib
                      aws s3 cp ${{ env.windows-tar-name }} ${{ env.s3-bucket-uri }}/${{ env.windows-tar-name }}
                  else
                      tar -zcvf ${{ env.macos-tar-name }} libcrypto.a
                      aws s3 cp ${{ env.macos-tar-name }} ${{ env.s3-bucket-uri }}/${{ env.macos-tar-name }}
                  fi

            # Only run once, as headers are identical on every OS
            - name: Tar OpenSSL headers and Upload to AWS S3
              if: ${{ github.event_name == 'push' && runner.os == 'Linux'}}
              shell: bash
              run: |
                  # remove all .h.in unnecessary files
                  find . -name "*.h.in" -type f -delete

                  # move headers in include/openssl/ to include/, and delete openssl folder
                  mv include/openssl/* include/
                  rmdir include/openssl

                  # tar and upload the OpenSSL headers only
                  tar -zcvf ${{ env.headers-tar-name }} include
                  aws s3 cp ${{ env.headers-tar-name }} ${{ env.s3-bucket-uri }}/${{ env.headers-tar-name }}

            ###################################################################################

            - name: Notify Slack on Workflow Error (Only on Push Events)
              if: ${{ github.event_name == 'push' && failure() }}
              shell: bash
              run: |
                  curl -X POST \
                  --data-urlencode "payload={\"channel\": \"#alerts-prod\", \"username\": \"Fractal Bot\", \"text\": \":rotating_light: Failed to deploy OpenSSL \`libcrypto\` library to AWS S3, investigate immediately :rotating_light:\", \"icon_emoji\": \":fractal:\"}" \
                  ${{ secrets.SLACK_HOOKS_ENDPOINT }}

    notify-slack-openssl:
        name: Notify Slack
        needs: [build-and-publish-openssl]
        if: ${{ github.event_name == 'push' && success() }}
        runs-on: ubuntu-20.04
        steps:
            - name: Notify Slack
              run: |
                  curl -X POST \
                  --data-urlencode "payload={\"channel\": \"#alerts-prod\", \"username\": \"Fractal Bot\", \"text\": \"Fractal OpenSSL \`libcrypto\` Static Build Deployed to Production via Upload to AWS S3.\", \"icon_emoji\": \":fractal:\"}" \
                  ${{ secrets.SLACK_HOOKS_ENDPOINT }}
