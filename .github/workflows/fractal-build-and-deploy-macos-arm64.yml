# workflows/fractal-build-and-deploy-macos-arm64.yml
#
# Fractal: Build & Deploy
# Build and deploy the Fractal client application for macOS ARM64 systems.


name: "Fractal: Build & Deploy"

on:
  push:
    branches:
      - prod
      - staging
      - dev
    paths-ignore:
      - "README.md"
      - "**/README.md"
      - ".github/workflows/README.md"
  workflow_dispatch:
    inputs:
      job-name:
        description: |
          The name of the job to run or "all" to trigger all jobs,
          "none" to run no jobs, or "filter" to run only those jobs
          whose dependency files are different when comparing those
          on the chosen branch to those on the branch that normally
          corresponds to the target deployment environment.
        required: true
        default: "all" # Default to triggering all jobs, for a clean rebuild
      target:
        description: |
          The target deployment environment to which the chosen ref
          should be deployed. The target deployment environment
          should be one of "dev", "staging", or "prod". The default
          target deployment environment matches the branch that is
          being deployed.
        required: false
      dry-run:
        description: |
          A boolean indicating whether or not to perform a dry run
          deployment. If this boolean is set, code will be built, but
          not deployed.
        required: true
        # Avoid accidental mistakes by doing dry run deployments by
        # default
        default: true

jobs:
  # Configure Jobs
  # Detect the branch using regex matching and store as an output to regulate downstream actions.
  # Access branch with `fractal-publish-build-config.outputs.branch`.
  fractal-publish-build-config:
    name: "Configure Jobs"
    runs-on: ubuntu-20.04
    outputs:
      branch: ${{ steps.set-deploy-environment.outputs.environment }}
      jobs: ${{ steps.detect-jobs.outputs.jobs }}
      publish: ${{ steps.detect-publish.outputs.publish }}
      sentry_environment: ${{ steps.set-sentry-environment.outputs.sentry_environment }}
      webserver_url: ${{ steps.set-webserver-url.outputs.webserver_url }}
      auth0-domain: ${{ steps.set-deploy-environment.outputs.auth0-domain }}
      auth0-client-id: ${{ steps.set-deploy-environment.outputs.auth0-client-id }}
      auth0-client-secret-key: ${{ steps.set-deploy-environment.outputs.auth0-client-secret-key }}
    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Get the whole git history

      - name: Setup Python-based notifications
        working-directory: .github/workflows/helpers
        run: ./notifications/setup_notifications.sh

      - name: Set deploy environment
        id: set-deploy-environment
        if: ${{ github.event_name == 'push' || contains(fromJSON('["", "dev", "staging", "prod"]'), github.event.inputs.target) }}
        uses: ./.github/actions/set-environment
        with:
          # Deploy the git ref corresponding to the event that
          # triggered the workflow unless the event that triggered the
          # workflow was a manual workflow_dispatch event. In such a
          # case, the branch specified by the target input should be
          # deployed.
          ref: ${{ github.event.inputs.target || github.ref }}

      - name: Set Sentry environment based on Git Branch
        id: set-sentry-environment
        run: |
          # Grab the name of the deployment environment from set-deploy-environment
          BRANCH_NAME=${{ steps.set-deploy-environment.outputs.environment }}

          # on dev branch, we don't set Sentry environment as we don't want to
          # log to Sentry in development
          if [ "$BRANCH_NAME" == "prod" ]; then
              SENTRY_ENVIRONMENT=production
          elif [ "$BRANCH_NAME" == "staging" ]; then
              SENTRY_ENVIRONMENT=staging
          else
              SENTRY_ENVIRONMENT=""
          fi
          echo "sentry_environment is set to: $SENTRY_ENVIRONMENT"
          echo "::set-output name=sentry_environment::$SENTRY_ENVIRONMENT"

      - name: Set webserver URL based on Git Branch (prod, staging, dev)
        id: set-webserver-url
        run: |
          # Grab the name of the deployment environment from set-deploy-environment
          BRANCH_NAME=${{ steps.set-deploy-environment.outputs.environment }}
          if [ "$BRANCH_NAME" == "prod" ]; then
            WEBSERVER_URL=https://prod-server.fractal.co
          elif [ "$BRANCH_NAME" == "staging" ]; then
            WEBSERVER_URL=https://staging-server.fractal.co
          else
            WEBSERVER_URL=https://dev-server.fractal.co
          fi
          echo "webserver_url is set to: $WEBSERVER_URL"
          echo "::set-output name=webserver_url::$WEBSERVER_URL"

      # This will create a "jobs" variable, containing the list of jobs to run (Each wrapped in a |)
      - name: Detect Job(s)
        id: detect-jobs
        run: |
          # Grab the name of the deployment environment from set-deploy-environment
          BRANCH_NAME=${{ steps.set-deploy-environment.outputs.environment }}

          if [[ "${{ github.event_name }}" == 'push' ]]; then
            if [[ "$BRANCH_NAME" =~ "(staging|prod)" ]]; then
            # On push to staging/prod, we want to run all jobs
              JOB_NAME="all"
            else
            # TODO: On push to dev, we want to filter jobs
              JOB_NAME="all"
            fi
            # Store the commit from before the push was made
            # This is only used when filtering
            COMPARISON_COMMIT="${{ github.event.before }}"
          else
            # If running from workflow_dispatch, We use the job-name given as the dispatch input
            JOB_NAME="${{ github.event.inputs.job-name }}"
            # If running from workflow_dispatch, we compare to the branch that we're simulating a build-and-deploy against
            # This is only used when filtering
            COMPARISON_COMMIT="origin/$BRANCH_NAME"
          fi

          # Store job dependency files
          declare -A job_dependencies
          # If "" is given, then the whole repo will be a dependency
          job_dependencies[mandelboxes-and-amis-publish-ghcr-and-aws]="host-setup host-service protocol mandelboxes"
          job_dependencies[webserver-update-fractal-services]=" "
          job_dependencies[webserver-deploy-heroku]="webserver"
          job_dependencies[client-applications-publish-build-s3]="protocol client-applications core-ts"
          job_dependencies[microservices-deploy-auth0-rules]="microservices"
          # Files that all jobs depend on
          universal_dependencies=".github/workflows/fractal-build-and-deploy.yml"

          if [[ "$JOB_NAME" == "all" ]]; then
          # If JOB_NAME=all, then we do indeed run all of jobs in the list
            JOB_LIST="${!job_dependencies[@]}"
          # If JOB_NAME=filter, then we should filter the job list based on the job's dependencies
          elif [[ "$JOB_NAME" == "filter" ]]; then
            JOB_LIST=""
            for i in "${!job_dependencies[@]}"
            do
              DEPS="${job_dependencies[$i]}"
              # If there are universal_dependencies, include them in the space-separated list
              if [[ -n "$universal_dependencies" ]]; then
                DEPS="$DEPS $universal_dependencies"
              fi
              # Replace spaces with |'s, to be used as "OR" in a regex path checker
              DEPS=$(echo "$DEPS" | tr ' ' '|')
              echo "Checking $i against $DEPS"
              # Check if any diff'ed file starts with any of the dependency paths
              # || true to prevent set -e failure exit on this line, to silence grep's return code
              # We instead, just want to store grep's result in a variable
              MATCH=$(git diff --name-only "$COMPARISON_COMMIT" -- | grep -E "^($DEPS)" -m 1 || true)
              if [[ -n "$MATCH" ]]; then
                echo "Dependency \"$MATCH\" of job \"$i\" was changed since $COMPARISON_COMMIT"
                JOB_LIST="$JOB_LIST $i"
              else
                echo "No dependency of job \"$i\" was changed"
              fi
              echo # Newline for easier readability
            done
          # If JOB_NAME=none, we run exactly no jobs
          elif [[ "$JOB_NAME" == "none" ]]; then
            JOB_LIST=""
          # If we have the name of a job name, we run exactly that job
          elif [[ -n "${job_dependencies[$JOB_NAME]}" ]]; then
            JOB_LIST="$JOB_NAME"
          # Otherwise, an invalid job name was given
          else
            echo "\"$JOB_NAME\" not a valid job name"
            exit 1
          fi

          echo "Jobs that have been selected to run: $JOB_LIST"
          # Wrap jobs with |, so that "|job|" matches only that exact job (Without substring problems)
          JOB_LIST=$(echo "|$JOB_LIST|" | tr ' ' '|')
          echo "::set-output name=jobs::$JOB_LIST"

      - name: Detect Whether to Publish the Job(s) or Not
        id: detect-publish
        run: |
          trap 'echo "::error::Command '\''$BASH_COMMAND'\'' exited with code $?"' ERR

          ref="${{ github.ref }}"
          target="${{ steps.set-deploy-environment.outputs.environment }}"

          case "$ref" in
              *prod|*staging|*dev)
                  # Get the short branch name for dev, staging, and
                  # prod by stripping away any leading characters. For
                  # example, "/refs/heads/dev" becomes "dev".
                  branch="${ref##*/}" ;;
              *)
                  branch="$ref" ;;
          esac

          # We are only allowed to deploy a branch to its corresponding
          # target deployment environment. In other words, we can only
          # deploy dev to dev, staging to staging, and prod to prod.
          # Feature branches are not deployable.
          deployable="$([ "$branch" != "$target" ] || echo "1")"

          if [ "${{ github.event_name }}" = "push" ]; then
              # If the workflow was triggered by a push event, the
              # dry-run input is not available. We can assert that the
              # push event was triggered on either dev, staging, or
              # prod, and then set the dry run flag to false.
              [[ "$branch" =~ dev|staging|prod ]]
              dry_run="false"
          else
              dry_run="${{ github.event.inputs.dry-run }}"

              # If we're trying to perform a real deployment, but the
              # current configuration is not deployable, abort.
              test "$deployable" -o "$dry_run" != "false"
          fi

          # Publish the job outputs iff this is not a dry run and
          # the git branch that we're deploying matches the target
          # deployment environment.
          publish="$([ "$deployable" -a "$dry_run" = "false" ] && echo "true" || echo "false")"

          echo "Publish is set to: $publish"
          echo "::set-output name=publish::$publish"

      - name: Notify Slack on Job Error
        if: failure()
        shell: python3 {0}
        run: |
          from notifications.slack_bot import slack_post

          SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT }}"
          SLACK_CHANNEL = "#alerts-${{ needs.fractal-publish-build-config.outputs.branch }}"
          BODY = "@releases :rotating_light: Deployment failed: could not generate configs for deployment in `fractal-publish-build-config` job, investigate immediately :rotating_light: (<https://github.com/fractal/fractal/actions/runs/${{ github.run_id }} | see logs>)"

          slack_post(slack_webhook=SLACK_WEBHOOK, channel=SLACK_CHANNEL, body=BODY)

  # We use a separate job for building the monorepo configuration. The monorepo
  # configuration is built in a Docker container, and Docker Actions can only be
  # run on Linux environments on GitHub. As we need to build the client application
  # in Mac and Windows environments, we need to run the configuration builder as a
  # separate job. We set the JSON configuration data as "outputs" of this job step,
  # so that it can be consumed by other jobs.
  #
  # Before we set the "outputs" of this job step, we need to perform a small trick
  # to get around a implementation detail of GitHub Actions. The GitHub Actions runner
  # will silently ignore any "outputs" that contain values inside the GitHub secrets
  # store. This is for security purposes, but it's rather inconvenient when we're trying
  # to pass around a configuration object that may contain secret values. To get around
  # GitHub's limitation, we first encode the configuration string to base-85. Other jobs
  # will need to decode the base-85 string to produce the JSON configuration object.
  fractal-build-monorepo-config:
    name: "Building Monorepo Config"
    runs-on: ubuntu-20.04
    needs: [fractal-publish-build-config]
    outputs:
      macos: ${{ steps.config-macos.outputs.config }}
      win32: ${{ steps.config-win32.outputs.config }}

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v2

      - name: Build Monorepo Configuration for macOS
        id: config-macos
        uses: ./.github/actions/monorepo-config
        with:
          os: macos
          deploy: ${{ needs.fractal-publish-build-config.outputs.branch }}

      - name: Build Monorepo Configuration for Windows
        id: config-win32
        uses: ./.github/actions/monorepo-config
        with:
          os: win32
          deploy: ${{ needs.fractal-publish-build-config.outputs.branch }}

      - name: Log macOS Configuration
        shell: python3 {0}
        run: print(r"""${{ steps.config-macos.outputs.config }}""")

      - name: Log Win32 Configuration
        shell: python3 {0}
        run: print(r"""${{ steps.config-win32.outputs.config }}""")




  # Client Applications: Build & Publish to AWS S3
  # Build and publish the client applications to their respective AWS S3 bucket,
  # from which Electron-Updater pulls them for auto-updating
  # Runs if config succeeds and branch is in ["prod", "staging", "dev"] and all previous publish jobs succeed
  client-applications-publish-build-s3:
    name: "Client Applications: Build & Deploy ${{ matrix.config.name }}"
    runs-on: ${{ matrix.config.os }}
    outputs:
      release_version: ${{ steps.generate-release-version.outputs.release_version }}
    needs:
      [
        fractal-build-monorepo-config,
        fractal-publish-build-config,
        webserver-deploy-heroku,
        microservices-deploy-auth0-rules,
        mandelboxes-and-amis-publish-ghcr-and-aws,
        webserver-spin-up-new-buffer,
      ]
    concurrency: client-applications-publish-build-s3-${{ matrix.config.os }}-${{ github.ref }}

    # Only run client-apps deployment if none of the previous steps failed
    if: |
      always() &&
      (contains(needs.fractal-publish-build-config.outputs.jobs, '|client-applications-publish-build-s3|')) &&
      (needs.webserver-deploy-heroku.result == 'success') &&
      (needs.webserver-spin-up-new-buffer.result == 'success') &&
      (needs.microservices-deploy-auth0-rules.result == 'success') &&
      (needs.mandelboxes-and-amis-publish-ghcr-and-aws.result == 'success')

    strategy:
      matrix:
        config:
          - name: "Windows Desktop Application"
            os: windows-2019 # cmake is pre-installed on windows-2019+ GHA machines
          - name: "macOS Desktop Application"
            os: macos-10.15 # cmake is pre-installed on macos-10.15+ machines

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v2
        with:
          # Get the whole git history. We must do this because the
          # client app calls `git describe` in order to bake the
          # version number into the react frontend.
          fetch-depth: 0

      - name: Install Node.js 16
        uses: actions/setup-node@v2.4.0
        with:
          node-version: "16"

      # Necessary for Electron to upload packaged applications to AWS S3
      - name: Configure AWS S3 CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_S3_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      ############################# Windows Configuration Steps START #############################

      - name: Install cmake via Chocolatey on Windows GHA Machine
        if: runner.os == 'Windows'
        uses: crazy-max/ghaction-chocolatey@v1
        with:
          args: install cmake --pre --no-progress --installargs 'ADD_CMAKE_TO_PATH=System'

      - name: Set up Visual Studio Developer Command Prompt (for nmake)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      #############################################################################################
      ############################### Unix Configuration Steps START ##############################

      - name: Install macOS Codesigning Certificates on macOS GHA Machine
        if: runner.os == 'macOS'
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.MACOS_SIGNING_CERTIFICATE }}
          p12-password: ${{ secrets.MACOS_SIGNING_CERTIFICATE_PASSWORD }}

      # This step follows the specs in https://github.com/electron/electron-notarize#notes-on-jwt-authentication
      - name: Install macOS Notarization API Key
        if: runner.os == 'macOS'
        run: |
          mkdir -p ~/private_keys
          aws s3 cp s3://fractal-dev-secrets/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8 ~/private_keys

      #############################################################################################
      #################################### Publish Steps START ####################################

      - name: Retrieve Desktop App Version from Config Database
        id: generate-release-version
        shell: bash --noprofile --norc -eo pipefail {0}
        run: |
          BRANCH_NAME="${{ needs.fractal-publish-build-config.outputs.branch }}"
          ACCESS_KEY='${{ secrets.HASURA_GRAPHQL_ACCESS_KEY_CONFIG }}'

          # curl GraphQL API to retrieve version number from config database
          curl -X POST \
          -H "Content-Type: application/json" \
          -H "X-Hasura-Admin-Secret: $ACCESS_KEY" \
          --data "{ \"query\": \"query { desktop_app_version { major minor micro dev_rc staging_rc } }\" }" \
          https://config-database.fractal.co/v1/graphql > response.json

          # Check if we actually got back valid json. If not, we should
          # throw a human-readable error because the config DB might be
          # down.
          if cat response.json | jq -e . > /dev/null 2>&1; then
            echo "Got some valid JSON from the config DB:"
            cat response.json
            echo
            echo "Continuing..."
          else
            echo "Failed to parse the JSON from the config DB. Is it up?" && false
          fi

          # parse JSON into major.minor.micro-rc
          MAJOR=$(cat response.json | jq '.data.desktop_app_version[0].major')
          MINOR=$(cat response.json | jq '.data.desktop_app_version[0].minor')
          MICRO=$(cat response.json | jq '.data.desktop_app_version[0].micro')
          DEV_RC=$(cat response.json | jq '.data.desktop_app_version[0].dev_rc')
          STAGING_RC=$(cat response.json | jq '.data.desktop_app_version[0].staging_rc')

          # remove temporary JSON file
          rm response.json

          echo "Current prod version: $MAJOR.$MINOR.$MICRO"
          echo "Current staging version: $MAJOR.$MINOR.$MICRO-staging-rc.$STAGING_RC"
          echo "Current dev version: $MAJOR.$MINOR.$MICRO-dev-rc.$DEV_RC"

          # if dev or staging, increment RC by 1, else increment micro by 1 and set RC to 0
          if [[ "$BRANCH_NAME" == "prod" ]]; then
            echo 'Using prod configuration...'
            # increment version by 0.0.1
            NEW_MICRO=$(echo "print( ${MICRO} + 1)" | python)

            # set new desktop app version
            NEW_VERSION="${MAJOR}.${MINOR}.${NEW_MICRO}"

            # store NEW_MICRO in GITHUB_ENV to push to GraphQL API, and reset STAGING_RC and DEV_RC to 0
            echo "new_micro_version=${NEW_MICRO}" >> $GITHUB_ENV
            echo "new_staging_rc_version=0" >> $GITHUB_ENV
            echo "new_dev_rc_version=0" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" == "staging" ]]; then
            echo 'Using staging configuration...'
            # increment version by staging-rc.1
            NEW_STAGING_RC=$(echo "print( ${STAGING_RC} + 1)" | python)

            # set temporary variable for upcoming micro version which is 1 ahead of current, since
            # staging/dev are release candiates (rc) for the next version
            # we don't push that micro version to GraphQL in staging/dev, only on prod when it becomes current
            UPCOMING_MICRO=$(echo "print( ${MICRO} + 1)" | python)

            # set new desktop app version
            NEW_VERSION="${MAJOR}.${MINOR}.${UPCOMING_MICRO}-staging-rc.${NEW_STAGING_RC}"

            # store NEW_STAGING_RC in GITHUB_ENV to push to GraphQL API
            echo "new_staging_rc_version=${NEW_STAGING_RC}" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" == "dev" ]]; then
            echo 'Using dev configuration...'
            # increment version by dev-rc.1
            NEW_DEV_RC=$(echo "print( ${DEV_RC} + 1)" | python)

            # set temporary variable for upcoming micro version which is 1 ahead of current, since
            # staging/dev are release candiates (rc) for the next version
            # we don't push that micro version to GraphQL in staging/dev, only on prod when it becomes current
            UPCOMING_MICRO=$(echo "print( ${MICRO} + 1)" | python)

            # set new desktop app version
            NEW_VERSION="${MAJOR}.${MINOR}.${UPCOMING_MICRO}-dev-rc.${NEW_DEV_RC}"

            # store NEW_DEV_RC in GITHUB_ENV to push to GraphQL API
            echo "new_dev_rc_version=${NEW_DEV_RC}" >> $GITHUB_ENV
          else
            echo 'Error: Invalid branch' && false
          fi

          echo "New $BRANCH_NAME version: ${NEW_VERSION}"

          # store new desktop app version as GitHub env to substitute in client-apps package.json
          echo "desktop_app_new_version=${NEW_VERSION}" >> $GITHUB_ENV

          # store new desktop app version as GitHub step output to substitute in GitHub Release tag creation
          echo "::set-output name=release_version::${NEW_VERSION}"

      # Bump the package version in package.json using jq
      - name: Update Package Version
        working-directory: client-applications
        shell: bash --noprofile --norc -eo pipefail {0}
        run: |
          mv package.json packageOld.json
          # String substitution works here because of the GitHub Actions double-curly-brace variable "pre-processor" notation
          cat packageOld.json | jq '.version = "${{ env.desktop_app_new_version }}"' > package.json
          rm packageOld.json

      # (builds the branch that it is run on automatically, so prod if running on push to prod)
      - name: Publish the Windows Electron Application
        if: false && runner.os == 'Windows'
        working-directory: client-applicationsp
        env:
          AWS_ACCESS_KEY: ${{ secrets.CLIENTAPP_AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.CLIENTAPP_AWS_SECRET_KEY }}
          AMPLITUDE_KEY: ${{ secrets.CLIENTAPP_AMPLITUDE_KEY }}
        shell: cmd # Acts as Visual Studio Developer Command Prompt due to ilammy/msvc-dev-cmd@v1
        run: |
          REM We use "call" before since ancient DOS versions don't support recursively executing batch files
          REM We need to increase the timeout to deal with GHA's weak VMs.
          call yarn config set network-timeout 600000
          call yarn cache clean
          call yarn install
          call yarn package:publish \
          --config='${{ needs.fractal-build-monorepo-config.outputs.win32 }}' \
          --version='${{ env.desktop_app_new_version }}' \
          --environment='${{ needs.fractal-publish-build-config.outputs.branch }}' \
          --commit='${{ github.sha }}'

      # (builds the branch that it is run on automatically, so prod if running on push to prod)
      - name: Publish the MacOS Electron Application
        if: runner.os == 'macOS'
        working-directory: client-applications
        env:
          AWS_ACCESS_KEY: ${{ secrets.CLIENTAPP_AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.CLIENTAPP_AWS_SECRET_KEY }}
          AMPLITUDE_KEY: ${{ secrets.CLIENTAPP_AMPLITUDE_KEY }}
          FRACTAL_OSX_SYSROOT: "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk"

          # These two environment variables must be set as per https://www.npmjs.com/package/electron-builder-notarize#api-key
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_KEY_ISSUER_ID: ${{ secrets.APPLE_API_KEY_ISSUER_ID }}
        run: |
          # Build the Fractal protocol and package the Electron application
          # We need to increase the timeout to deal with GHA's weak VMs.
          yarn config set network-timeout 600000
          yarn cache clean
          yarn install
          yarn package:publish \
          --config='${{ needs.fractal-build-monorepo-config.outputs.macos }}' \
          --version='${{ env.desktop_app_new_version }}' \
          --environment='${{ needs.fractal-publish-build-config.outputs.branch }}' \
          --commit='${{ github.sha }}'

      # Update hasura version
      # Run only on Mac, to prevent updating the database multiple times
      - name: Update Config Database version with the new version
        if: needs.fractal-publish-build-config.outputs.publish == 'true' && runner.os == 'macOS'
        run: |
          BRANCH_NAME="${{ needs.fractal-publish-build-config.outputs.branch }}"
          ACCESS_KEY='${{ secrets.HASURA_GRAPHQL_ACCESS_KEY_CONFIG }}'

          # curl GraphQL API to set new micro/staging_rc/dev_rc version number and git commit hash in config database
          if [[ "$BRANCH_NAME" == "prod" ]]; then
            curl -X POST \
            -H "Content-Type: application/json" \
            -H "X-Hasura-Admin-Secret: $ACCESS_KEY" \
            --data "{ \"query\": \"mutation { update_desktop_app_version_by_pk(pk_columns: {id: 1}, _set: {micro: ${{ env.new_micro_version }}, staging_rc: ${{ env.new_staging_rc_version }}, dev_rc: ${{ env.new_dev_rc_version }}, prod_commit_hash: \\\"${{ github.sha }}\\\"}) { id } }\" }" \
            https://config-database.fractal.co/v1/graphql
          elif [[ "$BRANCH_NAME" == "staging" ]]; then
            curl -X POST \
            -H "Content-Type: application/json" \
            -H "X-Hasura-Admin-Secret: $ACCESS_KEY" \
            --data "{ \"query\": \"mutation { update_desktop_app_version_by_pk(pk_columns: {id: 1}, _set: {staging_rc: ${{ env.new_staging_rc_version }}, staging_commit_hash: \\\"${{ github.sha }}\\\"}) { id } }\" }" \
            https://config-database.fractal.co/v1/graphql
          elif [[ "$BRANCH_NAME" == "dev" ]]; then
            curl -X POST \
            -H "Content-Type: application/json" \
            -H "X-Hasura-Admin-Secret: $ACCESS_KEY" \
            --data "{ \"query\": \"mutation { update_desktop_app_version_by_pk(pk_columns: {id: 1}, _set: {dev_rc: ${{ env.new_dev_rc_version }}, dev_commit_hash: \\\"${{ github.sha }}\\\"}) { id } }\" }" \
            https://config-database.fractal.co/v1/graphql
          fi

  # Client Applications: Notify Slack
  # Notify Slack after building and publishing the client applications for all supported OSes.
  # Runs if client-applications-publish-build-s3 runs. We keep this separate from the
  # client-applications-publish-build-s3 job because it is a matrix job. If any matrix iteration
  # fails, client-applications-publish-build-s3 is marked as failed.
  client-applications-notify-slack:
    name: "Client Applications: Notify Slack"
    runs-on: ubuntu-20.04
    needs: [fractal-publish-build-config, client-applications-publish-build-s3]
    # run if client-applications-publish-build-s3 succeeds or fails (but not skipped or cancelled)
    if: always() && (needs.client-applications-publish-build-s3.result == 'success' || needs.client-applications-publish-build-s3.result == 'failure' )
    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v2

      - name: Setup Python-based notifications
        working-directory: .github/workflows/helpers
        run: ./notifications/setup_notifications.sh

      - name: Notify Slack on Job Success
        shell: python3 {0}
        if: needs.client-applications-publish-build-s3.result == 'success'
        run: |
          from notifications.slack_bot import slack_post

          SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT }}"
          SLACK_CHANNEL = "#alerts-${{ needs.fractal-publish-build-config.outputs.branch }}"
          BRANCH_NAME = "${{ needs.fractal-publish-build-config.outputs.branch }}"

          if BRANCH_NAME == "prod":
            WEBSITE_URL = "https://fractal.co"
          elif "BRANCH_NAME" == "staging":
            WEBSITE_URL = "https://staging.fractal.co"
          else:
            WEBSITE_URL = "https://dev.fractal.co"

          TITLE = ":electron: Windows & macOS Applications Deployed :electron:"
          BODY = f"Windows & macOS Applications deployed via upload to AWS S3 on branch: `{BRANCH_NAME}` - You can download them from {WEBSITE_URL} (<https://github.com/fractal/fractal/actions/runs/${{ github.run_id }} | see logs>)"

          slack_post(slack_webhook=SLACK_WEBHOOK, channel=SLACK_CHANNEL, body=BODY, title=TITLE)

      - name: Notify Slack on Job Error
        if: needs.client-applications-publish-build-s3.result == 'failure'
        shell: python3 {0}
        run: |
          from notifications.slack_bot import slack_post

          SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT }}"
          SLACK_CHANNEL = "#alerts-${{ needs.fractal-publish-build-config.outputs.branch }}"
          BODY = "@releases :rotating_light: Deployment failed: could not deploy Windows/macOS Electron applications in `client-applications-publish-build-s3` job, investigate immediately :rotating_light: (<https://github.com/fractal/fractal/actions/runs/${{ github.run_id }} | see logs>)"

          slack_post(slack_webhook=SLACK_WEBHOOK, channel=SLACK_CHANNEL, body=BODY)

  # Create GitHub Tag
  # Create a GitHub Tag when promoting to the `prod` branch
  # Runs if the entire deployment succeeds and the promotion is running on `prod`
  fractal-create-github-release-tag:
    name: "Create GitHub Release Tag"
    runs-on: ubuntu-20.04
    needs:
      [
        fractal-publish-build-config,
        webserver-deploy-heroku,
        microservices-deploy-auth0-rules,
        mandelboxes-and-amis-publish-ghcr-and-aws,
        webserver-spin-up-new-buffer,
        client-applications-publish-build-s3,
        webserver-swap-active-amis,
      ]
    if: needs.fractal-publish-build-config.outputs.publish == 'true' && contains(fromJSON('["prod"]'), needs.fractal-publish-build-config.outputs.branch)
    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v2

      - name: Setup Python-based notifications
        working-directory: .github/workflows/helpers
        run: ./notifications/setup_notifications.sh

      - name: Retrieve Today's Date
        run: echo "date=$(date)" >> $GITHUB_ENV

      - name: Create GitHub Tag
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.client-applications-publish-build-s3.outputs.release_version }}
          body: Fractal Production Release on ${{ env.date }}
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify Slack on Job Success
        shell: python3 {0}
        run: |
          from notifications.slack_bot import slack_post

          SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT }}"
          SLACK_CHANNEL = "#alerts-${{ needs.fractal-publish-build-config.outputs.branch }}"
          TITLE = ":github: Fractal GitHub Release Completed :github:"
          BODY = "Deployment of Fractal Version `v${{ needs.client-applications-publish-build-s3.outputs.release_version }}` on branch `${{ needs.fractal-publish-build-config.outputs.branch }}` completed - See the generated GitHub Release here: https://github.com/fractal/fractal/releases/tag/v${{ needs.client-applications-publish-build-s3.outputs.release_version }} (<https://github.com/fractal/fractal/actions/runs/${{ github.run_id }} | see logs>)"

          slack_post(slack_webhook=SLACK_WEBHOOK, channel=SLACK_CHANNEL, body=BODY, title=TITLE)

      - name: Notify Slack on Job Error
        if: failure()
        shell: python3 {0}
        run: |
          from notifications.slack_bot import slack_post

          SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT }}"
          SLACK_CHANNEL = "#alerts-${{ needs.fractal-publish-build-config.outputs.branch }}"
          BODY = "@releases :rotating_light: Deployment failed: could not create GitHub Release in `fractal-create-github-release-tag` job, investigate immediately :rotating_light: (<https://github.com/fractal/fractal/actions/runs/${{ github.run_id }} | see logs>)"

          slack_post(slack_webhook=SLACK_WEBHOOK, channel=SLACK_CHANNEL, body=BODY)
