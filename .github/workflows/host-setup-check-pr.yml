# workflows/host-setup-check-pr.yml
#
# Host Setup: Check PR
# Checks an Host Setup PR for AMI building success with Packer.

name: "Host Setup: Check PR"

on:
  pull_request:
    paths:
      - "host-setup/**"
      - "!host-setup/README.md"
      - ".github/workflows/host-setup-check-pr.yml"
  workflow_dispatch:

# This guarantees that if you push many commits to the same PR, only the latest
# commit will get run (others get cancelled)
concurrency:
  group: host-setup-check-pr-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  # Building
  # Check that the AMIs build
  host-setup-check-pr-building:
    name: Building
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3

      - name: Set up Python Environment
        uses: actions/setup-python@v3.1.2
        with:
          python-version: "3.10.4"

      ########################## Building Backend Services ######################

      - name: Set up Go Environment
        uses: actions/setup-go@v3.2.0
        with:
          go-version: "1.18"

      - name: Authenticate Go Commands with GitHub
        env:
          GH_USERNAME: ${{ secrets.GHA_USERNAME }}
          GH_PAT: ${{ secrets.GHA_PERSONAL_ACCESS_TOKEN }}
        run: git config --global url.https://$GH_USERNAME:$GH_PAT@github.com/.insteadOf https://github.com/

      - name: Build Backend Services
        working-directory: backend/services
        env:
          HEROKU_USER: developers@whist.com
          HEROKU_APIKEY: ${{ secrets.HEROKU_DEVELOPER_API_KEY }}
        run: make build

      ###########################################################################
      ############################## Building AMIs ##############################

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_GITHUB_ACTIONS_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_GITHUB_ACTIONS_USER_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set Host Service APP_ENV based to DEV (File gets read by host-service.service)
        working-directory: host-setup
        run: echo 'APP_ENV=DEV' > app_env.env

      # This spins up an AWS EC2 instance to create the AMI, and then deletes it
      # It *could* fail if we are maxed-out in number AWS vCPUs allowed in the source region, us-east-1
      - name: Generate Packer Configuration and Create New AMI
        working-directory: host-setup
        shell: python3 {0}
        run: |
          import os, json, datetime, subprocess

          # Get the current date and time
          date_str = datetime.datetime.utcnow().strftime("%Y-%m-%d-%H-%M-%S")

          # Generate the Packer configuration variables
          # We hardcode the git_hash and git_branch name of pre-built Chrome/Brave mandelbox images stored in
          # GHCR to be able to test AMIs without needing to build and deploy new mandelboxes

          data = {}
          data["git_branch"] = "dev"
          data["git_hash"] = "88c656033c927e10337cf1c00bb0e73359929ecd"
          data["pr_number"] = "${{ github.event.number }}" # Used to identify the Packer test instance we create
          data["access_key"] = "${{ secrets.AWS_GITHUB_ACTIONS_USER_ACCESS_KEY_ID }}"
          data["secret_key"] = "${{ secrets.AWS_GITHUB_ACTIONS_USER_SECRET_ACCESS_KEY }}"
          data["ami_name"] = f"whist-test-ami-${{ github.sha }}-{date_str}"
          data["mandelbox_logz_shipping_token"] = "${{ secrets.LOGZ_SHIPPING_TOKEN_DEV }}"

          # For testing, we only clone our new AMI  to one region, us-east-1, to save time in CI. In deployments,
          # data["destination_regions"] should be a list of all AWS regions we support
          data["destination_regions"] = ["us-east-1"]

          # List all AWS regions we support
          supported_aws_regions = [
            "us-east-1",
            "us-east-2",
            "us-west-1",
            "us-west-2",
            "ca-central-1",
            "sa-east-1",
            "eu-north-1",
            "eu-south-1",
            "eu-west-1",
            "eu-west-2",
            "eu-west-3",
            "eu-central-1",
            "me-south-1",
            "ap-east-1",
            "ap-south-1",
            "ap-southeast-1",
            "ap-southeast-2",
            "ap-southeast-3",
            "ap-northeast-1",
            "ap-northeast-2",
            "ap-northeast-3",
            "af-south-1",
          ]

          # Packer isn't able to loop over AWS Regions by itself. To work around this, we need to loop over all AWS regions
          # regions ourselves, until one of them has capacity (only returning an error if there is no capacity in any of the
          # regions). We could eventually also manually loop over availability zones, but this is probably not necessary as 
          # Packer will attempt to autoassign the most optimal availibity zone for the Packer instance.
          for aws_region in supported_aws_regions:
            data["initial_region"] = aws_region

            # Write the generated Packer variables to a file
            fp = open("packer_vars.json", "w")
            json.dump(data, fp)
            fp.close()

            # Display file content, for debugging purposes
            subprocess.run("cat packer_vars.json && echo '\n\n'", shell=True)

            # Validate the Packer variables file for syntax errors
            subprocess.run("packer validate -var-file=packer_vars.json ami_config.pkr.hcl && echo '\n\n'", shell=True)

            # Generate AMIs via Packer
            # Stdout will be shared with the subprocess so that we can see what is happening
            # If you need to debug Packer, add `PACKER_LOG=1` before `packer build ...` in the subprocess.run command
            subprocess.run("packer build -var-file=packer_vars.json ami_config.pkr.hcl", shell=True)

            # If Packer succeeds, it will create `manifest.json`, which is our cue to stop trying other regions
            if os.path.exists("manifest.json"):
              print("Packer succeeded, exiting AWS Regions zones loop...")
              break
            
          # Assert that `manifest.json` exists after looping over all AWS Regions to fail the workflow in the event that 
          # we couldn't get capacity in any of the AWS regions
          assert os.path.exists("manifest.json")

          # Print Packer output for debugging purposes, since this data is used in the next step of the 
          # deploy stage, in `whist-build-and-deploy.yml`
          fp = open("manifest.json", "r")
          data = json.load(fp)
          fp.close()
          print("Printing Packer output: " + str(data))

      ###########################################################################
