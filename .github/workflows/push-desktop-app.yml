# Deploy Docker images to AWS ECR
name: Push images

# Publish on update to master branch
on:
    push:
        branches: [eric/add-wf]
    workflow_dispatch:

env:
    CMAKE_VERSION: 3.16.4
    NINJA_VERSION: 1.9.0
    BUILD_TYPE: Debug
    CCACHE_VERSION: 3.7.7

jobs:
    build-desktop-app:
        name: Build-desktop-app
        runs-on: ubuntu-20.04

        steps:
            - name: Checkout Git repository
              uses: actions/checkout@v2
              with:
                  persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
                  token: ${{ secrets.GHA_PERSONAL_ACCESS_TOKEN }}
                  submodules: recursive

            - name: Download Ninja and CMake, install linux dependencies + linux cppcheck
              id: cmake_and_ninja
              shell: cmake -P {0}
              run: |
                set(cmake_version $ENV{CMAKE_VERSION})
                set(ninja_version $ENV{NINJA_VERSION})
                message(STATUS "Using host CMake version: ${CMAKE_VERSION}")
                if ("${{ runner.os }}" STREQUAL "Windows")
                  set(ninja_suffix "win.zip")
                  set(cmake_suffix "win64-x64.zip")
                  set(cmake_dir "cmake-${cmake_version}-win64-x64/bin")
                  message(STATUS "\n ::add-matcher::${{ github.workspace }}\.github\msvc_matcher.json\n")
                  message(STATUS "\n ::add-matcher::${{ github.workspace }}\.github\msvc_linker_matcher.json\n")
                elseif ("${{ runner.os }}" STREQUAL "Linux")
                  set(ninja_suffix "linux.zip")
                  set(cmake_suffix "Linux-x86_64.tar.gz")
                  set(cmake_dir "cmake-${cmake_version}-Linux-x86_64/bin")
                  message(STATUS "\n ::add-matcher::${{ github.workspace }}/.github/gcc_matcher.json\n")
                elseif ("${{ runner.os }}" STREQUAL "macOS")
                  set(ninja_suffix "mac.zip")
                  set(cmake_suffix "Darwin-x86_64.tar.gz")
                  set(cmake_dir "cmake-${cmake_version}-Darwin-x86_64/CMake.app/Contents/bin")
                  message(STATUS "\n ::add-matcher::${{ github.workspace }}/.github/clang_matcher.json\n")
                endif()
                set(ninja_url "https://github.com/ninja-build/ninja/releases/download/v${ninja_version}/ninja-${ninja_suffix}")
                file(DOWNLOAD "${ninja_url}" ./ninja.zip SHOW_PROGRESS)
                execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./ninja.zip)
                set(cmake_url "https://github.com/Kitware/CMake/releases/download/v${cmake_version}/cmake-${cmake_version}-${cmake_suffix}")
                file(DOWNLOAD "${cmake_url}" ./cmake.zip SHOW_PROGRESS)
                execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./cmake.zip)
                # Save the path for other steps
                file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/${cmake_dir}" cmake_dir)
                message("::set-output name=cmake_dir::${cmake_dir}")
                if (NOT "${{ runner.os }}" STREQUAL "Windows")
                  execute_process(
                    COMMAND chmod +x ninja
                    COMMAND chmod +x ${cmake_dir}/cmake
                  )
                endif()
                message(STATUS "\n::add-matcher::./.github/cppcheck_matcher.json\n")
                message(STATUS "\n::add-matcher::./.github/cmake_matcher.json\n")
                if ("${{ runner.os }}" STREQUAL "Linux")
                  # install linux dev dependencies
                    execute_process(COMMAND bash -c "sudo apt-get update -y")
                    execute_process(COMMAND ${{ github.workspace }}/desktop/linux-client-setup.sh)
                    execute_process(COMMAND bash -c "sudo apt-get install cppcheck -y")
                elseif("${{ runner.os }}" STREQUAL "macOS")
                    execute_process(COMMAND brew install cppcheck)
                endif()

            - name: Build protocol
              run: cd protocol && ls && ./build_protocol.sh release
            
            - name: Publish the client-application
              run: cd client-applications && cd desktop && ./publish-2.sh release
            # - name: Build release protocol
            #   run: ./build_protocol.sh release

            # - name: Build container images
            #   run: |
            #       for app in ${{ env.apps }}
            #       do
            #         ./build_container_image.sh $app
            #       done

            # - name: Notify Slack
            #   run: |
            #       curl -X POST \
            #       --data-urlencode "payload={\"channel\": \"#alerts\", \"username\": \"Fractal Bot\", \"text\": \"Container images builds pushed to production via Docker push to ECR.\", \"icon_emoji\": \":fractal:\"}" \
            #       https://hooks.slack.com/services/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

